ontologybased data access concerns answering queries over the target ontology
given a source relational database ontologybased data access concerns
given a target owl ontology ontologybased data access concerns
the target ontology using these three components
given a mapping from the source database to the target ontology ontologybased data access concerns
this paper presents the development of an ontologybased data access system that is a hybridization of materialization
this paper presents the development of ultrawrapobda that is a hybridization of query rewriting
an ontologybased data access system comprising bidirectional evaluation
this paper presents the development of ultrawrapobda that is a hybridization of materialization
this paper presents the development of an ontologybased data access system that is a hybridization of query rewriting
we observe that by compiling the ontological entailments as mappings is able to reduce the execution time of a sparql query by rewriting the query in terms of the views
we observe that by implementing the mappings as sql views is able to reduce the execution time of a sparql query by rewriting the query in terms of the views
we observe that by materializing a subset of the views the underlying sql optimizer is able to reduce the execution time of a sparql query by rewriting the query in terms of the views
the views specified by the mappings
the first ontologybased data access system supporting ontologies with transitivity by using sql recursion
to the best of our knowledge this is the first ontologybased data access system
a stateoftheart ontologybased data access system which validates the cost model
a stateoftheart ontologybased data access system which demonstrates favorable execution times
an empirical evaluation comparing with a stateoftheart ontologybased data access system
we contributions include an empirical evaluation
we contributions include an efficient algorithm to compile ontological entailments as mappings
we contributions include a cost model to determine which views to materialize to attain the fastest execution time
we contributions include a proof that every sparql query can be rewritten into a sql query in the context of mappings