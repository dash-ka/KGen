@PREFIX	cso:	<https://cso.kmi.open.ac.uk/topics/>	
@LINK	encode	no_match	not_found	encode	
@LINK	argue	no_match	not_found	argue	
@LINK	use	no_match	not_found	use	
@LINK	propose	no_match	not_found	propose	
@LINK	describe	no_match	not_found	describe	
@LINK	be	no_match	not_found	be	
@LINK	represent	no_match	not_found	represent	
@LINK	technique	no_match	not_found	technique	
@LINK	unreify	no_match	not_found	unreify	
@LINK	illustrate	no_match	not_found	illustrate	
@LINK	cause	no_match	not_found	cause	
@LINK	extend	no_match	not_found	extend	
@LINK	increase	no_match	not_found	increase	
@LINK	limit	no_match	not_found	limit	
@LINK	handle	no_match	not_found	handle	
@LINK	usual remedy	no_match	not_found	usual remedy	
@LINK	program pddaml pddl	no_match	not_found	program pddaml pddl	
@LINK	domain specification	no_match	not_found	domain specification	
@LINK	advantage	no_match	not_found	advantage	
@LINK	size	no_match	not_found	size	
@LINK	reification	no_match	not_found	reification	
@LINK	variable cleanly reification	no_match	not_found	variable cleanly reification	
@LINK	ability	no_match	not_found	ability	
@LINK	richer language	no_match	not_found	richer language	
@LINK	well know reification	no_match	not_found	well know reification	
@LINK	use	no_match	not_found	use	
@LINK	limitation	no_match	not_found	limitation	
@LINK	ordinary xml expressivity	no_match	not_found	ordinary xml expressivity	
@LINK	rdf	sameas	cso:rdf	rdf	
@LINK	method	no_match	not_found	method	
@LINK	rdfdamloil family	no_match	not_found	rdfdamloil family	
@LINK	method generalize	no_match	not_found	method generalize	
@LINK	predicate calculus	no_match	not_found	predicate calculus	
@LINK	practice benign	no_match	not_found	practice benign	
@LINK	constant multiple	no_match	not_found	constant multiple	
@LINK	ordinary xml	no_match	not_found	ordinary xml	
@LINK	pddl	no_match	not_found	pddl	
@LINK	system	no_match	not_found	system	
@LINK	describe	no_match	not_found	describe	
@LINK	algorithm capable	no_match	not_found	algorithm capable	
@LINK	logical notation	no_match	not_found	logical notation	
@LINK	encode type predicate calculus use reification reification	no_match	not_found	encode type predicate calculus use reification reification	
@LINK	claim	no_match	not_found	claim	
@LINK	language	no_match	not_found	language	
@LINK	need	no_match	not_found	need	
@LINK	do inference	no_match	not_found	do inference	
@LINK	semantic web	sameas	cso:semantic_web	semantic web	
@LINK	formula	no_match	not_found	formula	
@LINK	notation	no_match	not_found	notation	
@LINK	xml	sameas	cso:xml	xml	
@LINK	inference	sameas	cso:inference	inference	
