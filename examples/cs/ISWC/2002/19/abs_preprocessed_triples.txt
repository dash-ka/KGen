s13.1	"represent predicate calculus on the semantic web"
s13.1	"represent predicate calculus on the semantic web"	rdf:subject	"predicate calculus on the semantic web"
s13.1	"predicate calculus on the semantic web"	rdfs:member	"predicate calculus"
s13.1	"predicate calculus on the semantic web"	rdfs:member	"semantic web"
s13.1	"predicate calculus"	rdfs:subClassOf	"calculus"
s13.1	"predicate calculus"	rdfs:member	"predicate"
s13.1	"semantic web"	rdfs:member	"semantic"
s13.1	"semantic web"	rdfs:subClassOf	"web"
s13.1	"predicate on semantic web"	rdfs:member	"predicate"
s13.1	"predicate on semantic web"	rdfs:member	"semantic web"
s13.1	"represent predicate calculus on the semantic web"	rdf:predicate	"represent"
s13	"we also argue that the ability to represent predicate calculus on the semantic web is crucial"
s13	"we also argue that the ability to represent predicate calculus on the semantic web is crucial"	rdf:subject	"we"
s13	"we also argue that the ability to represent predicate calculus on the semantic web is crucial"	rdf:predicate	"argue"
s13	"we also argue that the ability to represent predicate calculus on the semantic web is crucial"	rdf:object	"ability to represent predicate calculus on the semantic web be crucial"
s13	"ability to represent predicate calculus on the semantic web be crucial"	rdfs:member	"predicate calculus"
s13	"ability to represent predicate calculus on the semantic web be crucial"	rdfs:member	"ability"
s13	"ability to represent predicate calculus on the semantic web be crucial"	rdfs:member	"semantic web"
s13	"predicate calculus"	rdfs:subClassOf	"calculus"
s13	"predicate calculus"	rdfs:member	"predicate"
s13	"semantic web"	rdfs:member	"semantic"
s13	"semantic web"	rdfs:subClassOf	"web"
s13	"represent on semantic web"	rdfs:member	"represent"
s13	"represent on semantic web"	rdfs:member	"semantic web"
s13	"we also argue that the ability to represent predicate calculus on the semantic web is crucial"	local:AM-DIS	"also"
s12.5	""
s12.5	""	rdf:predicate	"need"
s12.4	"any algorithm capable of doing inferences using logical notations unreify those notations"
s12.4	"any algorithm capable of doing inferences using logical notations unreify those notations"	rdf:subject	"algorithm capable of do inference use logical notation"
s12.4	"algorithm capable of do inference use logical notation"	rdfs:member	"algorithm capable"
s12.4	"algorithm capable of do inference use logical notation"	rdfs:member	"do inference"
s12.4	"algorithm capable of do inference use logical notation"	rdfs:member	"logical notation"
s12.4	"do inference"	rdfs:member	"do"
s12.4	"algorithm capable"	rdfs:subClassOf	"capable"
s12.4	"logical notation"	rdfs:subClassOf	"notation"
s12.4	"logical notation"	rdfs:member	"logical"
s12.4	"do inference"	rdfs:subClassOf	"inference"
s12.4	"algorithm capable"	rdfs:member	"algorithm"
s12.4	"capable algorithm"	rdfs:subClassOf	"algorithm"
s12.4	"any algorithm capable of doing inferences using logical notations unreify those notations"	rdf:predicate	"unreify"
s12.4	"any algorithm capable of doing inferences using logical notations unreify those notations"	rdf:object	"notation"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"	rdf:subject	"algorithm capable of do inference use logical notation"
s12.3	"algorithm capable of do inference use logical notation"	rdfs:member	"algorithm capable"
s12.3	"algorithm capable of do inference use logical notation"	rdfs:member	"do inference"
s12.3	"algorithm capable of do inference use logical notation"	rdfs:member	"logical notation"
s12.3	"do inference"	rdfs:member	"do"
s12.3	"algorithm capable"	rdfs:subClassOf	"capable"
s12.3	"logical notation"	rdfs:subClassOf	"notation"
s12.3	"logical notation"	rdfs:member	"logical"
s12.3	"do inference"	rdfs:subClassOf	"inference"
s12.3	"algorithm capable"	rdfs:member	"algorithm"
s12.3	"capable algorithm"	rdfs:subClassOf	"algorithm"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"	rdf:predicate	"extend"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"	rdf:object	"unreify those notation a need"
s12.3	"unreify those notation a need"	rdfs:member	"need"
s12.3	"unreify those notation a need"	rdfs:member	"notation"
s12.3	"unreify notation"	rdfs:subClassOf	"notation"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"	local:AM-MNR	"easily"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"	local:AM-MOD	"can"
s12.2	"using logical notations"
s12.2	"using logical notations"	rdf:subject	"logical notation"
s12.2	"logical notation"	rdfs:member	"logical"
s12.2	"logical notation"	rdfs:subClassOf	"notation"
s12.2	"using logical notations"	rdf:predicate	"use"
s12.1	"any algorithm doing inferences using logical notations"
s12.1	"any algorithm doing inferences using logical notations"	rdf:subject	"algorithm"
s12.1	"any algorithm doing inferences using logical notations"	rdf:predicate	"do"
s12.1	"any algorithm doing inferences using logical notations"	rdf:object	"inference"
s12.1	"any algorithm doing inferences using logical notations"	local:AM-MNR	"use logical notation"
s12.1	"use logical notation"	rdfs:member	"use logical"
s12.1	"logical notation"	rdfs:subClassOf	"notation"
s12.1	"logical notation"	rdfs:member	"logical"
s12.1	"use logical notation"	rdfs:subClassOf	"notation"
s12.1	"use logical"	rdfs:member	"use"
s12.1	"use logical"	rdfs:subClassOf	"logical"
s12	"we argue that reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"
s12	"we argue that reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdf:subject	"we"
s12	"we argue that reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdf:predicate	"argue"
s12	"we argue that reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdf:object	"reification while logically suspect be in practice benign because any algorithm capable of do inference use logical notation can be easily extend to unreify those notation a need"
s12	"reification while logically suspect be in practice benign because any algorithm capable of do inference use logical notation can be easily extend to unreify those notation a need"	rdfs:member	"need"
s12	"reification while logically suspect be in practice benign because any algorithm capable of do inference use logical notation can be easily extend to unreify those notation a need"	rdfs:member	"algorithm capable"
s12	"reification while logically suspect be in practice benign because any algorithm capable of do inference use logical notation can be easily extend to unreify those notation a need"	rdfs:member	"logical notation"
s12	"reification while logically suspect be in practice benign because any algorithm capable of do inference use logical notation can be easily extend to unreify those notation a need"	rdfs:member	"do inference"
s12	"reification while logically suspect be in practice benign because any algorithm capable of do inference use logical notation can be easily extend to unreify those notation a need"	rdfs:member	"practice benign"
s12	"reification while logically suspect be in practice benign because any algorithm capable of do inference use logical notation can be easily extend to unreify those notation a need"	rdfs:member	"reification"
s12	"reification while logically suspect be in practice benign because any algorithm capable of do inference use logical notation can be easily extend to unreify those notation a need"	rdfs:member	"notation"
s12	"do inference"	rdfs:member	"do"
s12	"algorithm capable"	rdfs:subClassOf	"capable"
s12	"logical notation"	rdfs:subClassOf	"notation"
s12	"logical notation"	rdfs:member	"logical"
s12	"practice benign"	rdfs:member	"practice"
s12	"do inference"	rdfs:subClassOf	"inference"
s12	"practice benign"	rdfs:subClassOf	"benign"
s12	"algorithm capable"	rdfs:member	"algorithm"
s12	"easily extend"	rdfs:subClassOf	"extend"
s12	"be easily extend"	rdfs:subClassOf	"easily extend"
s12	"can be easily extend"	rdfs:subClassOf	"be easily extend"
s12	"use logical notation"	rdfs:subClassOf	"logical notation"
s12	"inference use logical notation"	rdfs:subClassOf	"use logical notation"
s12	"capable algorithm"	rdfs:subClassOf	"algorithm"
s12	"benign practice"	rdfs:subClassOf	"practice"
s12	"logically suspect"	rdfs:subClassOf	"suspect"
s11	"pddaml which encodes domain specifications in pddl"
s11	"pddaml which encodes domain specifications in pddl"	rdf:subject	"pddaml"
s11	"pddaml which encodes domain specifications in pddl"	rdf:predicate	"encode"
s11	"pddaml which encodes domain specifications in pddl"	rdf:object	"domain specification"
s11	"domain specification"	rdfs:member	"domain"
s11	"domain specification"	rdfs:subClassOf	"specification"
s11	"pddaml which encodes domain specifications in pddl"	local:AM-LOC	"pddl"
s10	"using we technique"
s10	"using we technique"	rdf:subject	"technique"
s10	"using we technique"	rdf:predicate	"use"
s9.1	"we illustrate by describing we program pddaml"
s9.1	"we illustrate by describing we program pddaml"	rdf:subject	"we"
s9.1	"we illustrate by describing we program pddaml"	rdf:predicate	"illustrate"
s9.1	"we illustrate by describing we program pddaml"	local:AM-MNR	"describe we program pddaml"
s9.1	"describe we program pddaml"	rdfs:member	"describe"
s9.1	"describe we program pddaml"	rdfs:member	"program pddaml"
s9.1	"program pddaml"	rdfs:member	"program"
s9.1	"program pddaml"	rdfs:subClassOf	"pddaml"
s9	"a method generalizes to virtually any system a claim which we illustrate by describing we program pddaml"
s9	"a method generalizes to virtually any system a claim which we illustrate by describing we program pddaml"	rdf:subject	"method"
s9	"a method generalizes to virtually any system a claim which we illustrate by describing we program pddaml"	rdf:predicate	"generalize"
s9	"a method generalizes to virtually any system a claim which we illustrate by describing we program pddaml"	rdf:object	"virtually any system a claim which we illustrate by describe we program pddaml"
s9	"virtually any system a claim which we illustrate by describe we program pddaml"	rdfs:member	"program pddaml"
s9	"virtually any system a claim which we illustrate by describe we program pddaml"	rdfs:member	"system"
s9	"virtually any system a claim which we illustrate by describe we program pddaml"	rdfs:member	"describe"
s9	"virtually any system a claim which we illustrate by describe we program pddaml"	rdfs:member	"claim"
s9	"program pddaml"	rdfs:member	"program"
s9	"program pddaml"	rdfs:subClassOf	"pddaml"
s9	"virtually system"	rdfs:subClassOf	"system"
s8.1	"the size increase by only a constant multiple"
s8.1	"the size increase by only a constant multiple"	rdf:subject	"size"
s8.1	"the size increase by only a constant multiple"	rdf:predicate	"increase"
s8.1	"the size increase by only a constant multiple"	rdf:object	"constant multiple"
s8.1	"constant multiple"	rdfs:subClassOf	"multiple"
s8.1	"constant multiple"	rdfs:member	"constant"
s8	"reification which causes the size to increase by only a constant multiple"
s8	"reification which causes the size to increase by only a constant multiple"	rdf:subject	"reification"
s8	"reification which causes the size to increase by only a constant multiple"	rdf:predicate	"cause"
s8	"reification which causes the size to increase by only a constant multiple"	rdf:object	"size to increase by only a constant multiple"
s8	"size to increase by only a constant multiple"	rdfs:member	"size"
s8	"size to increase by only a constant multiple"	rdfs:member	"constant multiple"
s8	"constant multiple"	rdfs:subClassOf	"multiple"
s8	"constant multiple"	rdfs:member	"constant"
s8	"only constant multiple"	rdfs:subClassOf	"constant multiple"
s8	"increase by only constant multiple"	rdfs:member	"increase"
s8	"increase by only constant multiple"	rdfs:member	"only constant multiple"
s7	"reification which handles bound variables cleanly"
s7	"reification which handles bound variables cleanly"	rdf:subject	"reification"
s7	"reification which handles bound variables cleanly"	rdf:predicate	"handle"
s7	"reification which handles bound variables cleanly"	rdf:object	"bind variable"
s7	"reification which handles bound variables cleanly"	local:AM-MNR	"cleanly"
s6.2	"using reification"
s6.2	"using reification"	rdf:subject	"reification"
s6.2	"using reification"	rdf:predicate	"use"
s6.1	"a method for encoding typed predicate calculus using reification"
s6.1	"a method for encoding typed predicate calculus using reification"	rdf:subject	"method for encode"
s6.1	"method for encode"	rdfs:member	"encode"
s6.1	"method for encode"	rdfs:member	"method"
s6.1	"method for"	rdfs:member	"method"
s6.1	"method for"	rdfs:member	"for"
s6.1	"a method for encoding typed predicate calculus using reification"	rdf:predicate	"type"
s6.1	"a method for encoding typed predicate calculus using reification"	rdf:object	"predicate calculus"
s6.1	"predicate calculus"	rdfs:subClassOf	"calculus"
s6.1	"predicate calculus"	rdfs:member	"predicate"
s6.1	"a method for encoding typed predicate calculus using reification"	local:AM-MNR	"use reification"
s6.1	"use reification"	rdfs:subClassOf	"reification"
s6.1	"use reification"	rdfs:member	"use"
s6	"we propose a method for encoding typed predicate calculus using reification"
s6	"we propose a method for encoding typed predicate calculus using reification"	rdf:subject	"we"
s6	"we propose a method for encoding typed predicate calculus using reification"	rdf:predicate	"propose"
s6	"we propose a method for encoding typed predicate calculus using reification"	rdf:object	"method for encode type predicate calculus use reification"
s6	"method for encode type predicate calculus use reification"	rdfs:member	"encode type predicate calculus use reification"
s6	"method for encode type predicate calculus use reification"	rdfs:member	"method"
s6	"type predicate"	rdfs:member	"type"
s6	"predicate calculus use"	rdfs:member	"predicate calculus"
s6	"encode type predicate calculus"	rdfs:member	"encode type predicate"
s6	"predicate calculus use"	rdfs:subClassOf	"use"
s6	"use reification"	rdfs:member	"use"
s6	"type predicate calculus use reification"	rdfs:member	"type predicate calculus use"
s6	"type predicate calculus use"	rdfs:subClassOf	"use"
s6	"type predicate calculus"	rdfs:member	"type predicate"
s6	"encode type predicate calculus use"	rdfs:member	"encode type predicate calculus"
s6	"predicate calculus use reification"	rdfs:member	"predicate calculus use"
s6	"encode type"	rdfs:subClassOf	"type"
s6	"calculus use"	rdfs:member	"calculus"
s6	"calculus use reification"	rdfs:subClassOf	"reification"
s6	"calculus use"	rdfs:subClassOf	"use"
s6	"predicate calculus use reification"	rdfs:subClassOf	"reification"
s6	"encode type"	rdfs:member	"encode"
s6	"calculus use reification"	rdfs:member	"calculus use"
s6	"predicate calculus"	rdfs:subClassOf	"calculus"
s6	"predicate calculus"	rdfs:member	"predicate"
s6	"type predicate calculus use"	rdfs:member	"type predicate calculus"
s6	"encode type predicate calculus use"	rdfs:subClassOf	"use"
s6	"encode type predicate calculus use reification"	rdfs:member	"encode type predicate calculus use"
s6	"type predicate calculus use reification"	rdfs:subClassOf	"reification"
s6	"type predicate"	rdfs:subClassOf	"predicate"
s6	"encode type predicate calculus use reification"	rdfs:subClassOf	"reification"
s6	"encode type predicate"	rdfs:member	"encode type"
s6	"type predicate calculus"	rdfs:subClassOf	"calculus"
s6	"use reification"	rdfs:subClassOf	"reification"
s6	"encode type predicate calculus"	rdfs:subClassOf	"calculus"
s6	"encode type predicate"	rdfs:subClassOf	"predicate"
s6	"calculus use reification"	rdfs:subClassOf	"use reification"
s6	"predicate calculus use reification"	rdfs:subClassOf	"calculus use reification"
s6	"type predicate calculus use reification"	rdfs:subClassOf	"predicate calculus use reification"
s5.1	"rdf describe formulas in a richer language"
s5.1	"rdf describe formulas in a richer language"	rdf:subject	"rdf"
s5.1	"rdf describe formulas in a richer language"	rdf:predicate	"describe"
s5.1	"rdf describe formulas in a richer language"	rdf:object	"formula in a richer language"
s5.1	"formula in a richer language"	rdfs:member	"formula"
s5.1	"formula in a richer language"	rdfs:member	"richer language"
s5.1	"richer language"	rdfs:member	"richer"
s5.1	"richer language"	rdfs:subClassOf	"language"
s5.1	"formula in richer language"	rdfs:member	"formula"
s5.1	"formula in richer language"	rdfs:member	"richer language"
s5	"rdf used to describe formulas in a richer language"
s5	"rdf used to describe formulas in a richer language"	rdf:subject	"rdf"
s5	"rdf used to describe formulas in a richer language"	rdf:predicate	"use"
s5	"rdf used to describe formulas in a richer language"	rdf:object	"describe formula in a richer language"
s5	"describe formula in a richer language"	rdfs:member	"describe formula"
s5	"describe formula in a richer language"	rdfs:member	"richer language"
s5	"describe formula"	rdfs:member	"describe"
s5	"richer language"	rdfs:subClassOf	"language"
s5	"describe formula"	rdfs:subClassOf	"formula"
s5	"richer language"	rdfs:member	"richer"
s5	"describe in richer language"	rdfs:member	"describe"
s5	"describe in richer language"	rdfs:member	"richer language"
s4	"this limitation well known"
s4	"this limitation well known"	rdf:subject	"limitation"
s4	"this limitation well known"	rdf:predicate	"know"
s4	"this limitation well known"	local:AM-MNR	"well"
