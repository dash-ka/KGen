s13.1	"represent predicate calculus on the semantic web"
s13.1	"represent predicate calculus on the semantic web"	rdf:subject	"predicate calculus on the semantic web"
s13.1	"predicate calculus on the semantic web"	rdfs:member	"predicate calculus"
s13.1	"predicate calculus on the semantic web"	rdfs:member	"semantic web"
s13.1	"semantic web"	rdfs:member	"semantic"
s13.1	"semantic web"	rdfs:subClassOf	"web"
s13.1	"predicate calculus"	rdfs:member	"predicate"
s13.1	"predicate calculus"	rdfs:subClassOf	"calculus"
s13.1	"predicate on semantic web"	rdfs:member	"predicate"
s13.1	"predicate on semantic web"	rdfs:member	"semantic web"
s13.1	"represent predicate calculus on the semantic web"	rdf:predicate	"represent"
s13	"we also argue that the ability to represent predicate calculus on the semantic web is crucial"
s13	"we also argue that the ability to represent predicate calculus on the semantic web is crucial"	rdf:subject	"we"
s13	"we also argue that the ability to represent predicate calculus on the semantic web is crucial"	rdf:predicate	"argue"
s13	"we also argue that the ability to represent predicate calculus on the semantic web is crucial"	rdf:object	"ability to represent predicate calculus on the semantic web is crucial"
s13	"ability to represent predicate calculus on the semantic web is crucial"	rdfs:member	"predicate calculus"
s13	"ability to represent predicate calculus on the semantic web is crucial"	rdfs:member	"ability"
s13	"ability to represent predicate calculus on the semantic web is crucial"	rdfs:member	"semantic web"
s13	"semantic web"	rdfs:member	"semantic"
s13	"semantic web"	rdfs:subClassOf	"web"
s13	"predicate calculus"	rdfs:member	"predicate"
s13	"predicate calculus"	rdfs:subClassOf	"calculus"
s13	"represent on semantic web"	rdfs:member	"represent"
s13	"represent on semantic web"	rdfs:member	"semantic web"
s13	"we also argue that the ability to represent predicate calculus on the semantic web is crucial"	local:AM-DIS	"also"
s12.5	""
s12.5	""	rdf:predicate	"need"
s12.4	"any algorithm capable of doing inferences using logical notations unreify those notations"
s12.4	"any algorithm capable of doing inferences using logical notations unreify those notations"	rdf:subject	"algorithm capable of doing inferences using logical notations"
s12.4	"algorithm capable of doing inferences using logical notations"	rdfs:member	"logical notations"
s12.4	"algorithm capable of doing inferences using logical notations"	rdfs:member	"inferences"
s12.4	"algorithm capable of doing inferences using logical notations"	rdfs:member	"algorithm"
s12.4	"logical notations"	rdfs:member	"logical"
s12.4	"logical notations"	rdfs:subClassOf	"notations"
s12.4	"capable algorithm"	rdfs:subClassOf	"algorithm"
s12.4	"any algorithm capable of doing inferences using logical notations unreify those notations"	rdf:predicate	"unreify"
s12.4	"any algorithm capable of doing inferences using logical notations unreify those notations"	rdf:object	"notations"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"	rdf:subject	"algorithm capable of doing inferences using logical notations"
s12.3	"algorithm capable of doing inferences using logical notations"	rdfs:member	"logical notations"
s12.3	"algorithm capable of doing inferences using logical notations"	rdfs:member	"inferences"
s12.3	"algorithm capable of doing inferences using logical notations"	rdfs:member	"algorithm"
s12.3	"logical notations"	rdfs:member	"logical"
s12.3	"logical notations"	rdfs:subClassOf	"notations"
s12.3	"capable algorithm"	rdfs:subClassOf	"algorithm"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"	rdf:predicate	"extend"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"	rdf:object	"unreify those notations as needed"
s12.3	"unreify notations"	rdfs:subClassOf	"notations"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"	local:AM-MNR	"easily"
s12.3	"any algorithm capable of doing inferences using logical notations can easily extended to unreify those notations as needed"	local:AM-MOD	"can"
s12.2	"using logical notations"
s12.2	"using logical notations"	rdf:subject	"logical notations"
s12.2	"logical notations"	rdfs:member	"logical"
s12.2	"logical notations"	rdfs:subClassOf	"notations"
s12.2	"using logical notations"	rdf:predicate	"use"
s12.1	"any algorithm doing inferences using logical notations"
s12.1	"any algorithm doing inferences using logical notations"	rdf:subject	"algorithm"
s12.1	"any algorithm doing inferences using logical notations"	rdf:predicate	"do"
s12.1	"any algorithm doing inferences using logical notations"	rdf:object	"inferences"
s12.1	"any algorithm doing inferences using logical notations"	local:AM-MNR	"using logical notations"
s12	"we argue that reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"
s12	"we argue that reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdf:subject	"we"
s12	"we argue that reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdf:predicate	"argue"
s12	"we argue that reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdf:object	"reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"
s12	"reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdfs:member	"reification"
s12	"reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdfs:member	"algorithm capable"
s12	"reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdfs:member	"notations"
s12	"reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdfs:member	"inferences"
s12	"reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdfs:member	"practice benign"
s12	"reification while logically suspect is in practice benign because any algorithm capable of doing inferences using logical notations can be easily extended to unreify those notations as needed"	rdfs:member	"logical notations"
s12	"practice benign"	rdfs:member	"practice"
s12	"algorithm capable"	rdfs:subClassOf	"capable"
s12	"logical notations"	rdfs:member	"logical"
s12	"logical notations"	rdfs:subClassOf	"notations"
s12	"practice benign"	rdfs:subClassOf	"benign"
s12	"algorithm capable"	rdfs:member	"algorithm"
s12	"easily extended"	rdfs:subClassOf	"extended"
s12	"can easily extended"	rdfs:subClassOf	"easily extended"
s12	"capable algorithm"	rdfs:subClassOf	"algorithm"
s12	"logically suspect"	rdfs:subClassOf	"suspect"
s12	"benign in practice"	rdfs:member	"benign"
s12	"benign in practice"	rdfs:member	"practice"
s11.1	"we illustrate by describing we program pddaml"
s11.1	"we illustrate by describing we program pddaml"	rdf:subject	"we"
s11.1	"we illustrate by describing we program pddaml"	rdf:predicate	"illustrate"
s11.1	"we illustrate by describing we program pddaml"	local:AM-MNR	"describing we program PDDAML"
s11.1	"program pddaml"	rdfs:subClassOf	"pddaml"
s11.1	"program pddaml"	rdfs:member	"program"
s11	"a method generalizes to virtually any system a claim which we illustrate by describing we program pddaml"
s11	"a method generalizes to virtually any system a claim which we illustrate by describing we program pddaml"	rdf:subject	"method"
s11	"a method generalizes to virtually any system a claim which we illustrate by describing we program pddaml"	rdf:predicate	"generalize"
s11	"a method generalizes to virtually any system a claim which we illustrate by describing we program pddaml"	rdf:object	"virtually any system a claim which we illustrate by describing we program PDDAML"
s11	"virtually any system a claim which we illustrate by describing we program pddaml"	rdfs:member	"program pddaml"
s11	"virtually any system a claim which we illustrate by describing we program pddaml"	rdfs:member	"claim"
s11	"virtually any system a claim which we illustrate by describing we program pddaml"	rdfs:member	"system"
s11	"program pddaml"	rdfs:subClassOf	"pddaml"
s11	"program pddaml"	rdfs:member	"program"
s11	"virtually system"	rdfs:subClassOf	"system"
s10	"pddl using we technique"
s10	"pddl using we technique"	rdf:subject	"PDDL"
s10	"pddl using we technique"	rdf:predicate	"use"
s10	"pddl using we technique"	rdf:object	"technique"
s9	"pddaml which encodes domain specifications in pddl"
s9	"pddaml which encodes domain specifications in pddl"	rdf:subject	"PDDAML"
s9	"pddaml which encodes domain specifications in pddl"	rdf:predicate	"encode"
s9	"pddaml which encodes domain specifications in pddl"	rdf:object	"domain specifications"
s9	"domain specifications"	rdfs:subClassOf	"specifications"
s9	"domain specifications"	rdfs:member	"domain"
s9	"pddaml which encodes domain specifications in pddl"	local:AM-LOC	"PDDL"
s8.1	"the size increase by only a constant multiple"
s8.1	"the size increase by only a constant multiple"	rdf:subject	"size"
s8.1	"the size increase by only a constant multiple"	rdf:predicate	"increase"
s8.1	"the size increase by only a constant multiple"	rdf:object	"constant multiple"
s8.1	"constant multiple"	rdfs:member	"constant"
s8.1	"constant multiple"	rdfs:subClassOf	"multiple"
s8	"reification which causes the size to increase by only a constant multiple"
s8	"reification which causes the size to increase by only a constant multiple"	rdf:subject	"reification"
s8	"reification which causes the size to increase by only a constant multiple"	rdf:predicate	"cause"
s8	"reification which causes the size to increase by only a constant multiple"	rdf:object	"size to increase by only a constant multiple"
s8	"size to increase by only a constant multiple"	rdfs:member	"constant multiple"
s8	"size to increase by only a constant multiple"	rdfs:member	"size"
s8	"constant multiple"	rdfs:member	"constant"
s8	"constant multiple"	rdfs:subClassOf	"multiple"
s8	"only constant multiple"	rdfs:subClassOf	"constant multiple"
s8	"increase by only constant multiple"	rdfs:member	"increase"
s8	"increase by only constant multiple"	rdfs:member	"only constant multiple"
s7.2	"using reification"
s7.2	"using reification"	rdf:subject	"reification"
s7.2	"using reification"	rdf:predicate	"use"
s7.1	"a method for encoding typed predicate calculus using reification"
s7.1	"a method for encoding typed predicate calculus using reification"	rdf:subject	"method for encoding"
s7.1	"a method for encoding typed predicate calculus using reification"	rdf:predicate	"type"
s7.1	"a method for encoding typed predicate calculus using reification"	rdf:object	"predicate calculus"
s7.1	"predicate calculus"	rdfs:member	"predicate"
s7.1	"predicate calculus"	rdfs:subClassOf	"calculus"
s7.1	"a method for encoding typed predicate calculus using reification"	local:AM-MNR	"using reification"
s7	"we propose a method for encoding typed predicate calculus using reification"
s7	"we propose a method for encoding typed predicate calculus using reification"	rdf:subject	"We"
s7	"we propose a method for encoding typed predicate calculus using reification"	rdf:predicate	"propose"
s7	"we propose a method for encoding typed predicate calculus using reification"	rdf:object	"method for encoding typed predicate calculus using reification"
s7	"method for encoding typed predicate calculus using reification"	rdfs:member	"reification"
s7	"method for encoding typed predicate calculus using reification"	rdfs:member	"method"
s7	"method for encoding typed predicate calculus using reification"	rdfs:member	"typed predicate calculus"
s7	"predicate calculus"	rdfs:member	"predicate"
s7	"typed predicate"	rdfs:member	"typed"
s7	"typed predicate calculus"	rdfs:member	"typed predicate"
s7	"predicate calculus"	rdfs:subClassOf	"calculus"
s7	"typed predicate calculus"	rdfs:subClassOf	"calculus"
s7	"typed predicate"	rdfs:subClassOf	"predicate"
s7	"typed predicate calculus"	rdfs:subClassOf	"predicate calculus"
s6	"reification which handles bound variables cleanly"
s6	"reification which handles bound variables cleanly"	rdf:subject	"reification"
s6	"reification which handles bound variables cleanly"	rdf:predicate	"handle"
s6	"reification which handles bound variables cleanly"	rdf:object	"bound variables"
s6	"bound variables"	rdfs:member	"bound"
s6	"bound variables"	rdfs:subClassOf	"variables"
s6	"reification which handles bound variables cleanly"	local:AM-MNR	"cleanly"
s4	"this limitation well known"
s4	"this limitation well known"	rdf:subject	"limitation"
s4	"this limitation well known"	rdf:predicate	"know"
s4	"this limitation well known"	local:AM-MNR	"well"
s3.1	"rdf describe formulas in a richer language"
s3.1	"rdf describe formulas in a richer language"	rdf:subject	"RDF"
s3.1	"rdf describe formulas in a richer language"	rdf:predicate	"describe"
s3.1	"rdf describe formulas in a richer language"	rdf:object	"formulas in a richer language"
s3.1	"formulas in a richer language"	rdfs:member	"formulas"
s3.1	"formulas in a richer language"	rdfs:member	"richer language"
s3.1	"richer language"	rdfs:subClassOf	"language"
s3.1	"richer language"	rdfs:member	"richer"
s3.1	"formulas in richer language"	rdfs:member	"formulas"
s3.1	"formulas in richer language"	rdfs:member	"richer language"
s3	"rdf used to describe formulas in a richer language"
s3	"rdf used to describe formulas in a richer language"	rdf:subject	"RDF"
s3	"rdf used to describe formulas in a richer language"	rdf:predicate	"use"
s3	"rdf used to describe formulas in a richer language"	rdf:object	"describe formulas in a richer language"
s3	"describe formulas in a richer language"	rdfs:member	"describe formulas"
s3	"describe formulas in a richer language"	rdfs:member	"richer language"
s3	"describe formulas"	rdfs:subClassOf	"formulas"
s3	"richer language"	rdfs:subClassOf	"language"
s3	"describe formulas"	rdfs:member	"describe"
s3	"richer language"	rdfs:member	"richer"
s3	"describe in richer language"	rdfs:member	"describe"
s3	"describe in richer language"	rdfs:member	"richer language"
