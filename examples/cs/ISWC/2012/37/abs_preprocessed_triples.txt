s17.4	"reducing the time"
s17.4	"reducing the time"	rdf:subject	"time"
s17.4	"reducing the time"	rdf:predicate	"reduce"
s17.3	"fully cached results"
s17.3	"fully cached results"	rdf:subject	"result"
s17.3	"fully cached results"	rdf:predicate	"cache"
s17.3	"fully cached results"	local:AM-MNR	"fully"
s17.2	"that hybrid query execution can improve freshness vs fully cached results while reducing the time"
s17.2	"that hybrid query execution can improve freshness vs fully cached results while reducing the time"	rdf:subject	"hybrid query execution"
s17.2	"hybrid query"	rdfs:member	"hybrid"
s17.2	"hybrid query"	rdfs:subClassOf	"query"
s17.2	"hybrid query execution"	rdfs:member	"hybrid query"
s17.2	"hybrid query execution"	rdfs:subClassOf	"execution"
s17.2	"query execution"	rdfs:subClassOf	"execution"
s17.2	"query execution"	rdfs:member	"query"
s17.2	"hybrid query execution"	rdfs:subClassOf	"query execution"
s17.2	"that hybrid query execution can improve freshness vs fully cached results while reducing the time"	rdf:predicate	"improve"
s17.2	"that hybrid query execution can improve freshness vs fully cached results while reducing the time"	rdf:object	"freshness v fully cache result"
s17.2	"freshness v fully cache result"	rdfs:member	"freshness v"
s17.2	"freshness v fully cache result"	rdfs:member	"result"
s17.2	"freshness v"	rdfs:member	"freshness"
s17.2	"freshness v"	rdfs:subClassOf	"v"
s17.2	"cache result"	rdfs:subClassOf	"result"
s17.2	"fully cache"	rdfs:subClassOf	"cache"
s17.2	"that hybrid query execution can improve freshness vs fully cached results while reducing the time"	local:AM-MOD	"can"
s17.2	"that hybrid query execution can improve freshness vs fully cached results while reducing the time"	local:AM-TMP	"reduce the time"
s17.1	"we results show that hybrid query execution can improve freshness vs fully cached results while reducing the time"
s17.1	"we results show that hybrid query execution can improve freshness vs fully cached results while reducing the time"	rdf:subject	"result"
s17.1	"we results show that hybrid query execution can improve freshness vs fully cached results while reducing the time"	rdf:predicate	"show"
s17.1	"we results show that hybrid query execution can improve freshness vs fully cached results while reducing the time"	rdf:object	"hybrid query execution can improve freshness v fully cache result while reduce the time"
s17.1	"hybrid query execution can improve freshness v fully cache result while reduce the time"	rdfs:member	"freshness v"
s17.1	"hybrid query execution can improve freshness v fully cache result while reduce the time"	rdfs:member	"execution"
s17.1	"hybrid query execution can improve freshness v fully cache result while reduce the time"	rdfs:member	"time"
s17.1	"hybrid query execution can improve freshness v fully cache result while reduce the time"	rdfs:member	"result"
s17.1	"freshness v"	rdfs:member	"freshness"
s17.1	"freshness v"	rdfs:subClassOf	"v"
s17.1	"cache result"	rdfs:subClassOf	"result"
s17.1	"fully cache"	rdfs:subClassOf	"cache"
s17.1	"freshness cache result"	rdfs:subClassOf	"cache result"
s17.1	"can improve"	rdfs:subClassOf	"improve"
s17.1	"query execution"	rdfs:subClassOf	"execution"
s17.1	"hybrid query execution"	rdfs:subClassOf	"query execution"
s17	"we results show that hybrid query execution can improve freshness vs fully cached results while reducing the time"
s17	"we results show that hybrid query execution can improve freshness vs fully cached results while reducing the time"	rdf:subject	"we"
s17	"we results show that hybrid query execution can improve freshness vs fully cached results while reducing the time"	rdf:predicate	"result"
s17	"we results show that hybrid query execution can improve freshness vs fully cached results while reducing the time"	rdf:object	"show that hybrid query execution can improve freshness v fully cache result while reduce the time"
s17	"show that hybrid query execution can improve freshness v fully cache result while reduce the time"	rdfs:member	"time"
s17	"show that hybrid query execution can improve freshness v fully cache result while reduce the time"	rdfs:member	"result"
s17	"show that hybrid query execution can improve freshness v fully cache result while reduce the time"	rdfs:member	"freshness v"
s17	"show that hybrid query execution can improve freshness v fully cache result while reduce the time"	rdfs:member	"execution"
s17	"show that hybrid query execution can improve freshness v fully cache result while reduce the time"	rdfs:member	"show"
s17	"freshness v"	rdfs:member	"freshness"
s17	"freshness v"	rdfs:subClassOf	"v"
s17	"cache result"	rdfs:subClassOf	"result"
s17	"fully cache"	rdfs:subClassOf	"cache"
s17	"freshness cache result"	rdfs:subClassOf	"cache result"
s17	"can improve"	rdfs:subClassOf	"improve"
s17	"query execution"	rdfs:subClassOf	"execution"
s17	"hybrid query execution"	rdfs:subClassOf	"query execution"
s16.1	"the time taken vs fully live execution"
s16.1	"the time taken vs fully live execution"	rdf:subject	"execution"
s16.1	"the time taken vs fully live execution"	rdf:predicate	"live"
s16.1	"the time taken vs fully live execution"	local:AM-TMP	"time take v fully"
s16.1	"time take v fully"	rdfs:member	"time"
s16.1	"time take v fully"	rdfs:member	"v"
s16.1	"fully v"	rdfs:subClassOf	"v"
s16	"the time taken"
s16	"the time taken"	rdf:subject	"time"
s16	"the time taken"	rdf:predicate	"take"
s15	"finally we evaluate different hybrid query plans"
s15	"finally we evaluate different hybrid query plans"	rdf:subject	"we"
s15	"finally we evaluate different hybrid query plans"	rdf:predicate	"evaluate"
s15	"finally we evaluate different hybrid query plans"	rdf:object	"different hybrid query plan"
s15	"different hybrid query"	rdfs:subClassOf	"query"
s15	"hybrid query"	rdfs:member	"hybrid"
s15	"hybrid query"	rdfs:subClassOf	"query"
s15	"different hybrid query plan"	rdfs:subClassOf	"plan"
s15	"different hybrid query"	rdfs:member	"different hybrid"
s15	"different hybrid"	rdfs:subClassOf	"hybrid"
s15	"query plan"	rdfs:member	"query"
s15	"hybrid query plan"	rdfs:member	"hybrid query"
s15	"query plan"	rdfs:subClassOf	"plan"
s15	"hybrid query plan"	rdfs:subClassOf	"plan"
s15	"different hybrid query plan"	rdfs:member	"different hybrid query"
s15	"different hybrid"	rdfs:member	"different"
s15	"hybrid query plan"	rdfs:subClassOf	"query plan"
s15	"different hybrid query plan"	rdfs:subClassOf	"hybrid query plan"
s15	"finally we evaluate different hybrid query plans"	local:AM-TMP	"finally"
s14	"we evaluate split positions in a realworld setup"
s14	"we evaluate split positions in a realworld setup"	rdf:subject	"we"
s14	"we evaluate split positions in a realworld setup"	rdf:predicate	"evaluate"
s14	"we evaluate split positions in a realworld setup"	rdf:object	"split position"
s14	"split position"	rdfs:member	"split"
s14	"split position"	rdfs:subClassOf	"position"
s14	"we evaluate split positions in a realworld setup"	local:AM-LOC	"realworld setup"
s14	"realworld setup"	rdfs:subClassOf	"setup"
s14	"realworld setup"	rdfs:member	"realworld"
s13.2	"we split a query into a subquery"
s13.2	"we split a query into a subquery"	rdf:subject	"we"
s13.2	"we split a query into a subquery"	rdf:predicate	"split"
s13.2	"we split a query into a subquery"	rdf:object	"query subquery"
s13.2	"query subquery"	rdfs:subClassOf	"subquery"
s13.2	"query subquery"	rdfs:member	"query"
s13.1	"we using coherence estimates to split a query into a subquery"
s13.1	"we using coherence estimates to split a query into a subquery"	rdf:subject	"we"
s13.1	"we using coherence estimates to split a query into a subquery"	rdf:predicate	"use"
s13.1	"we using coherence estimates to split a query into a subquery"	rdf:object	"coherence estimate to split a query into a subquery"
s13.1	"coherence estimate to split a query into a subquery"	rdfs:member	"coherence estimate"
s13.1	"coherence estimate to split a query into a subquery"	rdfs:member	"subquery"
s13.1	"coherence estimate to split a query into a subquery"	rdfs:member	"query"
s13.1	"coherence estimate"	rdfs:subClassOf	"estimate"
s13.1	"coherence estimate"	rdfs:member	"coherence"
s13.1	"split into subquery"	rdfs:member	"split"
s13.1	"split into subquery"	rdfs:member	"subquery"
s13	"we thus propose using coherence estimates to split a query into a subquery"
s13	"we thus propose using coherence estimates to split a query into a subquery"	rdf:subject	"we"
s13	"we thus propose using coherence estimates to split a query into a subquery"	rdf:predicate	"propose"
s13	"we thus propose using coherence estimates to split a query into a subquery"	rdf:object	"use coherence estimate to split a query into a subquery"
s13	"use coherence estimate to split a query into a subquery"	rdfs:member	"use coherence estimate"
s13	"use coherence estimate to split a query into a subquery"	rdfs:member	"subquery"
s13	"use coherence estimate to split a query into a subquery"	rdfs:member	"query"
s13	"coherence estimate"	rdfs:member	"coherence"
s13	"use coherence estimate"	rdfs:subClassOf	"estimate"
s13	"use coherence estimate"	rdfs:member	"use coherence"
s13	"coherence estimate"	rdfs:subClassOf	"estimate"
s13	"use coherence"	rdfs:subClassOf	"coherence"
s13	"use coherence"	rdfs:member	"use"
s13	"use coherence estimate"	rdfs:subClassOf	"coherence estimate"
s13	"split into subquery"	rdfs:member	"split"
s13	"split into subquery"	rdfs:member	"subquery"
s13	"we thus propose using coherence estimates to split a query into a subquery"	local:AM-DIS	"thus"
s12	"a subquery for which the have good fresh coverage"
s12	"a subquery for which the have good fresh coverage"	rdf:subject	"subquery for which the"
s12	"subquery for which"	rdfs:member	"subquery"
s12	"subquery for which"	rdfs:member	"which"
s12	"a subquery for which the have good fresh coverage"	rdf:predicate	"have"
s12	"a subquery for which the have good fresh coverage"	rdf:object	"good fresh coverage"
s12	"good fresh coverage"	rdfs:subClassOf	"coverage"
s12	"fresh coverage"	rdfs:member	"fresh"
s12	"fresh coverage"	rdfs:subClassOf	"coverage"
s12	"good fresh"	rdfs:subClassOf	"fresh"
s12	"good fresh"	rdfs:member	"good"
s12	"good fresh coverage"	rdfs:member	"good fresh"
s12	"good fresh coverage"	rdfs:subClassOf	"fresh coverage"
s10.2	"we split a query into a subquery"
s10.2	"we split a query into a subquery"	rdf:subject	"we"
s10.2	"we split a query into a subquery"	rdf:predicate	"split"
s10.2	"we split a query into a subquery"	rdf:object	"query subquery"
s10.2	"query subquery"	rdfs:subClassOf	"subquery"
s10.2	"query subquery"	rdfs:member	"query"
s10.1	"we using coherence estimates to split a query into a subquery"
s10.1	"we using coherence estimates to split a query into a subquery"	rdf:subject	"we"
s10.1	"we using coherence estimates to split a query into a subquery"	rdf:predicate	"use"
s10.1	"we using coherence estimates to split a query into a subquery"	rdf:object	"coherence estimate to split a query into a subquery"
s10.1	"coherence estimate to split a query into a subquery"	rdfs:member	"coherence estimate"
s10.1	"coherence estimate to split a query into a subquery"	rdfs:member	"subquery"
s10.1	"coherence estimate to split a query into a subquery"	rdfs:member	"query"
s10.1	"coherence estimate"	rdfs:subClassOf	"estimate"
s10.1	"coherence estimate"	rdfs:member	"coherence"
s10.1	"split into subquery"	rdfs:member	"split"
s10.1	"split into subquery"	rdfs:member	"subquery"
s10	"we thus propose using coherence estimates to split a query into a subquery"
s10	"we thus propose using coherence estimates to split a query into a subquery"	rdf:subject	"we"
s10	"we thus propose using coherence estimates to split a query into a subquery"	rdf:predicate	"propose"
s10	"we thus propose using coherence estimates to split a query into a subquery"	rdf:object	"use coherence estimate to split a query into a subquery"
s10	"use coherence estimate to split a query into a subquery"	rdfs:member	"use coherence estimate"
s10	"use coherence estimate to split a query into a subquery"	rdfs:member	"subquery"
s10	"use coherence estimate to split a query into a subquery"	rdfs:member	"query"
s10	"coherence estimate"	rdfs:member	"coherence"
s10	"use coherence estimate"	rdfs:subClassOf	"estimate"
s10	"use coherence estimate"	rdfs:member	"use coherence"
s10	"coherence estimate"	rdfs:subClassOf	"estimate"
s10	"use coherence"	rdfs:subClassOf	"coherence"
s10	"use coherence"	rdfs:member	"use"
s10	"use coherence estimate"	rdfs:subClassOf	"coherence estimate"
s10	"split into subquery"	rdfs:member	"split"
s10	"split into subquery"	rdfs:member	"subquery"
s10	"we thus propose using coherence estimates to split a query into a subquery"	local:AM-DIS	"thus"
s9	"a subquery that should instead run"
s9	"a subquery that should instead run"	rdf:subject	"subquery"
s9	"a subquery that should instead run"	rdf:predicate	"run"
s9	"a subquery that should instead run"	local:AM-DIS	"instead"
s9	"a subquery that should instead run"	local:AM-MOD	"should"
s8.2	"they cache cache results"
s8.2	"they cache cache results"	rdf:subject	"they"
s8.2	"they cache cache results"	rdf:predicate	"cache"
s8.2	"they cache cache results"	rdf:object	"cache result"
s8.2	"cache result"	rdfs:subClassOf	"result"
s8.2	"cache result"	rdfs:member	"cache"
s8.1	"linked data sources"
s8.1	"linked data sources"	rdf:subject	"data source"
s8.1	"data source"	rdfs:member	"data"
s8.1	"data source"	rdfs:subClassOf	"source"
s8.1	"linked data sources"	rdf:predicate	"link"
s8.1	"linked data sources"	rdf:object	"data source"
s8.1	"data source"	rdfs:member	"data"
s8.1	"data source"	rdfs:subClassOf	"source"
s8	"we first compare results from two public sparql stores against current versions of the linked data sources two public sparql stores against current versions of the linked data sources they cache cache results are outofdate"
s8	"we first compare results from two public sparql stores against current versions of the linked data sources two public sparql stores against current versions of the linked data sources they cache cache results are outofdate"	rdf:subject	"we"
s8	"we first compare results from two public sparql stores against current versions of the linked data sources two public sparql stores against current versions of the linked data sources they cache cache results are outofdate"	rdf:predicate	"compare"
s8	"we first compare results from two public sparql stores against current versions of the linked data sources two public sparql stores against current versions of the linked data sources they cache cache results are outofdate"	rdf:object	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be outofdate"
s8	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be outofdate"	rdfs:member	"current version"
s8	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be outofdate"	rdfs:member	"cache result"
s8	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be outofdate"	rdfs:member	"link data source"
s8	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be outofdate"	rdfs:member	"store"
s8	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be outofdate"	rdfs:member	"result"
s8	"data source"	rdfs:subClassOf	"source"
s8	"link data source"	rdfs:subClassOf	"source"
s8	"cache result"	rdfs:subClassOf	"result"
s8	"link data source"	rdfs:member	"link data"
s8	"data source"	rdfs:member	"data"
s8	"cache result"	rdfs:member	"cache"
s8	"current version"	rdfs:member	"current"
s8	"current version"	rdfs:subClassOf	"version"
s8	"link data"	rdfs:member	"link"
s8	"link data"	rdfs:subClassOf	"data"
s8	"cache cache"	rdfs:subClassOf	"cache"
s8	"link data source"	rdfs:subClassOf	"data source"
s8	"sparql store"	rdfs:subClassOf	"store"
s8	"public sparql store"	rdfs:subClassOf	"sparql store"
s8	"two public sparql store"	rdfs:subClassOf	"public sparql store"
s8	"link data source"	rdfs:subClassOf	"data source"
s8	"sparql store"	rdfs:subClassOf	"store"
s8	"public sparql store"	rdfs:subClassOf	"sparql store"
s8	"two public sparql store"	rdfs:subClassOf	"public sparql store"
s8	"result from two public sparql store"	rdfs:member	"result"
s8	"result from two public sparql store"	rdfs:member	"two public sparql store"
s8	"two public sparql store against current version"	rdfs:member	"two public sparql store"
s8	"two public sparql store against current version"	rdfs:member	"current version"
s8	"current version of link data source"	rdfs:member	"current version"
s8	"current version of link data source"	rdfs:member	"link data source"
s8	"two public sparql store against current version"	rdfs:member	"two public sparql store"
s8	"two public sparql store against current version"	rdfs:member	"current version"
s8	"current version of link data source"	rdfs:member	"current version"
s8	"current version of link data source"	rdfs:member	"link data source"
s8	"we first compare results from two public sparql stores against current versions of the linked data sources two public sparql stores against current versions of the linked data sources they cache cache results are outofdate"	local:AM-TMP	"first"
s7.3	"two public sparql stores against current versions of the linked data sources they cache cache results often"
s7.3	"two public sparql stores against current versions of the linked data sources they cache cache results often"	rdf:subject	"two public sparql store against current version of the link data source they cache cache result"
s7.3	"two public sparql store against current version of the link data source they cache cache result"	rdfs:member	"current version"
s7.3	"two public sparql store against current version of the link data source they cache cache result"	rdfs:member	"cache result"
s7.3	"two public sparql store against current version of the link data source they cache cache result"	rdfs:member	"store"
s7.3	"two public sparql store against current version of the link data source they cache cache result"	rdfs:member	"link data source"
s7.3	"data source"	rdfs:subClassOf	"source"
s7.3	"link data source"	rdfs:subClassOf	"source"
s7.3	"cache result"	rdfs:subClassOf	"result"
s7.3	"link data source"	rdfs:member	"link data"
s7.3	"data source"	rdfs:member	"data"
s7.3	"cache result"	rdfs:member	"cache"
s7.3	"current version"	rdfs:member	"current"
s7.3	"current version"	rdfs:subClassOf	"version"
s7.3	"link data"	rdfs:member	"link"
s7.3	"link data"	rdfs:subClassOf	"data"
s7.3	"cache cache"	rdfs:subClassOf	"cache"
s7.3	"link data source"	rdfs:subClassOf	"data source"
s7.3	"sparql store"	rdfs:subClassOf	"store"
s7.3	"public sparql store"	rdfs:subClassOf	"sparql store"
s7.3	"two public sparql store"	rdfs:subClassOf	"public sparql store"
s7.3	"two public sparql store against current version"	rdfs:member	"two public sparql store"
s7.3	"two public sparql store against current version"	rdfs:member	"current version"
s7.3	"current version of link data source"	rdfs:member	"current version"
s7.3	"current version of link data source"	rdfs:member	"link data source"
s7.3	"two public sparql stores against current versions of the linked data sources they cache cache results often"	rdf:predicate	"miss"
s7.3	"two public sparql stores against current versions of the linked data sources they cache cache results often"	local:AM-TMP	"often"
s7.2	"they cache cache results"
s7.2	"they cache cache results"	rdf:subject	"they"
s7.2	"they cache cache results"	rdf:predicate	"cache"
s7.2	"they cache cache results"	rdf:object	"cache result"
s7.2	"cache result"	rdfs:subClassOf	"result"
s7.2	"cache result"	rdfs:member	"cache"
s7.1	"linked data sources"
s7.1	"linked data sources"	rdf:subject	"data source"
s7.1	"data source"	rdfs:member	"data"
s7.1	"data source"	rdfs:subClassOf	"source"
s7.1	"linked data sources"	rdf:predicate	"link"
s7.1	"linked data sources"	rdf:object	"data source"
s7.1	"data source"	rdfs:member	"data"
s7.1	"data source"	rdfs:subClassOf	"source"
s7	"we first compare results from two public sparql stores against current versions of the linked data sources two public sparql stores against current versions of the linked data sources they cache cache results are often missing"
s7	"we first compare results from two public sparql stores against current versions of the linked data sources two public sparql stores against current versions of the linked data sources they cache cache results are often missing"	rdf:subject	"we"
s7	"we first compare results from two public sparql stores against current versions of the linked data sources two public sparql stores against current versions of the linked data sources they cache cache results are often missing"	rdf:predicate	"compare"
s7	"we first compare results from two public sparql stores against current versions of the linked data sources two public sparql stores against current versions of the linked data sources they cache cache results are often missing"	rdf:object	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be often miss"
s7	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be often miss"	rdfs:member	"current version"
s7	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be often miss"	rdfs:member	"cache result"
s7	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be often miss"	rdfs:member	"link data source"
s7	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be often miss"	rdfs:member	"store"
s7	"result from two public sparql store against current version of the link data source two public sparql store against current version of the link data source they cache cache result be often miss"	rdfs:member	"result"
s7	"data source"	rdfs:subClassOf	"source"
s7	"link data source"	rdfs:subClassOf	"source"
s7	"cache result"	rdfs:subClassOf	"result"
s7	"link data source"	rdfs:member	"link data"
s7	"data source"	rdfs:member	"data"
s7	"cache result"	rdfs:member	"cache"
s7	"current version"	rdfs:member	"current"
s7	"current version"	rdfs:subClassOf	"version"
s7	"link data"	rdfs:member	"link"
s7	"link data"	rdfs:subClassOf	"data"
s7	"often miss"	rdfs:subClassOf	"miss"
s7	"cache cache"	rdfs:subClassOf	"cache"
s7	"link data source"	rdfs:subClassOf	"data source"
s7	"sparql store"	rdfs:subClassOf	"store"
s7	"public sparql store"	rdfs:subClassOf	"sparql store"
s7	"two public sparql store"	rdfs:subClassOf	"public sparql store"
s7	"link data source"	rdfs:subClassOf	"data source"
s7	"sparql store"	rdfs:subClassOf	"store"
s7	"public sparql store"	rdfs:subClassOf	"sparql store"
s7	"two public sparql store"	rdfs:subClassOf	"public sparql store"
s7	"result from two public sparql store"	rdfs:member	"result"
s7	"result from two public sparql store"	rdfs:member	"two public sparql store"
s7	"two public sparql store against current version"	rdfs:member	"two public sparql store"
s7	"two public sparql store against current version"	rdfs:member	"current version"
s7	"current version of link data source"	rdfs:member	"current version"
s7	"current version of link data source"	rdfs:member	"link data source"
s7	"two public sparql store against current version"	rdfs:member	"two public sparql store"
s7	"two public sparql store against current version"	rdfs:member	"current version"
s7	"current version of link data source"	rdfs:member	"current version"
s7	"current version of link data source"	rdfs:member	"link data source"
s7	"we first compare results from two public sparql stores against current versions of the linked data sources two public sparql stores against current versions of the linked data sources they cache cache results are often missing"	local:AM-TMP	"first"
s6.1	"we speeding up results"
s6.1	"we speeding up results"	rdf:subject	"we"
s6.1	"we speeding up results"	rdf:predicate	"speed"
s6.1	"we speeding up results"	rdf:object	"result"
s6	"herein we propose a hybrid query execution approach while speeding up results vs the live scenario"
s6	"herein we propose a hybrid query execution approach while speeding up results vs the live scenario"	rdf:subject	"we"
s6	"herein we propose a hybrid query execution approach while speeding up results vs the live scenario"	rdf:predicate	"propose"
s6	"herein we propose a hybrid query execution approach while speeding up results vs the live scenario"	rdf:object	"hybrid query execution approach"
s6	"execution approach"	rdfs:subClassOf	"approach"
s6	"hybrid query"	rdfs:member	"hybrid"
s6	"hybrid query"	rdfs:subClassOf	"query"
s6	"hybrid query execution"	rdfs:member	"hybrid query"
s6	"hybrid query execution approach"	rdfs:subClassOf	"approach"
s6	"query execution approach"	rdfs:subClassOf	"approach"
s6	"query execution approach"	rdfs:member	"query execution"
s6	"hybrid query execution"	rdfs:subClassOf	"execution"
s6	"query execution"	rdfs:subClassOf	"execution"
s6	"hybrid query execution approach"	rdfs:member	"hybrid query execution"
s6	"query execution"	rdfs:member	"query"
s6	"execution approach"	rdfs:member	"execution"
s6	"query execution approach"	rdfs:subClassOf	"execution approach"
s6	"hybrid query execution approach"	rdfs:subClassOf	"query execution approach"
s6	"herein we propose a hybrid query execution approach while speeding up results vs the live scenario"	local:AM-TMP	"herein"
s6	"herein we propose a hybrid query execution approach while speeding up results vs the live scenario"	local:AM-TMP	"speed up result v the live scenario"
s6	"speed up result v the live scenario"	rdfs:member	"up result"
s6	"speed up result v the live scenario"	rdfs:member	"live scenario"
s6	"speed up result v the live scenario"	rdfs:member	"speed"
s6	"live scenario"	rdfs:subClassOf	"scenario"
s6	"up result"	rdfs:member	"up"
s6	"up result"	rdfs:subClassOf	"result"
s6	"live scenario"	rdfs:member	"live"
s5	"a hybrid query execution approach that returns fresher results from a broader range of sources vs the centralised scenario"
s5	"a hybrid query execution approach that returns fresher results from a broader range of sources vs the centralised scenario"	rdf:subject	"hybrid query execution approach"
s5	"execution approach"	rdfs:subClassOf	"approach"
s5	"hybrid query"	rdfs:member	"hybrid"
s5	"hybrid query"	rdfs:subClassOf	"query"
s5	"hybrid query execution"	rdfs:member	"hybrid query"
s5	"hybrid query execution approach"	rdfs:subClassOf	"approach"
s5	"query execution approach"	rdfs:subClassOf	"approach"
s5	"query execution approach"	rdfs:member	"query execution"
s5	"hybrid query execution"	rdfs:subClassOf	"execution"
s5	"query execution"	rdfs:subClassOf	"execution"
s5	"hybrid query execution approach"	rdfs:member	"hybrid query execution"
s5	"query execution"	rdfs:member	"query"
s5	"execution approach"	rdfs:member	"execution"
s5	"query execution approach"	rdfs:subClassOf	"execution approach"
s5	"hybrid query execution approach"	rdfs:subClassOf	"query execution approach"
s5	"a hybrid query execution approach that returns fresher results from a broader range of sources vs the centralised scenario"	rdf:predicate	"return"
s5	"a hybrid query execution approach that returns fresher results from a broader range of sources vs the centralised scenario"	rdf:object	"fresher result broader range of source v the centralise scenario"
s5	"fresher result broader range of source v the centralise scenario"	rdfs:member	"centralise scenario"
s5	"fresher result broader range of source v the centralise scenario"	rdfs:member	"source"
s5	"fresher result broader range of source v the centralise scenario"	rdfs:member	"fresher result"
s5	"fresher result broader range of source v the centralise scenario"	rdfs:member	"broader range"
s5	"centralise scenario"	rdfs:subClassOf	"scenario"
s5	"fresher result"	rdfs:member	"fresher"
s5	"broader range"	rdfs:subClassOf	"range"
s5	"broader range"	rdfs:member	"broader"
s5	"centralise scenario"	rdfs:member	"centralise"
s5	"fresher result"	rdfs:subClassOf	"result"
s5	"broader range of source"	rdfs:member	"broader range"
s5	"broader range of source"	rdfs:member	"source"
s5	"broader range of source v"	rdfs:member	"broader range of source"
s5	"broader range of source v"	rdfs:member	"v"
s4	"linked data query engines"
s4	"linked data query engines"	rdf:subject	"data query engine"
s4	"data query"	rdfs:member	"data"
s4	"data query"	rdfs:subClassOf	"query"
s4	"data query engine"	rdfs:subClassOf	"engine"
s4	"query engine"	rdfs:member	"query"
s4	"query engine"	rdfs:subClassOf	"engine"
s4	"data query engine"	rdfs:member	"data query"
s4	"data query engine"	rdfs:subClassOf	"query engine"
s4	"linked data query engines"	rdf:predicate	"link"
s3	"centralised approaches that can efficiently live decentralised approaches"
s3	"centralised approaches that can efficiently live decentralised approaches"	rdf:subject	"centralise approach"
s3	"centralise approach"	rdfs:subClassOf	"approach"
s3	"centralise approach"	rdfs:member	"centralise"
s3	"centralised approaches that can efficiently live decentralised approaches"	rdf:predicate	"live"
s3	"centralised approaches that can efficiently live decentralised approaches"	rdf:object	"decentralise approach"
s3	"decentralise approach"	rdfs:subClassOf	"approach"
s3	"decentralise approach"	rdfs:member	"decentralise"
s3	"centralised approaches that can efficiently live decentralised approaches"	local:AM-MNR	"efficiently"
s3	"centralised approaches that can efficiently live decentralised approaches"	local:AM-MOD	"can"
s2	"data cached from parts of the web"
s2	"data cached from parts of the web"	rdf:subject	"data"
s2	"data cached from parts of the web"	rdf:predicate	"cache"
s2	"data cached from parts of the web"	rdf:object	"part of the web"
s2	"part of the web"	rdfs:member	"part"
s2	"part of the web"	rdfs:member	"web"
s2	"part of web"	rdfs:member	"part"
s2	"part of web"	rdfs:member	"web"
s1	"centralised approaches that can efficiently answer queries over data"
s1	"centralised approaches that can efficiently answer queries over data"	rdf:subject	"centralise approach"
s1	"centralise approach"	rdfs:subClassOf	"approach"
s1	"centralise approach"	rdfs:member	"centralise"
s1	"centralised approaches that can efficiently answer queries over data"	rdf:predicate	"answer"
s1	"centralised approaches that can efficiently answer queries over data"	rdf:object	"query over data"
s1	"query over data"	rdfs:member	"data"
s1	"query over data"	rdfs:member	"query"
s1	"query over data"	rdfs:member	"query"
s1	"query over data"	rdfs:member	"data"
s1	"centralised approaches that can efficiently answer queries over data"	local:AM-MNR	"efficiently"
s1	"centralised approaches that can efficiently answer queries over data"	local:AM-MOD	"can"
s0	"decentralised approaches that can provide fresher results over the entire web at the cost of slower response times"
s0	"decentralised approaches that can provide fresher results over the entire web at the cost of slower response times"	rdf:subject	"decentralise approach"
s0	"decentralise approach"	rdfs:subClassOf	"approach"
s0	"decentralise approach"	rdfs:member	"decentralise"
s0	"decentralised approaches that can provide fresher results over the entire web at the cost of slower response times"	rdf:predicate	"provide"
s0	"decentralised approaches that can provide fresher results over the entire web at the cost of slower response times"	rdf:object	"fresher result over the entire web cost of slower response time"
s0	"fresher result over the entire web cost of slower response time"	rdfs:member	"fresher result"
s0	"fresher result over the entire web cost of slower response time"	rdfs:member	"entire web cost"
s0	"fresher result over the entire web cost of slower response time"	rdfs:member	"slower response time"
s0	"web cost"	rdfs:subClassOf	"cost"
s0	"entire web cost"	rdfs:member	"entire web"
s0	"slower response time"	rdfs:member	"slower response"
s0	"fresher result"	rdfs:member	"fresher"
s0	"slower response"	rdfs:member	"slower"
s0	"response time"	rdfs:member	"response"
s0	"entire web"	rdfs:member	"entire"
s0	"response time"	rdfs:subClassOf	"time"
s0	"entire web"	rdfs:subClassOf	"web"
s0	"slower response time"	rdfs:subClassOf	"time"
s0	"entire web cost"	rdfs:subClassOf	"cost"
s0	"fresher result"	rdfs:subClassOf	"result"
s0	"web cost"	rdfs:member	"web"
s0	"slower response"	rdfs:subClassOf	"response"
s0	"slower response time"	rdfs:subClassOf	"response time"
s0	"entire web cost"	rdfs:subClassOf	"web cost"
s0	"fresher result over entire web cost"	rdfs:member	"fresher result"
s0	"fresher result over entire web cost"	rdfs:member	"entire web cost"
s0	"entire web cost of slower response time"	rdfs:member	"entire web cost"
s0	"entire web cost of slower response time"	rdfs:member	"slower response time"
s0	"decentralised approaches that can provide fresher results over the entire web at the cost of slower response times"	local:AM-MOD	"can"
