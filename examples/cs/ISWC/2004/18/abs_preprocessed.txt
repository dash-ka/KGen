as ontology development becomes a collaborative process developers face the problem of maintaining versions of ontologies akin to maintaining versions of software code
as ontology development becomes a collaborative process developers face the problem of maintaining versions of ontologies akin to maintaining versions of documents in large projects
traditional versioning systems enable users to examine changes
traditional versioning systems enable users to accept changes
traditional versioning systems enable users to compare versions
traditional versioning systems enable users to reject changes
however while versioning systems usually treat software code as text files a versioning system for ontologies must changes in text representation of ontologies
however while versioning systems usually treat software code as text files a versioning system for ontologies must compare
however while versioning systems usually treat text documents as text files a versioning system for ontologies must changes in text representation of ontologies
however while versioning systems usually treat text documents as text files a versioning system for ontologies must present structural changes in text representation of ontologies
however while versioning systems usually treat text documents as text files a versioning system for ontologies must compare
however while versioning systems usually treat software code as text files a versioning system for ontologies must present structural changes in text representation of ontologies
the promptdiff ontologyversioning environment which address these challenges
in this paper we present the promptdiff ontologyversioning environment
promptdiff includes an efficient versioncomparison algorithm
an efficient versioncomparison algorithm that produces a structural diff between ontologies
the changes that enables users to view concepts of concepts
the results are presented to the users through an intuitive user interface for analyzing the changes
concepts that were added deleted
direct access to additional information characterizing the change
the changes that enables users to view groups of concepts
an intuitive user interface for analyzing the changes distinguished by users appearance
the results are presented to the users with direct access to additional information
the changes that moved
the users can then act on the changes accepting users
the users can then act on the changes rejecting users
a pilot user study that demonstrate the effectiveness of the tool for change management
we present results of a pilot user study
position ontology versioning as a component in a general ontologymanagement framework
we discuss design principles for an endtoend ontologyversioning environment
an endtoend ontologyversioning environment versioning as a component in a general ontologymanagement framework
we discuss design principles for position ontology