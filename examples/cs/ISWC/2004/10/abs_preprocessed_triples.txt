s11.3	"our algorithm scale easily to large numbers of peers"
s11.3	"our algorithm scale easily to large numbers of peers"	rdf:subject	"algorithm"
s11.3	"our algorithm scale easily to large numbers of peers"	rdf:predicate	"scale"
s11.3	"our algorithm scale easily to large numbers of peers"	rdf:object	"large number of peer"
s11.3	"large number of peer"	rdfs:member	"large number"
s11.3	"large number of peer"	rdfs:member	"peer"
s11.3	"large number"	rdfs:subClassOf	"number"
s11.3	"large number"	rdfs:member	"large"
s11.3	"large number of peer"	rdfs:member	"large number"
s11.3	"large number of peer"	rdfs:member	"peer"
s11.3	"our algorithm scale easily to large numbers of peers"	local:AM-MNR	"easily"
s11.2	"dynamically collected query statistics only no continuous index update processes are necessary allowing our algorithm to scale easily to large numbers of peers"
s11.2	"dynamically collected query statistics only no continuous index update processes are necessary allowing our algorithm to scale easily to large numbers of peers"	rdf:subject	"dynamically collect query statistic only no continuous index update process be necessary"
s11.2	"dynamically collect query statistic only no continuous index update process be necessary"	rdfs:member	"dynamically collect query"
s11.2	"dynamically collect query statistic only no continuous index update process be necessary"	rdfs:member	"update process"
s11.2	"dynamically collect query statistic only no continuous index update process be necessary"	rdfs:member	"only no continuous index"
s11.2	"dynamically collect query"	rdfs:subClassOf	"query"
s11.2	"dynamically collect"	rdfs:member	"dynamically"
s11.2	"only no continuous"	rdfs:subClassOf	"continuous"
s11.2	"no continuous"	rdfs:subClassOf	"continuous"
s11.2	"no continuous"	rdfs:member	"no"
s11.2	"update process"	rdfs:member	"update"
s11.2	"dynamically collect query"	rdfs:member	"dynamically collect"
s11.2	"continuous index"	rdfs:member	"continuous"
s11.2	"collect query"	rdfs:member	"collect"
s11.2	"only no continuous"	rdfs:member	"only no"
s11.2	"only no continuous index"	rdfs:subClassOf	"index"
s11.2	"only no"	rdfs:subClassOf	"no"
s11.2	"continuous index"	rdfs:subClassOf	"index"
s11.2	"only no"	rdfs:member	"only"
s11.2	"update process"	rdfs:subClassOf	"process"
s11.2	"dynamically collect"	rdfs:subClassOf	"collect"
s11.2	"only no continuous index"	rdfs:member	"only no continuous"
s11.2	"no continuous index"	rdfs:member	"no continuous"
s11.2	"no continuous index"	rdfs:subClassOf	"index"
s11.2	"collect query"	rdfs:subClassOf	"query"
s11.2	"index update process"	rdfs:subClassOf	"update process"
s11.2	"no continuous index"	rdfs:subClassOf	"continuous index"
s11.2	"only no continuous index"	rdfs:subClassOf	"no continuous index"
s11.2	"query statistic"	rdfs:subClassOf	"statistic"
s11.2	"dynamically collected query statistics only no continuous index update processes are necessary allowing our algorithm to scale easily to large numbers of peers"	rdf:predicate	"allow"
s11.2	"dynamically collected query statistics only no continuous index update processes are necessary allowing our algorithm to scale easily to large numbers of peers"	rdf:object	"algorithm to scale easily to large number of peer"
s11.2	"algorithm to scale easily to large number of peer"	rdfs:member	"large number"
s11.2	"algorithm to scale easily to large number of peer"	rdfs:member	"peer"
s11.2	"algorithm to scale easily to large number of peer"	rdfs:member	"algorithm"
s11.2	"large number"	rdfs:subClassOf	"number"
s11.2	"large number"	rdfs:member	"large"
s11.2	"easily large number"	rdfs:subClassOf	"large number"
s11.2	"algorithm to scale"	rdfs:member	"algorithm"
s11.2	"algorithm to scale"	rdfs:member	"scale"
s11.2	"algorithm to scale to easily large number"	rdfs:member	"algorithm to scale"
s11.2	"algorithm to scale to easily large number"	rdfs:member	"easily large number"
s11.2	"easily large number of peer"	rdfs:member	"easily large number"
s11.2	"easily large number of peer"	rdfs:member	"peer"
s11.1	"dynamically collected query statistics"
s11.1	"dynamically collected query statistics"	rdf:subject	"query statistic"
s11.1	"query statistic"	rdfs:subClassOf	"statistic"
s11.1	"query statistic"	rdfs:member	"query"
s11.1	"dynamically collected query statistics"	rdf:predicate	"collect"
s11.1	"dynamically collected query statistics"	local:AM-MNR	"dynamically"
s11	"our algorithm based on dynamically collected query statistics only no continuous index update processes are necessary allowing our algorithm to scale easily to large numbers of peers"
s11	"our algorithm based on dynamically collected query statistics only no continuous index update processes are necessary allowing our algorithm to scale easily to large numbers of peers"	rdf:subject	"algorithm"
s11	"our algorithm based on dynamically collected query statistics only no continuous index update processes are necessary allowing our algorithm to scale easily to large numbers of peers"	rdf:predicate	"base"
s11	"our algorithm based on dynamically collected query statistics only no continuous index update processes are necessary allowing our algorithm to scale easily to large numbers of peers"	rdf:object	"dynamically collect query statistic only no continuous index update process be necessary allow our algorithm to scale easily to large number of peer"
s11	"dynamically collect query statistic only no continuous index update process be necessary allow our algorithm to scale easily to large number of peer"	rdfs:member	"peer"
s11	"dynamically collect query statistic only no continuous index update process be necessary allow our algorithm to scale easily to large number of peer"	rdfs:member	"dynamically collect query"
s11	"dynamically collect query statistic only no continuous index update process be necessary allow our algorithm to scale easily to large number of peer"	rdfs:member	"update process"
s11	"dynamically collect query statistic only no continuous index update process be necessary allow our algorithm to scale easily to large number of peer"	rdfs:member	"only no continuous index"
s11	"dynamically collect query statistic only no continuous index update process be necessary allow our algorithm to scale easily to large number of peer"	rdfs:member	"large number"
s11	"dynamically collect query statistic only no continuous index update process be necessary allow our algorithm to scale easily to large number of peer"	rdfs:member	"algorithm"
s11	"dynamically collect query"	rdfs:subClassOf	"query"
s11	"dynamically collect"	rdfs:member	"dynamically"
s11	"only no continuous"	rdfs:subClassOf	"continuous"
s11	"no continuous"	rdfs:subClassOf	"continuous"
s11	"no continuous"	rdfs:member	"no"
s11	"update process"	rdfs:member	"update"
s11	"dynamically collect query"	rdfs:member	"dynamically collect"
s11	"large number"	rdfs:member	"large"
s11	"continuous index"	rdfs:member	"continuous"
s11	"collect query"	rdfs:member	"collect"
s11	"only no continuous"	rdfs:member	"only no"
s11	"only no continuous index"	rdfs:subClassOf	"index"
s11	"only no"	rdfs:subClassOf	"no"
s11	"continuous index"	rdfs:subClassOf	"index"
s11	"only no"	rdfs:member	"only"
s11	"large number"	rdfs:subClassOf	"number"
s11	"update process"	rdfs:subClassOf	"process"
s11	"dynamically collect"	rdfs:subClassOf	"collect"
s11	"only no continuous index"	rdfs:member	"only no continuous"
s11	"no continuous index"	rdfs:member	"no continuous"
s11	"no continuous index"	rdfs:subClassOf	"index"
s11	"collect query"	rdfs:subClassOf	"query"
s11	"easily scale"	rdfs:subClassOf	"scale"
s11	"our algorithm"	rdfs:subClassOf	"algorithm"
s11	"index update process"	rdfs:subClassOf	"update process"
s11	"no continuous index"	rdfs:subClassOf	"continuous index"
s11	"only no continuous index"	rdfs:subClassOf	"no continuous index"
s11	"query statistic"	rdfs:subClassOf	"statistic"
s11	"easily scale to large number"	rdfs:member	"easily scale"
s11	"easily scale to large number"	rdfs:member	"large number"
s11	"large number of peer"	rdfs:member	"large number"
s11	"large number of peer"	rdfs:member	"peer"
s10.1	"we propose a decentralized topk query evaluation algorithm for peertopeer networks"
s10.1	"we propose a decentralized topk query evaluation algorithm for peertopeer networks"	rdf:subject	"we"
s10.1	"we propose a decentralized topk query evaluation algorithm for peertopeer networks"	rdf:predicate	"propose"
s10.1	"we propose a decentralized topk query evaluation algorithm for peertopeer networks"	rdf:object	"decentralize topk query evaluation algorithm"
s10.1	"topk query evaluation algorithm"	rdfs:member	"topk query evaluation"
s10.1	"topk query"	rdfs:member	"topk"
s10.1	"query evaluation"	rdfs:subClassOf	"evaluation"
s10.1	"evaluation algorithm"	rdfs:member	"evaluation"
s10.1	"topk query evaluation"	rdfs:member	"topk query"
s10.1	"topk query evaluation algorithm"	rdfs:subClassOf	"algorithm"
s10.1	"topk query evaluation"	rdfs:subClassOf	"evaluation"
s10.1	"query evaluation algorithm"	rdfs:subClassOf	"algorithm"
s10.1	"query evaluation algorithm"	rdfs:member	"query evaluation"
s10.1	"query evaluation"	rdfs:member	"query"
s10.1	"topk query"	rdfs:subClassOf	"query"
s10.1	"evaluation algorithm"	rdfs:subClassOf	"algorithm"
s10.1	"query evaluation algorithm"	rdfs:subClassOf	"evaluation algorithm"
s10.1	"topk query evaluation algorithm"	rdfs:subClassOf	"query evaluation algorithm"
s10.1	"we propose a decentralized topk query evaluation algorithm for peertopeer networks"	local:AM-PNC	"peertopeer network"
s10.1	"peertopeer network"	rdfs:member	"peertopeer"
s10.1	"peertopeer network"	rdfs:subClassOf	"network"
s10	"inspired by the success of ranking algorithms in web search engine in databases we propose a decentralized topk query evaluation algorithm"
s10	"inspired by the success of ranking algorithms in web search engine in databases we propose a decentralized topk query evaluation algorithm"	rdf:subject	"success of rank algorithm in web search engine in database we propose a decentralize topk query evaluation algorithm"
s10	"success of rank algorithm in web search engine in database we propose a decentralize topk query evaluation algorithm"	rdfs:member	"decentralize topk query evaluation algorithm"
s10	"success of rank algorithm in web search engine in database we propose a decentralize topk query evaluation algorithm"	rdfs:member	"web search engine"
s10	"success of rank algorithm in web search engine in database we propose a decentralize topk query evaluation algorithm"	rdfs:member	"rank algorithm"
s10	"success of rank algorithm in web search engine in database we propose a decentralize topk query evaluation algorithm"	rdfs:member	"success"
s10	"success of rank algorithm in web search engine in database we propose a decentralize topk query evaluation algorithm"	rdfs:member	"database"
s10	"decentralize topk query"	rdfs:member	"decentralize topk"
s10	"query evaluation"	rdfs:subClassOf	"evaluation"
s10	"topk query evaluation algorithm"	rdfs:subClassOf	"algorithm"
s10	"decentralize topk query evaluation algorithm"	rdfs:member	"decentralize topk query evaluation"
s10	"topk query"	rdfs:subClassOf	"query"
s10	"topk query evaluation algorithm"	rdfs:member	"topk query evaluation"
s10	"topk query"	rdfs:member	"topk"
s10	"decentralize topk query evaluation"	rdfs:subClassOf	"evaluation"
s10	"web search"	rdfs:member	"web"
s10	"decentralize topk query evaluation algorithm"	rdfs:subClassOf	"algorithm"
s10	"query evaluation algorithm"	rdfs:member	"query evaluation"
s10	"query evaluation"	rdfs:member	"query"
s10	"search engine"	rdfs:member	"search"
s10	"decentralize topk"	rdfs:subClassOf	"topk"
s10	"evaluation algorithm"	rdfs:member	"evaluation"
s10	"decentralize topk query"	rdfs:subClassOf	"query"
s10	"topk query evaluation"	rdfs:subClassOf	"evaluation"
s10	"query evaluation algorithm"	rdfs:subClassOf	"algorithm"
s10	"web search engine"	rdfs:subClassOf	"engine"
s10	"web search engine"	rdfs:member	"web search"
s10	"search engine"	rdfs:subClassOf	"engine"
s10	"decentralize topk query evaluation"	rdfs:member	"decentralize topk query"
s10	"topk query evaluation"	rdfs:member	"topk query"
s10	"web search"	rdfs:subClassOf	"search"
s10	"rank algorithm"	rdfs:member	"rank"
s10	"decentralize topk"	rdfs:member	"decentralize"
s10	"rank algorithm"	rdfs:subClassOf	"algorithm"
s10	"evaluation algorithm"	rdfs:subClassOf	"algorithm"
s10	"query evaluation algorithm"	rdfs:subClassOf	"evaluation algorithm"
s10	"topk query evaluation algorithm"	rdfs:subClassOf	"query evaluation algorithm"
s10	"decentralize topk query evaluation algorithm"	rdfs:subClassOf	"topk query evaluation algorithm"
s10	"web search engine"	rdfs:subClassOf	"search engine"
s10	"success of rank algorithm"	rdfs:member	"success"
s10	"success of rank algorithm"	rdfs:member	"rank algorithm"
s10	"success of rank algorithm in web search engine"	rdfs:member	"success of rank algorithm"
s10	"success of rank algorithm in web search engine"	rdfs:member	"web search engine"
s10	"success of rank algorithm in web search engine in database"	rdfs:member	"success of rank algorithm in web search engine"
s10	"success of rank algorithm in web search engine in database"	rdfs:member	"database"
s10	"inspired by the success of ranking algorithms in web search engine in databases we propose a decentralized topk query evaluation algorithm"	rdf:predicate	"inspire"
s8	"both answer set network traffic among peers"
s8	"both answer set network traffic among peers"	rdf:subject	"answer"
s8	"both answer set network traffic among peers"	rdf:predicate	"set"
s8	"both answer set network traffic among peers"	rdf:object	"network traffic among peer"
s8	"network traffic among peer"	rdfs:member	"peer"
s8	"network traffic among peer"	rdfs:member	"network traffic"
s8	"network traffic"	rdfs:member	"network"
s8	"network traffic"	rdfs:subClassOf	"traffic"
s8	"network traffic among peer"	rdfs:member	"network traffic"
s8	"network traffic among peer"	rdfs:member	"peer"
s7	"peertopeer networks which minimizes both answer"
s7	"peertopeer networks which minimizes both answer"	rdf:subject	"peertopeer network"
s7	"peertopeer network"	rdfs:member	"peertopeer"
s7	"peertopeer network"	rdfs:subClassOf	"network"
s7	"peertopeer networks which minimizes both answer"	rdf:predicate	"minimize"
s7	"peertopeer networks which minimizes both answer"	rdf:object	"answer"
s6.2	"based on peer ranks"
s6.2	"based on peer ranks"	rdf:predicate	"base"
s6.2	"based on peer ranks"	local:AM-LOC	"peer rank"
s6.2	"peer rank"	rdfs:subClassOf	"rank"
s6.2	"peer rank"	rdfs:member	"peer"
s6.1	"peertopeer networks which makes use of local rankings rank optimized routing based on peer ranks"
s6.1	"peertopeer networks which makes use of local rankings rank optimized routing based on peer ranks"	rdf:subject	"peertopeer network which make use of local rank"
s6.1	"peertopeer network which make use of local rank"	rdfs:member	"use"
s6.1	"peertopeer network which make use of local rank"	rdfs:member	"peertopeer network"
s6.1	"peertopeer network which make use of local rank"	rdfs:member	"local rank"
s6.1	"local rank"	rdfs:member	"local"
s6.1	"peertopeer network"	rdfs:member	"peertopeer"
s6.1	"peertopeer network"	rdfs:subClassOf	"network"
s6.1	"local rank"	rdfs:subClassOf	"rank"
s6.1	"use of local rank"	rdfs:member	"use"
s6.1	"use of local rank"	rdfs:member	"local rank"
s6.1	"peertopeer networks which makes use of local rankings rank optimized routing based on peer ranks"	rdf:predicate	"rank"
s6.1	"peertopeer networks which makes use of local rankings rank optimized routing based on peer ranks"	rdf:object	"optimize rout base on peer rank"
s6.1	"optimize rout base on peer rank"	rdfs:member	"peer rank"
s6.1	"optimize rout base on peer rank"	rdfs:member	"rout base"
s6.1	"rout base"	rdfs:member	"rout"
s6.1	"peer rank"	rdfs:subClassOf	"rank"
s6.1	"rout base"	rdfs:subClassOf	"base"
s6.1	"peer rank"	rdfs:member	"peer"
s6.1	"optimize on peer rank"	rdfs:member	"optimize"
s6.1	"optimize on peer rank"	rdfs:member	"peer rank"
s6	"peertopeer networks which makes use of local rankings"
s6	"peertopeer networks which makes use of local rankings"	rdf:subject	"peertopeer network"
s6	"peertopeer network"	rdfs:member	"peertopeer"
s6	"peertopeer network"	rdfs:subClassOf	"network"
s6	"peertopeer networks which makes use of local rankings"	rdf:predicate	"make"
s6	"peertopeer networks which makes use of local rankings"	rdf:object	"use of local rank"
s6	"use of local rank"	rdfs:member	"use"
s6	"use of local rank"	rdfs:member	"local rank"
s6	"local rank"	rdfs:member	"local"
s6	"local rank"	rdfs:subClassOf	"rank"
s6	"use of local rank"	rdfs:member	"use"
s6	"use of local rank"	rdfs:member	"local rank"
s5.1	"we propose a decentralized topk query evaluation algorithm for peertopeer networks"
s5.1	"we propose a decentralized topk query evaluation algorithm for peertopeer networks"	rdf:subject	"we"
s5.1	"we propose a decentralized topk query evaluation algorithm for peertopeer networks"	rdf:predicate	"propose"
s5.1	"we propose a decentralized topk query evaluation algorithm for peertopeer networks"	rdf:object	"decentralize topk query evaluation algorithm"
s5.1	"topk query evaluation algorithm"	rdfs:member	"topk query evaluation"
s5.1	"topk query"	rdfs:member	"topk"
s5.1	"query evaluation"	rdfs:subClassOf	"evaluation"
s5.1	"evaluation algorithm"	rdfs:member	"evaluation"
s5.1	"topk query evaluation"	rdfs:member	"topk query"
s5.1	"topk query evaluation algorithm"	rdfs:subClassOf	"algorithm"
s5.1	"topk query evaluation"	rdfs:subClassOf	"evaluation"
s5.1	"query evaluation algorithm"	rdfs:subClassOf	"algorithm"
s5.1	"query evaluation algorithm"	rdfs:member	"query evaluation"
s5.1	"query evaluation"	rdfs:member	"query"
s5.1	"topk query"	rdfs:subClassOf	"query"
s5.1	"evaluation algorithm"	rdfs:subClassOf	"algorithm"
s5.1	"query evaluation algorithm"	rdfs:subClassOf	"evaluation algorithm"
s5.1	"topk query evaluation algorithm"	rdfs:subClassOf	"query evaluation algorithm"
s5.1	"we propose a decentralized topk query evaluation algorithm for peertopeer networks"	local:AM-PNC	"peertopeer network"
s5.1	"peertopeer network"	rdfs:member	"peertopeer"
s5.1	"peertopeer network"	rdfs:subClassOf	"network"
s5	"inspired by the success of ranking algorithms in topk query evaluation algorithms in databases we propose a decentralized topk query evaluation algorithm for peertopeer networks"
s5	"inspired by the success of ranking algorithms in topk query evaluation algorithms in databases we propose a decentralized topk query evaluation algorithm for peertopeer networks"	rdf:subject	"success of rank algorithm in topk query evaluation algorithm in database we propose a decentralize topk query evaluation algorithm for peertopeer network"
s5	"success of rank algorithm in topk query evaluation algorithm in database we propose a decentralize topk query evaluation algorithm for peertopeer network"	rdfs:member	"peertopeer network"
s5	"success of rank algorithm in topk query evaluation algorithm in database we propose a decentralize topk query evaluation algorithm for peertopeer network"	rdfs:member	"decentralize topk query evaluation algorithm"
s5	"success of rank algorithm in topk query evaluation algorithm in database we propose a decentralize topk query evaluation algorithm for peertopeer network"	rdfs:member	"rank algorithm"
s5	"success of rank algorithm in topk query evaluation algorithm in database we propose a decentralize topk query evaluation algorithm for peertopeer network"	rdfs:member	"topk query evaluation algorithm"
s5	"success of rank algorithm in topk query evaluation algorithm in database we propose a decentralize topk query evaluation algorithm for peertopeer network"	rdfs:member	"success"
s5	"success of rank algorithm in topk query evaluation algorithm in database we propose a decentralize topk query evaluation algorithm for peertopeer network"	rdfs:member	"database"
s5	"decentralize topk query"	rdfs:member	"decentralize topk"
s5	"query evaluation"	rdfs:subClassOf	"evaluation"
s5	"peertopeer network"	rdfs:subClassOf	"network"
s5	"topk query evaluation algorithm"	rdfs:subClassOf	"algorithm"
s5	"decentralize topk query evaluation algorithm"	rdfs:member	"decentralize topk query evaluation"
s5	"peertopeer network"	rdfs:member	"peertopeer"
s5	"topk query"	rdfs:subClassOf	"query"
s5	"topk query evaluation algorithm"	rdfs:member	"topk query evaluation"
s5	"topk query"	rdfs:member	"topk"
s5	"decentralize topk query evaluation"	rdfs:subClassOf	"evaluation"
s5	"decentralize topk query evaluation algorithm"	rdfs:subClassOf	"algorithm"
s5	"query evaluation algorithm"	rdfs:member	"query evaluation"
s5	"query evaluation"	rdfs:member	"query"
s5	"decentralize topk"	rdfs:subClassOf	"topk"
s5	"evaluation algorithm"	rdfs:member	"evaluation"
s5	"decentralize topk query"	rdfs:subClassOf	"query"
s5	"topk query evaluation"	rdfs:subClassOf	"evaluation"
s5	"query evaluation algorithm"	rdfs:subClassOf	"algorithm"
s5	"decentralize topk query evaluation"	rdfs:member	"decentralize topk query"
s5	"topk query evaluation"	rdfs:member	"topk query"
s5	"rank algorithm"	rdfs:member	"rank"
s5	"decentralize topk"	rdfs:member	"decentralize"
s5	"rank algorithm"	rdfs:subClassOf	"algorithm"
s5	"evaluation algorithm"	rdfs:subClassOf	"algorithm"
s5	"query evaluation algorithm"	rdfs:subClassOf	"evaluation algorithm"
s5	"topk query evaluation algorithm"	rdfs:subClassOf	"query evaluation algorithm"
s5	"decentralize topk query evaluation algorithm"	rdfs:subClassOf	"topk query evaluation algorithm"
s5	"query evaluation algorithm"	rdfs:subClassOf	"evaluation algorithm"
s5	"topk query evaluation algorithm"	rdfs:subClassOf	"query evaluation algorithm"
s5	"success of rank algorithm"	rdfs:member	"success"
s5	"success of rank algorithm"	rdfs:member	"rank algorithm"
s5	"success of rank algorithm in topk query evaluation algorithm"	rdfs:member	"success of rank algorithm"
s5	"success of rank algorithm in topk query evaluation algorithm"	rdfs:member	"topk query evaluation algorithm"
s5	"topk query evaluation algorithm in database"	rdfs:member	"topk query evaluation algorithm"
s5	"topk query evaluation algorithm in database"	rdfs:member	"database"
s5	"decentralize topk query evaluation algorithm for peertopeer network"	rdfs:member	"decentralize topk query evaluation algorithm"
s5	"decentralize topk query evaluation algorithm for peertopeer network"	rdfs:member	"peertopeer network"
s5	"inspired by the success of ranking algorithms in topk query evaluation algorithms in databases we propose a decentralized topk query evaluation algorithm for peertopeer networks"	rdf:predicate	"inspire"
s4.2	""
s4.2	""	rdf:predicate	"merge"
s4.1	"peertopeer networks which makes use of local rankings rank merging"
s4.1	"peertopeer networks which makes use of local rankings rank merging"	rdf:subject	"peertopeer network which make use of local rank"
s4.1	"peertopeer network which make use of local rank"	rdfs:member	"use"
s4.1	"peertopeer network which make use of local rank"	rdfs:member	"peertopeer network"
s4.1	"peertopeer network which make use of local rank"	rdfs:member	"local rank"
s4.1	"local rank"	rdfs:member	"local"
s4.1	"peertopeer network"	rdfs:member	"peertopeer"
s4.1	"peertopeer network"	rdfs:subClassOf	"network"
s4.1	"local rank"	rdfs:subClassOf	"rank"
s4.1	"use of local rank"	rdfs:member	"use"
s4.1	"use of local rank"	rdfs:member	"local rank"
s4.1	"peertopeer networks which makes use of local rankings rank merging"	rdf:predicate	"rank"
s4.1	"peertopeer networks which makes use of local rankings rank merging"	rdf:object	"merge"
s4	"peertopeer networks which makes use of local rankings"
s4	"peertopeer networks which makes use of local rankings"	rdf:subject	"peertopeer network"
s4	"peertopeer network"	rdfs:member	"peertopeer"
s4	"peertopeer network"	rdfs:subClassOf	"network"
s4	"peertopeer networks which makes use of local rankings"	rdf:predicate	"make"
s4	"peertopeer networks which makes use of local rankings"	rdf:object	"use of local rank"
s4	"use of local rank"	rdfs:member	"use"
s4	"use of local rank"	rdfs:member	"local rank"
s4	"local rank"	rdfs:member	"local"
s4	"local rank"	rdfs:subClassOf	"rank"
s4	"use of local rank"	rdfs:member	"use"
s4	"use of local rank"	rdfs:member	"local rank"
s3	"having more answers users"
s3	"having more answers users"	rdf:subject	"user"
s3	"having more answers users"	rdf:predicate	"have"
s3	"having more answers users"	rdf:object	"answer"
s2	"having more answers users"
s2	"having more answers users"	rdf:subject	"user"
s2	"having more answers users"	rdf:predicate	"have"
s2	"having more answers users"	rdf:object	"answer"
s1	"having more answers users"
s1	"having more answers users"	rdf:subject	"user"
s1	"having more answers users"	rdf:predicate	"have"
s1	"having more answers users"	rdf:object	"answer"
s0.2	"given query"
s0.2	"given query"	rdf:subject	"query"
s0.2	"given query"	rdf:predicate	"give"
s0.1	"increasing the number of peers in a peertopeer network usually increases the number of answers to a given query as well"
s0.1	"increasing the number of peers in a peertopeer network usually increases the number of answers to a given query as well"	rdf:subject	"increase the number of peer in a peertopeer network"
s0.1	"increase the number of peer in a peertopeer network"	rdfs:member	"number"
s0.1	"increase the number of peer in a peertopeer network"	rdfs:member	"peertopeer network"
s0.1	"increase the number of peer in a peertopeer network"	rdfs:member	"peer"
s0.1	"peertopeer network"	rdfs:member	"peertopeer"
s0.1	"peertopeer network"	rdfs:subClassOf	"network"
s0.1	"number of peer"	rdfs:member	"number"
s0.1	"number of peer"	rdfs:member	"peer"
s0.1	"increase in peertopeer network"	rdfs:member	"increase"
s0.1	"increase in peertopeer network"	rdfs:member	"peertopeer network"
s0.1	"increasing the number of peers in a peertopeer network usually increases the number of answers to a given query as well"	rdf:predicate	"increase"
s0.1	"increasing the number of peers in a peertopeer network usually increases the number of answers to a given query as well"	rdf:object	"number of answer give query a well"
s0.1	"number of answer give query a well"	rdfs:member	"number"
s0.1	"number of answer give query a well"	rdfs:member	"answer"
s0.1	"number of answer give query a well"	rdfs:member	"well"
s0.1	"number of answer give query a well"	rdfs:member	"query"
s0.1	"number of answer"	rdfs:member	"number"
s0.1	"number of answer"	rdfs:member	"answer"
s0.1	"increasing the number of peers in a peertopeer network usually increases the number of answers to a given query as well"	local:AM-TMP	"usually"
s0	"increasing the number of peers in a peertopeer network usually increases the number of answers to a given query as well"
s0	"increasing the number of peers in a peertopeer network usually increases the number of answers to a given query as well"	rdf:subject	"number of peer"
s0	"number of peer"	rdfs:member	"number"
s0	"number of peer"	rdfs:member	"peer"
s0	"number of peer"	rdfs:member	"number"
s0	"number of peer"	rdfs:member	"peer"
s0	"increasing the number of peers in a peertopeer network usually increases the number of answers to a given query as well"	rdf:predicate	"increase"
s0	"increasing the number of peers in a peertopeer network usually increases the number of answers to a given query as well"	local:AM-LOC	"peertopeer network usually increase the number of answer to a give query a well"
s0	"peertopeer network usually increase the number of answer to a give query a well"	rdfs:member	"well"
s0	"peertopeer network usually increase the number of answer to a give query a well"	rdfs:member	"peertopeer network"
s0	"peertopeer network usually increase the number of answer to a give query a well"	rdfs:member	"answer"
s0	"peertopeer network usually increase the number of answer to a give query a well"	rdfs:member	"number"
s0	"peertopeer network usually increase the number of answer to a give query a well"	rdfs:member	"give query"
s0	"give query"	rdfs:member	"give"
s0	"give query"	rdfs:subClassOf	"query"
s0	"peertopeer network"	rdfs:member	"peertopeer"
s0	"peertopeer network"	rdfs:subClassOf	"network"
s0	"well query"	rdfs:subClassOf	"query"
s0	"usually increase"	rdfs:subClassOf	"increase"
s0	"number of answer"	rdfs:member	"number"
s0	"number of answer"	rdfs:member	"answer"
s0	"usually increase to give"	rdfs:member	"usually increase"
s0	"usually increase to give"	rdfs:member	"give"
