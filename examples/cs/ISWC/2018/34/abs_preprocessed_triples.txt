s11.3	"the canonicalisation method highlighting difficult cases"
s11.3	"the canonicalisation method highlighting difficult cases"	rdf:subject	"canonicalisation method"
s11.3	"canonicalisation method"	rdfs:member	"canonicalisation"
s11.3	"canonicalisation method"	rdfs:subClassOf	"method"
s11.3	"the canonicalisation method highlighting difficult cases"	rdf:predicate	"highlight"
s11.3	"the canonicalisation method highlighting difficult cases"	rdf:object	"difficult case"
s11.3	"difficult case"	rdfs:member	"difficult"
s11.3	"difficult case"	rdfs:subClassOf	"case"
s11.2	"synthetic queries stresstest the canonicalisation method highlighting difficult cases"
s11.2	"synthetic queries stresstest the canonicalisation method highlighting difficult cases"	rdf:subject	"synthetic query"
s11.2	"synthetic query"	rdfs:subClassOf	"query"
s11.2	"synthetic query"	rdfs:member	"synthetic"
s11.2	"synthetic queries stresstest the canonicalisation method highlighting difficult cases"	rdf:predicate	"stresstest"
s11.2	"synthetic queries stresstest the canonicalisation method highlighting difficult cases"	rdf:object	"canonicalisation method highlight difficult case"
s11.2	"canonicalisation method highlight difficult case"	rdfs:member	"canonicalisation method highlight"
s11.2	"canonicalisation method highlight difficult case"	rdfs:member	"difficult case"
s11.2	"method highlight"	rdfs:subClassOf	"highlight"
s11.2	"difficult case"	rdfs:member	"difficult"
s11.2	"canonicalisation method"	rdfs:subClassOf	"method"
s11.2	"canonicalisation method highlight"	rdfs:subClassOf	"highlight"
s11.2	"method highlight"	rdfs:member	"method"
s11.2	"canonicalisation method"	rdfs:member	"canonicalisation"
s11.2	"canonicalisation method highlight"	rdfs:member	"canonicalisation method"
s11.2	"difficult case"	rdfs:subClassOf	"case"
s11.2	"highlight difficult case"	rdfs:subClassOf	"difficult case"
s11.2	"method highlight difficult case"	rdfs:subClassOf	"highlight difficult case"
s11.2	"canonicalisation method highlight difficult case"	rdfs:subClassOf	"method highlight difficult case"
s11.1	"synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"
s11.1	"synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	rdf:subject	"synthetic query"
s11.1	"synthetic query"	rdfs:subClassOf	"query"
s11.1	"synthetic query"	rdfs:member	"synthetic"
s11.1	"synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	rdf:predicate	"design"
s11.1	"synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	rdf:object	"stresstest the canonicalisation method highlight difficult case"
s11.1	"stresstest the canonicalisation method highlight difficult case"	rdfs:member	"canonicalisation method highlight"
s11.1	"stresstest the canonicalisation method highlight difficult case"	rdfs:member	"difficult case"
s11.1	"method highlight"	rdfs:subClassOf	"highlight"
s11.1	"difficult case"	rdfs:member	"difficult"
s11.1	"canonicalisation method"	rdfs:subClassOf	"method"
s11.1	"canonicalisation method highlight"	rdfs:subClassOf	"highlight"
s11.1	"method highlight"	rdfs:member	"method"
s11.1	"canonicalisation method"	rdfs:member	"canonicalisation"
s11.1	"canonicalisation method highlight"	rdfs:member	"canonicalisation method"
s11.1	"difficult case"	rdfs:subClassOf	"case"
s11.1	"highlight difficult case"	rdfs:subClassOf	"difficult case"
s11.1	"method highlight difficult case"	rdfs:subClassOf	"highlight difficult case"
s11.1	"canonicalisation method highlight difficult case"	rdfs:subClassOf	"method highlight difficult case"
s11	"we also present the results of experiments over synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"
s11	"we also present the results of experiments over synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	rdf:subject	"we"
s11	"we also present the results of experiments over synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	rdf:predicate	"present"
s11	"we also present the results of experiments over synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	rdf:object	"result of experiment over synthetic query design to stresstest the canonicalisation method highlight difficult case"
s11	"result of experiment over synthetic query design to stresstest the canonicalisation method highlight difficult case"	rdfs:member	"experiment"
s11	"result of experiment over synthetic query design to stresstest the canonicalisation method highlight difficult case"	rdfs:member	"difficult case"
s11	"result of experiment over synthetic query design to stresstest the canonicalisation method highlight difficult case"	rdfs:member	"result"
s11	"result of experiment over synthetic query design to stresstest the canonicalisation method highlight difficult case"	rdfs:member	"canonicalisation method highlight"
s11	"result of experiment over synthetic query design to stresstest the canonicalisation method highlight difficult case"	rdfs:member	"synthetic query design"
s11	"method highlight"	rdfs:subClassOf	"highlight"
s11	"synthetic query"	rdfs:member	"synthetic"
s11	"method highlight"	rdfs:member	"method"
s11	"canonicalisation method"	rdfs:subClassOf	"method"
s11	"synthetic query design"	rdfs:subClassOf	"design"
s11	"synthetic query"	rdfs:subClassOf	"query"
s11	"canonicalisation method highlight"	rdfs:subClassOf	"highlight"
s11	"query design"	rdfs:subClassOf	"design"
s11	"query design"	rdfs:member	"query"
s11	"synthetic query design"	rdfs:member	"synthetic query"
s11	"difficult case"	rdfs:member	"difficult"
s11	"canonicalisation method"	rdfs:member	"canonicalisation"
s11	"canonicalisation method highlight"	rdfs:member	"canonicalisation method"
s11	"difficult case"	rdfs:subClassOf	"case"
s11	"highlight difficult case"	rdfs:subClassOf	"difficult case"
s11	"method highlight difficult case"	rdfs:subClassOf	"highlight difficult case"
s11	"canonicalisation method highlight difficult case"	rdfs:subClassOf	"method highlight difficult case"
s11	"synthetic query design"	rdfs:subClassOf	"query design"
s11	"result of experiment"	rdfs:member	"result"
s11	"result of experiment"	rdfs:member	"experiment"
s11	"experiment over synthetic query design"	rdfs:member	"experiment"
s11	"experiment over synthetic query design"	rdfs:member	"synthetic query design"
s11	"we also present the results of experiments over synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	local:AM-DIS	"also"
s10.1	"an algorithm detects more equivalent queries than when compared with purely syntactic methods"
s10.1	"an algorithm detects more equivalent queries than when compared with purely syntactic methods"	rdf:subject	"algorithm"
s10.1	"an algorithm detects more equivalent queries than when compared with purely syntactic methods"	rdf:predicate	"detect"
s10.1	"an algorithm detects more equivalent queries than when compared with purely syntactic methods"	rdf:object	"equivalent query than when compare with purely syntactic method"
s10.1	"equivalent query than when compare with purely syntactic method"	rdfs:member	"compare"
s10.1	"equivalent query than when compare with purely syntactic method"	rdfs:member	"equivalent query"
s10.1	"equivalent query than when compare with purely syntactic method"	rdfs:member	"purely syntactic method"
s10.1	"purely syntactic method"	rdfs:subClassOf	"method"
s10.1	"purely syntactic"	rdfs:subClassOf	"syntactic"
s10.1	"equivalent query"	rdfs:subClassOf	"query"
s10.1	"purely syntactic method"	rdfs:member	"purely syntactic"
s10.1	"purely syntactic"	rdfs:member	"purely"
s10.1	"equivalent query"	rdfs:member	"equivalent"
s10.1	"syntactic method"	rdfs:subClassOf	"method"
s10.1	"syntactic method"	rdfs:member	"syntactic"
s10.1	"when compare"	rdfs:subClassOf	"compare"
s10.1	"when compare with syntactic method"	rdfs:member	"when compare"
s10.1	"when compare with syntactic method"	rdfs:member	"syntactic method"
s10	"despite the fact that canonicalisation must be harder than the equivalence problem we show that an algorithm detects more equivalent queries than when compared with purely syntactic methods"
s10	"despite the fact that canonicalisation must be harder than the equivalence problem we show that an algorithm detects more equivalent queries than when compared with purely syntactic methods"	rdf:subject	"we"
s10	"despite the fact that canonicalisation must be harder than the equivalence problem we show that an algorithm detects more equivalent queries than when compared with purely syntactic methods"	rdf:predicate	"show"
s10	"despite the fact that canonicalisation must be harder than the equivalence problem we show that an algorithm detects more equivalent queries than when compared with purely syntactic methods"	rdf:object	"algorithm detect more equivalent query than when compare with purely syntactic method"
s10	"algorithm detect more equivalent query than when compare with purely syntactic method"	rdfs:member	"compare"
s10	"algorithm detect more equivalent query than when compare with purely syntactic method"	rdfs:member	"more equivalent query"
s10	"algorithm detect more equivalent query than when compare with purely syntactic method"	rdfs:member	"algorithm"
s10	"algorithm detect more equivalent query than when compare with purely syntactic method"	rdfs:member	"purely syntactic method"
s10	"more equivalent query"	rdfs:subClassOf	"query"
s10	"purely syntactic method"	rdfs:subClassOf	"method"
s10	"more equivalent"	rdfs:subClassOf	"equivalent"
s10	"equivalent query"	rdfs:subClassOf	"query"
s10	"purely syntactic"	rdfs:subClassOf	"syntactic"
s10	"more equivalent"	rdfs:member	"more"
s10	"purely syntactic method"	rdfs:member	"purely syntactic"
s10	"purely syntactic"	rdfs:member	"purely"
s10	"more equivalent query"	rdfs:member	"more equivalent"
s10	"equivalent query"	rdfs:member	"equivalent"
s10	"syntactic method"	rdfs:subClassOf	"method"
s10	"syntactic method"	rdfs:member	"syntactic"
s10	"when compare"	rdfs:subClassOf	"compare"
s10	"when compare with syntactic method"	rdfs:member	"when compare"
s10	"when compare with syntactic method"	rdfs:member	"syntactic method"
s10	"despite the fact that canonicalisation must be harder than the equivalence problem we show that an algorithm detects more equivalent queries than when compared with purely syntactic methods"	local:AM-ADV	"despite the fact that canonicalisation must be harder than the equivalence problem"
s10	"despite the fact that canonicalisation must be harder than the equivalence problem"	rdfs:member	"fact"
s10	"despite the fact that canonicalisation must be harder than the equivalence problem"	rdfs:member	"equivalence problem"
s10	"despite the fact that canonicalisation must be harder than the equivalence problem"	rdfs:member	"canonicalisation"
s10	"equivalence problem"	rdfs:subClassOf	"problem"
s10	"equivalence problem"	rdfs:member	"equivalence"
s10	"must harder"	rdfs:subClassOf	"harder"
s10	"must harder than equivalence problem"	rdfs:member	"must harder"
s10	"must harder than equivalence problem"	rdfs:member	"equivalence problem"
s9	"realworld queries taken from sparql endpoint logs"
s9	"realworld queries taken from sparql endpoint logs"	rdf:subject	"realworld query"
s9	"realworld query"	rdfs:member	"realworld"
s9	"realworld query"	rdfs:subClassOf	"query"
s9	"realworld queries taken from sparql endpoint logs"	rdf:predicate	"take"
s9	"realworld queries taken from sparql endpoint logs"	rdf:object	"sparql endpoint log"
s9	"endpoint log"	rdfs:subClassOf	"log"
s9	"sparql endpoint"	rdfs:subClassOf	"endpoint"
s9	"endpoint log"	rdfs:member	"endpoint"
s9	"sparql endpoint log"	rdfs:subClassOf	"log"
s9	"sparql endpoint"	rdfs:member	"sparql"
s9	"sparql endpoint log"	rdfs:member	"sparql endpoint"
s9	"sparql endpoint log"	rdfs:subClassOf	"endpoint log"
s8.1	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"
s8.1	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"	rdf:subject	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"
s8.1	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	rdfs:member	"sparql query"
s8.1	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	rdfs:member	"syntactic canonicalisation"
s8.1	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	rdfs:member	"canonicalised query"
s8.1	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	rdfs:member	"answer"
s8.1	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	rdfs:member	"algorithm"
s8.1	"canonicalised query"	rdfs:subClassOf	"query"
s8.1	"canonicalised query"	rdfs:member	"canonicalised"
s8.1	"syntactic canonicalisation"	rdfs:subClassOf	"canonicalisation"
s8.1	"syntactic canonicalisation"	rdfs:member	"syntactic"
s8.1	"sparql query"	rdfs:subClassOf	"query"
s8.1	"sparql query"	rdfs:member	"sparql"
s8.1	"sparql canonicalised query"	rdfs:subClassOf	"canonicalised query"
s8.1	"syntactic canonicalisation of sparql canonicalised query"	rdfs:member	"syntactic canonicalisation"
s8.1	"syntactic canonicalisation of sparql canonicalised query"	rdfs:member	"sparql canonicalised query"
s8.1	"answer for canonicalised query"	rdfs:member	"answer"
s8.1	"answer for canonicalised query"	rdfs:member	"canonicalised query"
s8.1	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"	rdf:predicate	"not change"
s8.1	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"	local:AM-MOD	"will"
s8	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"
s8	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	rdf:subject	"algorithm"
s8	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	rdf:predicate	"perform"
s8	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	rdf:object	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"
s8	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"	rdfs:member	"canonicalised query"
s8	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"	rdfs:member	"sparql query"
s8	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"	rdfs:member	"syntactic canonicalisation"
s8	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"	rdfs:member	"answer"
s8	"canonicalised query"	rdfs:subClassOf	"query"
s8	"canonicalised query"	rdfs:member	"canonicalised"
s8	"syntactic canonicalisation"	rdfs:subClassOf	"canonicalisation"
s8	"syntactic canonicalisation"	rdfs:member	"syntactic"
s8	"sparql query"	rdfs:subClassOf	"query"
s8	"sparql query"	rdfs:member	"sparql"
s8	"not change"	rdfs:subClassOf	"change"
s8	"will not change"	rdfs:subClassOf	"not change"
s8	"sparql canonicalised query"	rdfs:subClassOf	"canonicalised query"
s8	"syntactic canonicalisation of sparql canonicalised query"	rdfs:member	"syntactic canonicalisation"
s8	"syntactic canonicalisation of sparql canonicalised query"	rdfs:member	"sparql canonicalised query"
s8	"answer for canonicalised query"	rdfs:member	"answer"
s8	"answer for canonicalised query"	rdfs:member	"canonicalised query"
s8	"will not change versus original"	rdfs:member	"will not change"
s8	"will not change versus original"	rdfs:member	"original"
s7	"an algorithm that performs syntactic canonicalisation of sparql queries"
s7	"an algorithm that performs syntactic canonicalisation of sparql queries"	rdf:subject	"algorithm"
s7	"an algorithm that performs syntactic canonicalisation of sparql queries"	rdf:predicate	"perform"
s7	"an algorithm that performs syntactic canonicalisation of sparql queries"	rdf:object	"syntactic canonicalisation of sparql query"
s7	"syntactic canonicalisation of sparql query"	rdfs:member	"sparql query"
s7	"syntactic canonicalisation of sparql query"	rdfs:member	"syntactic canonicalisation"
s7	"sparql query"	rdfs:subClassOf	"query"
s7	"sparql query"	rdfs:member	"sparql"
s7	"syntactic canonicalisation"	rdfs:member	"syntactic"
s7	"syntactic canonicalisation"	rdfs:subClassOf	"canonicalisation"
s7	"syntactic canonicalisation of sparql query"	rdfs:member	"syntactic canonicalisation"
s7	"syntactic canonicalisation of sparql query"	rdfs:member	"sparql query"
s6.1	"the answers for the canonicalised query will not change"
s6.1	"the answers for the canonicalised query will not change"	rdf:subject	"answer for the canonicalised query"
s6.1	"answer for the canonicalised query"	rdfs:member	"canonicalised query"
s6.1	"answer for the canonicalised query"	rdfs:member	"answer"
s6.1	"canonicalised query"	rdfs:subClassOf	"query"
s6.1	"canonicalised query"	rdfs:member	"canonicalised"
s6.1	"answer for canonicalised query"	rdfs:member	"answer"
s6.1	"answer for canonicalised query"	rdfs:member	"canonicalised query"
s6.1	"the answers for the canonicalised query will not change"	rdf:predicate	"not change"
s6.1	"the answers for the canonicalised query will not change"	local:AM-MOD	"will"
s6	"despite the fact that canonicalisation must be harder than the equivalence problem we show an algorithm such that the answers for the canonicalised query will not change versus the original to be practical for realworld queries"
s6	"despite the fact that canonicalisation must be harder than the equivalence problem we show an algorithm such that the answers for the canonicalised query will not change versus the original to be practical for realworld queries"	rdf:subject	"we"
s6	"despite the fact that canonicalisation must be harder than the equivalence problem we show an algorithm such that the answers for the canonicalised query will not change versus the original to be practical for realworld queries"	rdf:predicate	"show"
s6	"despite the fact that canonicalisation must be harder than the equivalence problem we show an algorithm such that the answers for the canonicalised query will not change versus the original to be practical for realworld queries"	rdf:object	"algorithm such that the answer for the canonicalised query will not change versus the original to be practical for realworld query"
s6	"algorithm such that the answer for the canonicalised query will not change versus the original to be practical for realworld query"	rdfs:member	"canonicalised query"
s6	"algorithm such that the answer for the canonicalised query will not change versus the original to be practical for realworld query"	rdfs:member	"realworld query"
s6	"algorithm such that the answer for the canonicalised query will not change versus the original to be practical for realworld query"	rdfs:member	"answer"
s6	"algorithm such that the answer for the canonicalised query will not change versus the original to be practical for realworld query"	rdfs:member	"algorithm"
s6	"canonicalised query"	rdfs:subClassOf	"query"
s6	"realworld query"	rdfs:member	"realworld"
s6	"canonicalised query"	rdfs:member	"canonicalised"
s6	"realworld query"	rdfs:subClassOf	"query"
s6	"not change"	rdfs:subClassOf	"change"
s6	"will not change"	rdfs:subClassOf	"not change"
s6	"answer for canonicalised query"	rdfs:member	"answer"
s6	"answer for canonicalised query"	rdfs:member	"canonicalised query"
s6	"will not change versus original"	rdfs:member	"will not change"
s6	"will not change versus original"	rdfs:member	"original"
s6	"practical for realworld query"	rdfs:member	"practical"
s6	"practical for realworld query"	rdfs:member	"realworld query"
s6	"despite the fact that canonicalisation must be harder than the equivalence problem we show an algorithm such that the answers for the canonicalised query will not change versus the original to be practical for realworld queries"	local:AM-ADV	"despite the fact that canonicalisation must be harder than the equivalence problem"
s6	"despite the fact that canonicalisation must be harder than the equivalence problem"	rdfs:member	"fact"
s6	"despite the fact that canonicalisation must be harder than the equivalence problem"	rdfs:member	"equivalence problem"
s6	"despite the fact that canonicalisation must be harder than the equivalence problem"	rdfs:member	"canonicalisation"
s6	"equivalence problem"	rdfs:subClassOf	"problem"
s6	"equivalence problem"	rdfs:member	"equivalence"
s6	"must harder"	rdfs:subClassOf	"harder"
s6	"must harder than equivalence problem"	rdfs:member	"must harder"
s6	"must harder than equivalence problem"	rdfs:member	"equivalence problem"
s5	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if"
s5	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if"	rdf:subject	"we"
s5	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if"	rdf:predicate	"guarantee"
s5	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if"	rdf:object	"canonicalisation of two query within a core fragment of sparql be equal if"
s5	"canonicalisation of two query within a core fragment of sparql be equal if"	rdfs:member	"core fragment"
s5	"canonicalisation of two query within a core fragment of sparql be equal if"	rdfs:member	"query"
s5	"canonicalisation of two query within a core fragment of sparql be equal if"	rdfs:member	"sparql"
s5	"canonicalisation of two query within a core fragment of sparql be equal if"	rdfs:member	"canonicalisation"
s5	"core fragment"	rdfs:subClassOf	"fragment"
s5	"core fragment"	rdfs:member	"core"
s5	"two query"	rdfs:subClassOf	"query"
s5	"canonicalisation of two query"	rdfs:member	"canonicalisation"
s5	"canonicalisation of two query"	rdfs:member	"two query"
s5	"canonicalisation of two query within core fragment"	rdfs:member	"canonicalisation of two query"
s5	"canonicalisation of two query within core fragment"	rdfs:member	"core fragment"
s5	"core fragment of sparql"	rdfs:member	"core fragment"
s5	"core fragment of sparql"	rdfs:member	"sparql"
s5	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if"	local:AM-MOD	"can"
s4.1	"we also support other sparql features"
s4.1	"we also support other sparql features"	rdf:subject	"we"
s4.1	"we also support other sparql features"	rdf:predicate	"support"
s4.1	"we also support other sparql features"	rdf:object	"sparql feature"
s4.1	"sparql feature"	rdfs:member	"sparql"
s4.1	"sparql feature"	rdfs:subClassOf	"feature"
s4.1	"we also support other sparql features"	local:AM-DIS	"also"
s4	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if the two queries are equivalent we also support other sparql features but with a weaker soundness guarantee that the is equivalent to the input query"
s4	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if the two queries are equivalent we also support other sparql features but with a weaker soundness guarantee that the is equivalent to the input query"	rdf:subject	"we"
s4	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if the two queries are equivalent we also support other sparql features but with a weaker soundness guarantee that the is equivalent to the input query"	rdf:predicate	"guarantee"
s4	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if the two queries are equivalent we also support other sparql features but with a weaker soundness guarantee that the is equivalent to the input query"	rdf:object	"canonicalisation of two query within a core fragment of sparql be equal if the two query be equivalent we also support other sparql feature but with a weaker soundness guarantee that the be equivalent to the input query"
s4	"canonicalisation of two query within a core fragment of sparql be equal if the two query be equivalent we also support other sparql feature but with a weaker soundness guarantee that the be equivalent to the input query"	rdfs:member	"query"
s4	"canonicalisation of two query within a core fragment of sparql be equal if the two query be equivalent we also support other sparql feature but with a weaker soundness guarantee that the be equivalent to the input query"	rdfs:member	"sparql"
s4	"canonicalisation of two query within a core fragment of sparql be equal if the two query be equivalent we also support other sparql feature but with a weaker soundness guarantee that the be equivalent to the input query"	rdfs:member	"weaker soundness guarantee"
s4	"canonicalisation of two query within a core fragment of sparql be equal if the two query be equivalent we also support other sparql feature but with a weaker soundness guarantee that the be equivalent to the input query"	rdfs:member	"input query"
s4	"canonicalisation of two query within a core fragment of sparql be equal if the two query be equivalent we also support other sparql feature but with a weaker soundness guarantee that the be equivalent to the input query"	rdfs:member	"other sparql feature"
s4	"canonicalisation of two query within a core fragment of sparql be equal if the two query be equivalent we also support other sparql feature but with a weaker soundness guarantee that the be equivalent to the input query"	rdfs:member	"core fragment"
s4	"canonicalisation of two query within a core fragment of sparql be equal if the two query be equivalent we also support other sparql feature but with a weaker soundness guarantee that the be equivalent to the input query"	rdfs:member	"canonicalisation"
s4	"soundness guarantee"	rdfs:subClassOf	"guarantee"
s4	"core fragment"	rdfs:member	"core"
s4	"weaker soundness guarantee"	rdfs:subClassOf	"guarantee"
s4	"other sparql feature"	rdfs:member	"other sparql"
s4	"sparql feature"	rdfs:member	"sparql"
s4	"input query"	rdfs:subClassOf	"query"
s4	"sparql feature"	rdfs:subClassOf	"feature"
s4	"input query"	rdfs:member	"input"
s4	"weaker soundness"	rdfs:subClassOf	"soundness"
s4	"other sparql"	rdfs:member	"other"
s4	"soundness guarantee"	rdfs:member	"soundness"
s4	"other sparql feature"	rdfs:subClassOf	"feature"
s4	"weaker soundness"	rdfs:member	"weaker"
s4	"core fragment"	rdfs:subClassOf	"fragment"
s4	"other sparql"	rdfs:subClassOf	"sparql"
s4	"weaker soundness guarantee"	rdfs:member	"weaker soundness"
s4	"weaker soundness guarantee"	rdfs:subClassOf	"soundness guarantee"
s4	"other sparql feature"	rdfs:subClassOf	"sparql feature"
s4	"also support"	rdfs:subClassOf	"support"
s4	"two query"	rdfs:subClassOf	"query"
s4	"two query"	rdfs:subClassOf	"query"
s4	"canonicalisation of two query"	rdfs:member	"canonicalisation"
s4	"canonicalisation of two query"	rdfs:member	"two query"
s4	"canonicalisation of two query within core fragment"	rdfs:member	"canonicalisation of two query"
s4	"canonicalisation of two query within core fragment"	rdfs:member	"core fragment"
s4	"core fragment of sparql"	rdfs:member	"core fragment"
s4	"core fragment of sparql"	rdfs:member	"sparql"
s4	"but with weaker soundness guarantee"	rdfs:member	"but"
s4	"but with weaker soundness guarantee"	rdfs:member	"weaker soundness guarantee"
s4	"equivalent to input query"	rdfs:member	"equivalent"
s4	"equivalent to input query"	rdfs:member	"input query"
s4	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if the two queries are equivalent we also support other sparql features but with a weaker soundness guarantee that the is equivalent to the input query"	local:AM-MOD	"can"
s2.1	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"
s2.1	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"	rdf:subject	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"
s2.1	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	rdfs:member	"sparql query"
s2.1	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	rdfs:member	"syntactic canonicalisation"
s2.1	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	rdfs:member	"canonicalised query"
s2.1	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	rdfs:member	"answer"
s2.1	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	rdfs:member	"algorithm"
s2.1	"canonicalised query"	rdfs:subClassOf	"query"
s2.1	"canonicalised query"	rdfs:member	"canonicalised"
s2.1	"syntactic canonicalisation"	rdfs:subClassOf	"canonicalisation"
s2.1	"syntactic canonicalisation"	rdfs:member	"syntactic"
s2.1	"sparql query"	rdfs:subClassOf	"query"
s2.1	"sparql query"	rdfs:member	"sparql"
s2.1	"sparql canonicalised query"	rdfs:subClassOf	"canonicalised query"
s2.1	"syntactic canonicalisation of sparql canonicalised query"	rdfs:member	"syntactic canonicalisation"
s2.1	"syntactic canonicalisation of sparql canonicalised query"	rdfs:member	"sparql canonicalised query"
s2.1	"answer for canonicalised query"	rdfs:member	"answer"
s2.1	"answer for canonicalised query"	rdfs:member	"canonicalised query"
s2.1	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"	rdf:predicate	"not change"
s2.1	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"	local:AM-MOD	"will"
s2	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"
s2	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	rdf:subject	"algorithm"
s2	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	rdf:predicate	"perform"
s2	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	rdf:object	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"
s2	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"	rdfs:member	"canonicalised query"
s2	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"	rdfs:member	"sparql query"
s2	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"	rdfs:member	"syntactic canonicalisation"
s2	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"	rdfs:member	"answer"
s2	"canonicalised query"	rdfs:subClassOf	"query"
s2	"canonicalised query"	rdfs:member	"canonicalised"
s2	"syntactic canonicalisation"	rdfs:subClassOf	"canonicalisation"
s2	"syntactic canonicalisation"	rdfs:member	"syntactic"
s2	"sparql query"	rdfs:subClassOf	"query"
s2	"sparql query"	rdfs:member	"sparql"
s2	"not change"	rdfs:subClassOf	"change"
s2	"will not change"	rdfs:subClassOf	"not change"
s2	"sparql canonicalised query"	rdfs:subClassOf	"canonicalised query"
s2	"syntactic canonicalisation of sparql canonicalised query"	rdfs:member	"syntactic canonicalisation"
s2	"syntactic canonicalisation of sparql canonicalised query"	rdfs:member	"sparql canonicalised query"
s2	"answer for canonicalised query"	rdfs:member	"answer"
s2	"answer for canonicalised query"	rdfs:member	"canonicalised query"
s2	"will not change versus original"	rdfs:member	"will not change"
s2	"will not change versus original"	rdfs:member	"original"
s1	"despite this complexity in this paper we propose an algorithm"
s1	"despite this complexity in this paper we propose an algorithm"	rdf:subject	"we"
s1	"despite this complexity in this paper we propose an algorithm"	rdf:predicate	"propose"
s1	"despite this complexity in this paper we propose an algorithm"	rdf:object	"algorithm"
s1	"despite this complexity in this paper we propose an algorithm"	local:AM-ADV	"despite this complexity in this paper"
s1	"despite this complexity in this paper"	rdfs:member	"complexity"
s1	"despite this complexity in this paper"	rdfs:member	"paper"
s1	"complexity in paper"	rdfs:member	"complexity"
s1	"complexity in paper"	rdfs:member	"paper"
s0.4	"further query features makes the problem"
s0.4	"further query features makes the problem"	rdf:subject	"query feature"
s0.4	"query feature"	rdfs:member	"query"
s0.4	"query feature"	rdfs:subClassOf	"feature"
s0.4	"further query features makes the problem"	rdf:predicate	"make"
s0.4	"further query features makes the problem"	rdf:object	"problem"
s0.3	"npcomplete where adding further query features"
s0.3	"npcomplete where adding further query features"	rdf:subject	"npcomplete"
s0.3	"npcomplete where adding further query features"	rdf:predicate	"add"
s0.3	"npcomplete where adding further query features"	rdf:object	"query feature"
s0.3	"query feature"	rdfs:member	"query"
s0.3	"query feature"	rdfs:subClassOf	"feature"
s0.2	"equivalent queries deciding"
s0.2	"equivalent queries deciding"	rdf:subject	"equivalent query"
s0.2	"equivalent query"	rdfs:member	"equivalent"
s0.2	"equivalent query"	rdfs:subClassOf	"query"
s0.2	"equivalent queries deciding"	rdf:predicate	"decide"
s0.1	"sparql detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features makes the problem undecidable"
s0.1	"sparql detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features makes the problem undecidable"	rdf:subject	"sparql"
s0.1	"sparql detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features makes the problem undecidable"	rdf:predicate	"detect"
s0.1	"sparql detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features makes the problem undecidable"	rdf:object	"equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature make the problem undecidable"
s0.1	"equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature make the problem undecidable"	rdfs:member	"problem"
s0.1	"equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature make the problem undecidable"	rdfs:member	"equivalent query"
s0.1	"equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature make the problem undecidable"	rdfs:member	"conjunctive query"
s0.1	"equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature make the problem undecidable"	rdfs:member	"further query feature"
s0.1	"conjunctive query"	rdfs:member	"conjunctive"
s0.1	"equivalent query"	rdfs:subClassOf	"query"
s0.1	"further query"	rdfs:member	"further"
s0.1	"further query feature"	rdfs:subClassOf	"feature"
s0.1	"query feature"	rdfs:member	"query"
s0.1	"query feature"	rdfs:subClassOf	"feature"
s0.1	"conjunctive query"	rdfs:subClassOf	"query"
s0.1	"further query feature"	rdfs:member	"further query"
s0.1	"equivalent query"	rdfs:member	"equivalent"
s0.1	"further query"	rdfs:subClassOf	"query"
s0.1	"further query feature"	rdfs:subClassOf	"query feature"
s0.1	"where add"	rdfs:subClassOf	"add"
s0.1	"two conjunctive query"	rdfs:subClassOf	"conjunctive query"
s0	"expressive query languages such as sparql complicated by the difficulty of detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features"
s0	"expressive query languages such as sparql complicated by the difficulty of detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features"	rdf:subject	"difficulty of detect equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature"
s0	"difficulty of detect equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature"	rdfs:member	"conjunctive query"
s0	"difficulty of detect equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature"	rdfs:member	"further query feature"
s0	"difficulty of detect equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature"	rdfs:member	"difficulty"
s0	"difficulty of detect equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature"	rdfs:member	"detect equivalent query"
s0	"detect equivalent query"	rdfs:subClassOf	"query"
s0	"conjunctive query"	rdfs:member	"conjunctive"
s0	"equivalent query"	rdfs:subClassOf	"query"
s0	"further query"	rdfs:member	"further"
s0	"further query feature"	rdfs:subClassOf	"feature"
s0	"detect equivalent query"	rdfs:member	"detect equivalent"
s0	"query feature"	rdfs:member	"query"
s0	"query feature"	rdfs:subClassOf	"feature"
s0	"detect equivalent"	rdfs:subClassOf	"equivalent"
s0	"conjunctive query"	rdfs:subClassOf	"query"
s0	"detect equivalent"	rdfs:member	"detect"
s0	"further query feature"	rdfs:member	"further query"
s0	"equivalent query"	rdfs:member	"equivalent"
s0	"further query"	rdfs:subClassOf	"query"
s0	"further query feature"	rdfs:subClassOf	"query feature"
s0	"where add"	rdfs:subClassOf	"add"
s0	"two conjunctive query"	rdfs:subClassOf	"conjunctive query"
s0	"expressive query languages such as sparql complicated by the difficulty of detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features"	rdf:predicate	"complicate"
s0	"expressive query languages such as sparql complicated by the difficulty of detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features"	rdf:object	"expressive query language such a sparql"
s0	"expressive query language such a sparql"	rdfs:member	"expressive query language"
s0	"expressive query language such a sparql"	rdfs:member	"sparql"
s0	"expressive query"	rdfs:subClassOf	"query"
s0	"expressive query language"	rdfs:subClassOf	"language"
s0	"expressive query language"	rdfs:member	"expressive query"
s0	"expressive query"	rdfs:member	"expressive"
s0	"query language"	rdfs:subClassOf	"language"
s0	"query language"	rdfs:member	"query"
s0	"such sparql"	rdfs:subClassOf	"sparql"
s0	"expressive query language"	rdfs:subClassOf	"query language"
