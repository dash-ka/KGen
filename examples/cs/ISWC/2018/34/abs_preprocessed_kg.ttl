@prefix	rdfs:	<http://www.w3.org/2000/01/rdf-schema#>	.
@prefix	local:	<http://local/local.owl#>	.
@prefix	cso:	<https://cso.kmi.open.ac.uk/topics/>	.
@prefix	rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>	.
@prefix	owl:	<http://www.w3.org/2002/07/owl#>	.

#### Statements ####

local:s11.3	a	rdf:Statement	;
	rdfs:label	"the canonicalisation method highlighting difficult cases"	.

local:s11.2	a	rdf:Statement	;
	rdfs:label	"synthetic queries stresstest the canonicalisation method highlighting difficult cases"	.

local:s11.1	a	rdf:Statement	;
	rdfs:label	"synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	.

local:s11	a	rdf:Statement	;
	rdfs:label	"we also present the results of experiments over synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	.

local:s10.1	a	rdf:Statement	;
	rdfs:label	"an algorithm detects more equivalent queries than when compared with purely syntactic methods"	.

local:s10	a	rdf:Statement	;
	rdfs:label	"despite the fact that canonicalisation must be harder than the equivalence problem we show that an algorithm detects more equivalent queries than when compared with purely syntactic methods"	.

local:s9	a	rdf:Statement	;
	rdfs:label	"realworld queries taken from sparql endpoint logs"	.

local:s8.1	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"	.

local:s8	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	.

local:s7	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation of sparql queries"	.

local:s6.1	a	rdf:Statement	;
	rdfs:label	"the answers for the canonicalised query will not change"	.

local:s6	a	rdf:Statement	;
	rdfs:label	"despite the fact that canonicalisation must be harder than the equivalence problem we show an algorithm such that the answers for the canonicalised query will not change versus the original to be practical for realworld queries"	.

local:s5	a	rdf:Statement	;
	rdfs:label	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if"	.

local:s4.1	a	rdf:Statement	;
	rdfs:label	"we also support other sparql features"	.

local:s4	a	rdf:Statement	;
	rdfs:label	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if the two queries are equivalent we also support other sparql features but with a weaker soundness guarantee that the is equivalent to the input query"	.

local:s2.1	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"	.

local:s2	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	.

local:s1	a	rdf:Statement	;
	rdfs:label	"despite this complexity in this paper we propose an algorithm"	.

local:s0.4	a	rdf:Statement	;
	rdfs:label	"further query features makes the problem"	.

local:s0.3	a	rdf:Statement	;
	rdfs:label	"npcomplete where adding further query features"	.

local:s0.2	a	rdf:Statement	;
	rdfs:label	"equivalent queries deciding"	.

local:s0.1	a	rdf:Statement	;
	rdfs:label	"sparql detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features makes the problem undecidable"	.

local:s0	a	rdf:Statement	;
	rdfs:label	"expressive query languages such as sparql complicated by the difficulty of detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features"	.


#### Classes ####

local:canonicalisation_method	a	rdf:Class	;
	rdfs:label	"canonicalisation method"	.

local:canonicalisation	a	rdf:Class	;
	rdfs:label	"canonicalisation"	.

local:method	a	rdf:Class	;
	rdfs:label	"method"	.

local:highlight	a	rdf:Class	;
	rdfs:label	"highlight"	.

local:difficult_case	a	rdf:Class	;
	rdfs:label	"difficult case"	.

local:difficult	a	rdf:Class	;
	rdfs:label	"difficult"	.

local:case	a	rdf:Class	;
	rdfs:label	"case"	.

local:synthetic_query	a	rdf:Class	;
	rdfs:label	"synthetic query"	.

local:query	a	rdf:Class	;
	rdfs:label	"query"	.

local:synthetic	a	rdf:Class	;
	rdfs:label	"synthetic"	.

local:stresstest	a	rdf:Class	;
	rdfs:label	"stresstest"	.

local:canonicalisation_method_highlight_difficult_case	a	rdf:Class	;
	rdfs:label	"canonicalisation method highlight difficult case"	.

local:canonicalisation_method_highlight	a	rdf:Class	;
	rdfs:label	"canonicalisation method highlight"	.

local:method_highlight	a	rdf:Class	;
	rdfs:label	"method highlight"	.

local:highlight_difficult_case	a	rdf:Class	;
	rdfs:label	"highlight difficult case"	.

local:method_highlight_difficult_case	a	rdf:Class	;
	rdfs:label	"method highlight difficult case"	.

local:design	a	rdf:Class	;
	rdfs:label	"design"	.

local:stresstest_the_canonicalisation_method_highlight_difficult_case	a	rdf:Class	;
	rdfs:label	"stresstest the canonicalisation method highlight difficult case"	.

local:we	a	rdf:Class	;
	rdfs:label	"we"	.

local:present	a	rdf:Class	;
	rdfs:label	"present"	.

local:result_of_experiment_over_synthetic_query_design_to_stresstest_the_canonicalisation_method_highlight_difficult_case	a	rdf:Class	;
	rdfs:label	"result of experiment over synthetic query design to stresstest the canonicalisation method highlight difficult case"	.

local:experiment	a	rdf:Class	;
	rdfs:label	"experiment"	.

local:result	a	rdf:Class	;
	rdfs:label	"result"	.

local:synthetic_query_design	a	rdf:Class	;
	rdfs:label	"synthetic query design"	.

local:query_design	a	rdf:Class	;
	rdfs:label	"query design"	.

local:result_of_experiment	a	rdf:Class	;
	rdfs:label	"result of experiment"	.

local:experiment_over_synthetic_query_design	a	rdf:Class	;
	rdfs:label	"experiment over synthetic query design"	.

local:also	a	rdf:Class	;
	rdfs:label	"also"	.

local:algorithm	a	rdf:Class	;
	rdfs:label	"algorithm"	.

local:detect	a	rdf:Class	;
	rdfs:label	"detect"	.

local:equivalent_query_than_when_compare_with_purely_syntactic_method	a	rdf:Class	;
	rdfs:label	"equivalent query than when compare with purely syntactic method"	.

local:compare	a	rdf:Class	;
	rdfs:label	"compare"	.

local:equivalent_query	a	rdf:Class	;
	rdfs:label	"equivalent query"	.

local:purely_syntactic_method	a	rdf:Class	;
	rdfs:label	"purely syntactic method"	.

local:purely_syntactic	a	rdf:Class	;
	rdfs:label	"purely syntactic"	.

local:syntactic	a	rdf:Class	;
	rdfs:label	"syntactic"	.

local:purely	a	rdf:Class	;
	rdfs:label	"purely"	.

local:equivalent	a	rdf:Class	;
	rdfs:label	"equivalent"	.

local:syntactic_method	a	rdf:Class	;
	rdfs:label	"syntactic method"	.

local:when_compare	a	rdf:Class	;
	rdfs:label	"when compare"	.

local:when_compare_with_syntactic_method	a	rdf:Class	;
	rdfs:label	"when compare with syntactic method"	.

local:show	a	rdf:Class	;
	rdfs:label	"show"	.

local:algorithm_detect_more_equivalent_query_than_when_compare_with_purely_syntactic_method	a	rdf:Class	;
	rdfs:label	"algorithm detect more equivalent query than when compare with purely syntactic method"	.

local:more_equivalent_query	a	rdf:Class	;
	rdfs:label	"more equivalent query"	.

local:more_equivalent	a	rdf:Class	;
	rdfs:label	"more equivalent"	.

local:more	a	rdf:Class	;
	rdfs:label	"more"	.

local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	a	rdf:Class	;
	rdfs:label	"despite the fact that canonicalisation must be harder than the equivalence problem"	.

local:fact	a	rdf:Class	;
	rdfs:label	"fact"	.

local:equivalence_problem	a	rdf:Class	;
	rdfs:label	"equivalence problem"	.

local:problem	a	rdf:Class	;
	rdfs:label	"problem"	.

local:equivalence	a	rdf:Class	;
	rdfs:label	"equivalence"	.

local:must_harder	a	rdf:Class	;
	rdfs:label	"must harder"	.

local:harder	a	rdf:Class	;
	rdfs:label	"harder"	.

local:must_harder_than_equivalence_problem	a	rdf:Class	;
	rdfs:label	"must harder than equivalence problem"	.

local:realworld_query	a	rdf:Class	;
	rdfs:label	"realworld query"	.

local:realworld	a	rdf:Class	;
	rdfs:label	"realworld"	.

local:take	a	rdf:Class	;
	rdfs:label	"take"	.

local:sparql_endpoint_log	a	rdf:Class	;
	rdfs:label	"sparql endpoint log"	.

local:endpoint_log	a	rdf:Class	;
	rdfs:label	"endpoint log"	.

local:log	a	rdf:Class	;
	rdfs:label	"log"	.

local:sparql_endpoint	a	rdf:Class	;
	rdfs:label	"sparql endpoint"	.

local:endpoint	a	rdf:Class	;
	rdfs:label	"endpoint"	.

local:sparql	a	rdf:Class	;
	rdfs:label	"sparql"	.

local:algorithm_that_perform_syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query	a	rdf:Class	;
	rdfs:label	"algorithm that perform syntactic canonicalisation of sparql query such that the answer for the canonicalised query"	.

local:sparql_query	a	rdf:Class	;
	rdfs:label	"sparql query"	.

local:syntactic_canonicalisation	a	rdf:Class	;
	rdfs:label	"syntactic canonicalisation"	.

local:canonicalised_query	a	rdf:Class	;
	rdfs:label	"canonicalised query"	.

local:answer	a	rdf:Class	;
	rdfs:label	"answer"	.

local:canonicalised	a	rdf:Class	;
	rdfs:label	"canonicalised"	.

local:sparql_canonicalised_query	a	rdf:Class	;
	rdfs:label	"sparql canonicalised query"	.

local:syntactic_canonicalisation_of_sparql_canonicalised_query	a	rdf:Class	;
	rdfs:label	"syntactic canonicalisation of sparql canonicalised query"	.

local:answer_for_canonicalised_query	a	rdf:Class	;
	rdfs:label	"answer for canonicalised query"	.

local:not_change	a	rdf:Class	;
	rdfs:label	"not change"	.

local:will	a	rdf:Class	;
	rdfs:label	"will"	.

local:perform	a	rdf:Class	;
	rdfs:label	"perform"	.

local:syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original	a	rdf:Class	;
	rdfs:label	"syntactic canonicalisation of sparql query such that the answer for the canonicalised query will not change versus the original"	.

local:change	a	rdf:Class	;
	rdfs:label	"change"	.

local:will_not_change	a	rdf:Class	;
	rdfs:label	"will not change"	.

local:will_not_change_versus_original	a	rdf:Class	;
	rdfs:label	"will not change versus original"	.

local:original	a	rdf:Class	;
	rdfs:label	"original"	.

local:syntactic_canonicalisation_of_sparql_query	a	rdf:Class	;
	rdfs:label	"syntactic canonicalisation of sparql query"	.

local:answer_for_the_canonicalised_query	a	rdf:Class	;
	rdfs:label	"answer for the canonicalised query"	.

local:algorithm_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_query	a	rdf:Class	;
	rdfs:label	"algorithm such that the answer for the canonicalised query will not change versus the original to be practical for realworld query"	.

local:practical_for_realworld_query	a	rdf:Class	;
	rdfs:label	"practical for realworld query"	.

local:practical	a	rdf:Class	;
	rdfs:label	"practical"	.

local:guarantee	a	rdf:Class	;
	rdfs:label	"guarantee"	.

local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if	a	rdf:Class	;
	rdfs:label	"canonicalisation of two query within a core fragment of sparql be equal if"	.

local:core_fragment	a	rdf:Class	;
	rdfs:label	"core fragment"	.

local:fragment	a	rdf:Class	;
	rdfs:label	"fragment"	.

local:core	a	rdf:Class	;
	rdfs:label	"core"	.

local:two_query	a	rdf:Class	;
	rdfs:label	"two query"	.

local:canonicalisation_of_two_query	a	rdf:Class	;
	rdfs:label	"canonicalisation of two query"	.

local:canonicalisation_of_two_query_within_core_fragment	a	rdf:Class	;
	rdfs:label	"canonicalisation of two query within core fragment"	.

local:core_fragment_of_sparql	a	rdf:Class	;
	rdfs:label	"core fragment of sparql"	.

local:can	a	rdf:Class	;
	rdfs:label	"can"	.

local:support	a	rdf:Class	;
	rdfs:label	"support"	.

local:sparql_feature	a	rdf:Class	;
	rdfs:label	"sparql feature"	.

local:feature	a	rdf:Class	;
	rdfs:label	"feature"	.

local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if_the_two_query_be_equivalent_we_also_support_other_sparql_feature_but_with_a_weaker_soundness_guarantee_that_the_be_equivalent_to_the_input_query	a	rdf:Class	;
	rdfs:label	"canonicalisation of two query within a core fragment of sparql be equal if the two query be equivalent we also support other sparql feature but with a weaker soundness guarantee that the be equivalent to the input query"	.

local:weaker_soundness_guarantee	a	rdf:Class	;
	rdfs:label	"weaker soundness guarantee"	.

local:input_query	a	rdf:Class	;
	rdfs:label	"input query"	.

local:other_sparql_feature	a	rdf:Class	;
	rdfs:label	"other sparql feature"	.

local:soundness_guarantee	a	rdf:Class	;
	rdfs:label	"soundness guarantee"	.

local:other_sparql	a	rdf:Class	;
	rdfs:label	"other sparql"	.

local:input	a	rdf:Class	;
	rdfs:label	"input"	.

local:weaker_soundness	a	rdf:Class	;
	rdfs:label	"weaker soundness"	.

local:soundness	a	rdf:Class	;
	rdfs:label	"soundness"	.

local:other	a	rdf:Class	;
	rdfs:label	"other"	.

local:weaker	a	rdf:Class	;
	rdfs:label	"weaker"	.

local:also_support	a	rdf:Class	;
	rdfs:label	"also support"	.

local:but_with_weaker_soundness_guarantee	a	rdf:Class	;
	rdfs:label	"but with weaker soundness guarantee"	.

local:but	a	rdf:Class	;
	rdfs:label	"but"	.

local:equivalent_to_input_query	a	rdf:Class	;
	rdfs:label	"equivalent to input query"	.

local:propose	a	rdf:Class	;
	rdfs:label	"propose"	.

local:despite_this_complexity_in_this_paper	a	rdf:Class	;
	rdfs:label	"despite this complexity in this paper"	.

local:complexity	a	rdf:Class	;
	rdfs:label	"complexity"	.

local:paper	a	rdf:Class	;
	rdfs:label	"paper"	.

local:complexity_in_paper	a	rdf:Class	;
	rdfs:label	"complexity in paper"	.

local:query_feature	a	rdf:Class	;
	rdfs:label	"query feature"	.

local:make	a	rdf:Class	;
	rdfs:label	"make"	.

local:npcomplete	a	rdf:Class	;
	rdfs:label	"npcomplete"	.

local:add	a	rdf:Class	;
	rdfs:label	"add"	.

local:decide	a	rdf:Class	;
	rdfs:label	"decide"	.

local:equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature_make_the_problem_undecidable	a	rdf:Class	;
	rdfs:label	"equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature make the problem undecidable"	.

local:conjunctive_query	a	rdf:Class	;
	rdfs:label	"conjunctive query"	.

local:further_query_feature	a	rdf:Class	;
	rdfs:label	"further query feature"	.

local:conjunctive	a	rdf:Class	;
	rdfs:label	"conjunctive"	.

local:further_query	a	rdf:Class	;
	rdfs:label	"further query"	.

local:further	a	rdf:Class	;
	rdfs:label	"further"	.

local:where_add	a	rdf:Class	;
	rdfs:label	"where add"	.

local:two_conjunctive_query	a	rdf:Class	;
	rdfs:label	"two conjunctive query"	.

local:difficulty_of_detect_equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature	a	rdf:Class	;
	rdfs:label	"difficulty of detect equivalent query decide if two conjunctive query be equivalent be npcomplete where add further query feature"	.

local:difficulty	a	rdf:Class	;
	rdfs:label	"difficulty"	.

local:detect_equivalent_query	a	rdf:Class	;
	rdfs:label	"detect equivalent query"	.

local:detect_equivalent	a	rdf:Class	;
	rdfs:label	"detect equivalent"	.

local:complicate	a	rdf:Class	;
	rdfs:label	"complicate"	.

local:expressive_query_language_such_a_sparql	a	rdf:Class	;
	rdfs:label	"expressive query language such a sparql"	.

local:expressive_query_language	a	rdf:Class	;
	rdfs:label	"expressive query language"	.

local:expressive_query	a	rdf:Class	;
	rdfs:label	"expressive query"	.

local:language	a	rdf:Class	;
	rdfs:label	"language"	.

local:expressive	a	rdf:Class	;
	rdfs:label	"expressive"	.

local:query_language	a	rdf:Class	;
	rdfs:label	"query language"	.

local:such_sparql	a	rdf:Class	;
	rdfs:label	"such sparql"	.

#### Mapped Relations ####

local:equivalence_problem	owl:sameAs	cso:equivalence_problem	.
local:sparql	owl:sameAs	cso:sparql	.
cso:query_languages	rdfs:label	"query language"	.
cso:equivalence_problem	rdfs:label	"equivalence problem"	.
local:query_language	owl:sameAs	cso:query_languages	.
local:syntactic	owl:sameAs	cso:syntactics	.
cso:syntactics	rdfs:label	"syntactic"	.
cso:sparql	rdfs:label	"sparql"	.

#### Relations ####

local:s8.1	local:AM-MOD	local:will	.
local:result_of_experiment_over_synthetic_query_design_to_stresstest_the_canonicalisation_method_highlight_difficult_case	rdfs:member	local:canonicalisation_method_highlight	.
local:equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature_make_the_problem_undecidable	rdfs:member	local:conjunctive_query	.
local:s0.4	rdf:object	local:problem	.
local:synthetic_query_design	rdfs:member	local:synthetic_query	.
local:canonicalisation_method_highlight	rdfs:member	local:canonicalisation_method	.
local:s10.1	rdf:object	local:equivalent_query_than_when_compare_with_purely_syntactic_method	.
local:equivalent_to_input_query	rdfs:member	local:input_query	.
local:s10	rdf:predicate	local:show	.
local:s5	local:AM-MOD	local:can	.
local:but_with_weaker_soundness_guarantee	rdfs:member	local:but	.
local:equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature_make_the_problem_undecidable	rdfs:member	local:equivalent_query	.
local:difficulty_of_detect_equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature	rdfs:member	local:detect_equivalent_query	.
local:expressive_query_language_such_a_sparql	rdfs:member	local:sparql	.
local:detect_equivalent_query	rdfs:member	local:detect_equivalent	.
local:sparql_canonicalised_query	rdfs:subClassOf	local:canonicalised_query	.
local:canonicalisation_method	rdfs:member	local:canonicalisation	.
local:s2	rdf:object	local:syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original	.
local:s0.3	rdf:subject	local:npcomplete	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if	rdfs:member	local:sparql	.
local:difficult_case	rdfs:member	local:difficult	.
local:algorithm_that_perform_syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query	rdfs:member	local:algorithm	.
local:further_query	rdfs:subClassOf	local:query	.
local:syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original	rdfs:member	local:syntactic_canonicalisation	.
local:syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original	rdfs:member	local:answer	.
local:algorithm_detect_more_equivalent_query_than_when_compare_with_purely_syntactic_method	rdfs:member	local:algorithm	.
local:syntactic_method	rdfs:subClassOf	local:method	.
local:syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original	rdfs:member	local:sparql_query	.
local:s1	rdf:object	local:algorithm	.
local:synthetic_query_design	rdfs:subClassOf	local:query_design	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if_the_two_query_be_equivalent_we_also_support_other_sparql_feature_but_with_a_weaker_soundness_guarantee_that_the_be_equivalent_to_the_input_query	rdfs:member	local:input_query	.
local:canonicalisation_method	rdfs:subClassOf	local:method	.
local:s6.1	local:AM-MOD	local:will	.
local:s11.1	rdf:predicate	local:design	.
local:expressive_query	rdfs:member	local:expressive	.
local:other_sparql	rdfs:subClassOf	local:sparql	.
local:s1	local:AM-ADV	local:despite_this_complexity_in_this_paper	.
local:s2.1	rdf:subject	local:algorithm_that_perform_syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query	.
local:sparql_endpoint	rdfs:member	local:sparql	.
local:syntactic_canonicalisation	rdfs:member	local:syntactic	.
local:core_fragment	rdfs:subClassOf	local:fragment	.
local:canonicalised_query	rdfs:member	local:canonicalised	.
local:other_sparql_feature	rdfs:subClassOf	local:sparql_feature	.
local:answer_for_canonicalised_query	rdfs:member	local:answer	.
local:s4.1	rdf:predicate	local:support	.
local:other_sparql_feature	rdfs:member	local:other_sparql	.
local:equivalent_to_input_query	rdfs:member	local:equivalent	.
local:such_sparql	rdfs:subClassOf	local:sparql	.
local:algorithm_that_perform_syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query	rdfs:member	local:canonicalised_query	.
local:difficulty_of_detect_equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature	rdfs:member	local:conjunctive_query	.
local:detect_equivalent_query	rdfs:subClassOf	local:query	.
local:s0.1	rdf:object	local:equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature_make_the_problem_undecidable	.
local:algorithm_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_query	rdfs:member	local:answer	.
local:purely_syntactic	rdfs:member	local:purely	.
local:algorithm_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_query	rdfs:member	local:algorithm	.
local:canonicalisation_of_two_query	rdfs:member	local:canonicalisation	.
local:sparql_endpoint_log	rdfs:member	local:sparql_endpoint	.
local:s7	rdf:object	local:syntactic_canonicalisation_of_sparql_query	.
local:sparql_endpoint_log	rdfs:subClassOf	local:endpoint_log	.
local:s4	rdf:object	local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if_the_two_query_be_equivalent_we_also_support_other_sparql_feature_but_with_a_weaker_soundness_guarantee_that_the_be_equivalent_to_the_input_query	.
local:result_of_experiment_over_synthetic_query_design_to_stresstest_the_canonicalisation_method_highlight_difficult_case	rdfs:member	local:synthetic_query_design	.
local:s8.1	rdf:predicate	local:not_change	.
local:further_query	rdfs:member	local:further	.
local:equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature_make_the_problem_undecidable	rdfs:member	local:problem	.
local:s9	rdf:object	local:sparql_endpoint_log	.
local:weaker_soundness_guarantee	rdfs:subClassOf	local:guarantee	.
local:s4.1	rdf:subject	local:we	.
local:core_fragment	rdfs:member	local:core	.
local:input_query	rdfs:member	local:input	.
local:s7	rdf:subject	local:algorithm	.
local:syntactic_canonicalisation	rdfs:subClassOf	local:canonicalisation	.
local:more_equivalent	rdfs:member	local:more	.
local:s6	rdf:subject	local:we	.
local:s5	rdf:object	local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if	.
local:weaker_soundness	rdfs:member	local:weaker	.
local:equivalent_query	rdfs:member	local:equivalent	.
local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	rdfs:member	local:canonicalisation	.
local:other_sparql_feature	rdfs:subClassOf	local:feature	.
local:more_equivalent_query	rdfs:member	local:more_equivalent	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if_the_two_query_be_equivalent_we_also_support_other_sparql_feature_but_with_a_weaker_soundness_guarantee_that_the_be_equivalent_to_the_input_query	rdfs:member	local:query	.
local:canonicalisation_method_highlight_difficult_case	rdfs:member	local:canonicalisation_method_highlight	.
local:s0.2	rdf:subject	local:equivalent_query	.
local:query_language	rdfs:subClassOf	local:language	.
local:endpoint_log	rdfs:subClassOf	local:log	.
local:answer_for_the_canonicalised_query	rdfs:member	local:answer	.
local:s6.1	rdf:predicate	local:not_change	.
local:conjunctive_query	rdfs:member	local:conjunctive	.
local:s1	rdf:subject	local:we	.
local:practical_for_realworld_query	rdfs:member	local:realworld_query	.
local:s9	rdf:predicate	local:take	.
local:result_of_experiment	rdfs:member	local:experiment	.
local:syntactic_method	rdfs:member	local:syntactic	.
local:despite_this_complexity_in_this_paper	rdfs:member	local:complexity	.
local:will_not_change	rdfs:subClassOf	local:not_change	.
local:synthetic_query	rdfs:member	local:synthetic	.
local:syntactic_canonicalisation_of_sparql_canonicalised_query	rdfs:member	local:sparql_canonicalised_query	.
local:further_query_feature	rdfs:subClassOf	local:feature	.
local:synthetic_query_design	rdfs:subClassOf	local:design	.
local:sparql_query	rdfs:subClassOf	local:query	.
local:equivalent_query_than_when_compare_with_purely_syntactic_method	rdfs:member	local:purely_syntactic_method	.
local:stresstest_the_canonicalisation_method_highlight_difficult_case	rdfs:member	local:difficult_case	.
local:result_of_experiment_over_synthetic_query_design_to_stresstest_the_canonicalisation_method_highlight_difficult_case	rdfs:member	local:experiment	.
local:algorithm_detect_more_equivalent_query_than_when_compare_with_purely_syntactic_method	rdfs:member	local:compare	.
local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	rdfs:member	local:fact	.
local:s8	rdf:object	local:syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original	.
local:s8.1	rdf:subject	local:algorithm_that_perform_syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query	.
local:s11.2	rdf:predicate	local:stresstest	.
local:s0.1	rdf:predicate	local:detect	.
local:sparql_feature	rdfs:member	local:sparql	.
local:query_design	rdfs:member	local:query	.
local:canonicalised_query	rdfs:subClassOf	local:query	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if_the_two_query_be_equivalent_we_also_support_other_sparql_feature_but_with_a_weaker_soundness_guarantee_that_the_be_equivalent_to_the_input_query	rdfs:member	local:sparql	.
local:expressive_query_language	rdfs:subClassOf	local:query_language	.
local:s10	rdf:subject	local:we	.
local:must_harder_than_equivalence_problem	rdfs:member	local:equivalence_problem	.
local:s9	rdf:subject	local:realworld_query	.
local:core_fragment_of_sparql	rdfs:member	local:sparql	.
local:result_of_experiment_over_synthetic_query_design_to_stresstest_the_canonicalisation_method_highlight_difficult_case	rdfs:member	local:result	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if	rdfs:member	local:core_fragment	.
local:method_highlight_difficult_case	rdfs:subClassOf	local:highlight_difficult_case	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if_the_two_query_be_equivalent_we_also_support_other_sparql_feature_but_with_a_weaker_soundness_guarantee_that_the_be_equivalent_to_the_input_query	rdfs:member	local:weaker_soundness_guarantee	.
local:more_equivalent_query	rdfs:subClassOf	local:query	.
local:two_conjunctive_query	rdfs:subClassOf	local:conjunctive_query	.
local:algorithm_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_query	rdfs:member	local:canonicalised_query	.
local:s11.1	rdf:object	local:stresstest_the_canonicalisation_method_highlight_difficult_case	.
local:weaker_soundness_guarantee	rdfs:member	local:weaker_soundness	.
local:algorithm_detect_more_equivalent_query_than_when_compare_with_purely_syntactic_method	rdfs:member	local:purely_syntactic_method	.
local:when_compare_with_syntactic_method	rdfs:member	local:syntactic_method	.
local:endpoint_log	rdfs:member	local:endpoint	.
local:s11.3	rdf:object	local:difficult_case	.
local:equivalence_problem	rdfs:subClassOf	local:problem	.
local:s11.3	rdf:predicate	local:highlight	.
local:stresstest_the_canonicalisation_method_highlight_difficult_case	rdfs:member	local:canonicalisation_method_highlight	.
local:s5	rdf:predicate	local:guarantee	.
local:answer_for_canonicalised_query	rdfs:member	local:canonicalised_query	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if	rdfs:member	local:query	.
local:s4.1	local:AM-DIS	local:also	.
local:sparql_endpoint_log	rdfs:subClassOf	local:log	.
local:canonicalisation_method_highlight_difficult_case	rdfs:member	local:difficult_case	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if	rdfs:member	local:canonicalisation	.
local:s6	rdf:object	local:algorithm_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_query	.
local:core_fragment_of_sparql	rdfs:member	local:core_fragment	.
local:other_sparql	rdfs:member	local:other	.
local:query_feature	rdfs:subClassOf	local:feature	.
local:further_query_feature	rdfs:member	local:further_query	.
local:s0.1	rdf:subject	local:sparql	.
local:must_harder	rdfs:subClassOf	local:harder	.
local:soundness_guarantee	rdfs:subClassOf	local:guarantee	.
local:s10.1	rdf:subject	local:algorithm	.
local:s2.1	rdf:predicate	local:not_change	.
local:syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original	rdfs:member	local:canonicalised_query	.
local:complexity_in_paper	rdfs:member	local:complexity	.
local:purely_syntactic_method	rdfs:member	local:purely_syntactic	.
local:syntactic_canonicalisation_of_sparql_query	rdfs:member	local:sparql_query	.
local:s11.2	rdf:object	local:canonicalisation_method_highlight_difficult_case	.
local:s11	rdf:predicate	local:present	.
local:s10.1	rdf:predicate	local:detect	.
local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	rdfs:member	local:equivalence_problem	.
local:despite_this_complexity_in_this_paper	rdfs:member	local:paper	.
local:s11	rdf:object	local:result_of_experiment_over_synthetic_query_design_to_stresstest_the_canonicalisation_method_highlight_difficult_case	.
local:input_query	rdfs:subClassOf	local:query	.
local:s0.2	rdf:predicate	local:decide	.
local:canonicalisation_of_two_query_within_core_fragment	rdfs:member	local:core_fragment	.
local:when_compare	rdfs:subClassOf	local:compare	.
local:s11.3	rdf:subject	local:canonicalisation_method	.
local:two_query	rdfs:subClassOf	local:query	.
local:s11	rdf:subject	local:we	.
local:s8	rdf:subject	local:algorithm	.
local:query_language	rdfs:member	local:query	.
local:weaker_soundness_guarantee	rdfs:subClassOf	local:soundness_guarantee	.
local:algorithm_detect_more_equivalent_query_than_when_compare_with_purely_syntactic_method	rdfs:member	local:more_equivalent_query	.
local:also_support	rdfs:subClassOf	local:support	.
local:canonicalisation_method_highlight_difficult_case	rdfs:subClassOf	local:method_highlight_difficult_case	.
local:s8	rdf:predicate	local:perform	.
local:detect_equivalent	rdfs:member	local:detect	.
local:s11.1	rdf:subject	local:synthetic_query	.
local:equivalence_problem	rdfs:member	local:equivalence	.
local:sparql_feature	rdfs:subClassOf	local:feature	.
local:syntactic_canonicalisation_of_sparql_canonicalised_query	rdfs:member	local:syntactic_canonicalisation	.
local:expressive_query_language	rdfs:member	local:expressive_query	.
local:realworld_query	rdfs:subClassOf	local:query	.
local:equivalent_query	rdfs:subClassOf	local:query	.
local:equivalent_query_than_when_compare_with_purely_syntactic_method	rdfs:member	local:compare	.
local:more_equivalent	rdfs:subClassOf	local:equivalent	.
local:s1	rdf:predicate	local:propose	.
local:not_change	rdfs:subClassOf	local:change	.
local:result_of_experiment_over_synthetic_query_design_to_stresstest_the_canonicalisation_method_highlight_difficult_case	rdfs:member	local:difficult_case	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if_the_two_query_be_equivalent_we_also_support_other_sparql_feature_but_with_a_weaker_soundness_guarantee_that_the_be_equivalent_to_the_input_query	rdfs:member	local:canonicalisation	.
local:soundness_guarantee	rdfs:member	local:soundness	.
local:method_highlight	rdfs:member	local:method	.
local:s2.1	local:AM-MOD	local:will	.
local:will_not_change_versus_original	rdfs:member	local:will_not_change	.
local:complexity_in_paper	rdfs:member	local:paper	.
local:but_with_weaker_soundness_guarantee	rdfs:member	local:weaker_soundness_guarantee	.
local:expressive_query	rdfs:subClassOf	local:query	.
local:difficult_case	rdfs:subClassOf	local:case	.
local:s11.2	rdf:subject	local:synthetic_query	.
local:canonicalisation_method_highlight	rdfs:subClassOf	local:highlight	.
local:answer_for_the_canonicalised_query	rdfs:member	local:canonicalised_query	.
local:s4	rdf:predicate	local:guarantee	.
local:highlight_difficult_case	rdfs:subClassOf	local:difficult_case	.
local:algorithm_that_perform_syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query	rdfs:member	local:syntactic_canonicalisation	.
local:will_not_change_versus_original	rdfs:member	local:original	.
local:purely_syntactic_method	rdfs:subClassOf	local:method	.
local:s6	local:AM-ADV	local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	.
local:algorithm_that_perform_syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query	rdfs:member	local:sparql_query	.
local:canonicalisation_of_two_query	rdfs:member	local:two_query	.
local:s10	rdf:object	local:algorithm_detect_more_equivalent_query_than_when_compare_with_purely_syntactic_method	.
local:s0.3	rdf:object	local:query_feature	.
local:s0	rdf:predicate	local:complicate	.
local:result_of_experiment	rdfs:member	local:result	.
local:when_compare_with_syntactic_method	rdfs:member	local:when_compare	.
local:s10	local:AM-ADV	local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	.
local:s4	rdf:subject	local:we	.
local:query_design	rdfs:subClassOf	local:design	.
local:synthetic_query	rdfs:subClassOf	local:query	.
local:s0.4	rdf:subject	local:query_feature	.
local:conjunctive_query	rdfs:subClassOf	local:query	.
local:sparql_query	rdfs:member	local:sparql	.
local:query_feature	rdfs:member	local:query	.
local:weaker_soundness	rdfs:subClassOf	local:soundness	.
local:s0.4	rdf:predicate	local:make	.
local:canonicalisation_of_two_query_within_core_fragment	rdfs:member	local:canonicalisation_of_two_query	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if_the_two_query_be_equivalent_we_also_support_other_sparql_feature_but_with_a_weaker_soundness_guarantee_that_the_be_equivalent_to_the_input_query	rdfs:member	local:core_fragment	.
local:expressive_query_language	rdfs:subClassOf	local:language	.
local:algorithm_such_that_the_answer_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_query	rdfs:member	local:realworld_query	.
local:equivalent_query_than_when_compare_with_purely_syntactic_method	rdfs:member	local:equivalent_query	.
local:syntactic_canonicalisation_of_sparql_query	rdfs:member	local:syntactic_canonicalisation	.
local:s6	rdf:predicate	local:show	.
local:algorithm_that_perform_syntactic_canonicalisation_of_sparql_query_such_that_the_answer_for_the_canonicalised_query	rdfs:member	local:answer	.
local:purely_syntactic	rdfs:subClassOf	local:syntactic	.
local:s11	local:AM-DIS	local:also	.
local:s0	rdf:subject	local:difficulty_of_detect_equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature	.
local:must_harder_than_equivalence_problem	rdfs:member	local:must_harder	.
local:detect_equivalent	rdfs:subClassOf	local:equivalent	.
local:canonicalisation_of_two_query_within_a_core_fragment_of_sparql_be_equal_if_the_two_query_be_equivalent_we_also_support_other_sparql_feature_but_with_a_weaker_soundness_guarantee_that_the_be_equivalent_to_the_input_query	rdfs:member	local:other_sparql_feature	.
local:s4.1	rdf:object	local:sparql_feature	.
local:experiment_over_synthetic_query_design	rdfs:member	local:experiment	.
local:s2	rdf:predicate	local:perform	.
local:where_add	rdfs:subClassOf	local:add	.
local:difficulty_of_detect_equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature	rdfs:member	local:difficulty	.
local:method_highlight	rdfs:subClassOf	local:highlight	.
local:s0.3	rdf:predicate	local:add	.
local:s2	rdf:subject	local:algorithm	.
local:s5	rdf:subject	local:we	.
local:s6.1	rdf:subject	local:answer_for_the_canonicalised_query	.
local:s7	rdf:predicate	local:perform	.
local:sparql_endpoint	rdfs:subClassOf	local:endpoint	.
local:practical_for_realworld_query	rdfs:member	local:practical	.
local:further_query_feature	rdfs:subClassOf	local:query_feature	.
local:difficulty_of_detect_equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature	rdfs:member	local:further_query_feature	.
local:expressive_query_language_such_a_sparql	rdfs:member	local:expressive_query_language	.
local:s4	local:AM-MOD	local:can	.
local:equivalent_query_decide_if_two_conjunctive_query_be_equivalent_be_npcomplete_where_add_further_query_feature_make_the_problem_undecidable	rdfs:member	local:further_query_feature	.
local:realworld_query	rdfs:member	local:realworld	.
local:s0	rdf:object	local:expressive_query_language_such_a_sparql	.
local:experiment_over_synthetic_query_design	rdfs:member	local:synthetic_query_design	.
