@prefix	rdfs:	<http://www.w3.org/2000/01/rdf-schema#>	.
@prefix	local:	<http://local/local.owl#>	.
@prefix	cso:	<https://cso.kmi.open.ac.uk/topics/>	.
@prefix	rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>	.
@prefix	owl:	<http://www.w3.org/2002/07/owl#>	.

#### Statements ####

local:s11.3	a	rdf:Statement	;
	rdfs:label	"the canonicalisation method highlighting difficult cases"	.

local:s11.2	a	rdf:Statement	;
	rdfs:label	"synthetic queries stresstest the canonicalisation method highlighting difficult cases"	.

local:s11.1	a	rdf:Statement	;
	rdfs:label	"synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	.

local:s11	a	rdf:Statement	;
	rdfs:label	"we also present the results of experiments over synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	.

local:s10	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation of sparql queries"	.

local:s9.1	a	rdf:Statement	;
	rdfs:label	"an algorithm detects more equivalent queries than when compared with purely syntactic methods"	.

local:s9	a	rdf:Statement	;
	rdfs:label	"despite the fact that canonicalisation must be harder than the equivalence problem we show that an algorithm detects more equivalent queries than when compared with purely syntactic methods"	.

local:s8.1	a	rdf:Statement	;
	rdfs:label	"the answers for the canonicalised query will not change"	.

local:s8	a	rdf:Statement	;
	rdfs:label	"despite the fact that canonicalisation must be harder than the equivalence problem we show an algorithm such that the answers for the canonicalised query will not change versus the original to be practical for realworld queries"	.

local:s7	a	rdf:Statement	;
	rdfs:label	"realworld queries taken from sparql endpoint logs"	.

local:s6.2	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"	.

local:s6.1	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation sparql queries such that the answers for the canonicalised query will not change versus the original"	.

local:s6	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	.

local:s4	a	rdf:Statement	;
	rdfs:label	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if"	.

local:s3.1	a	rdf:Statement	;
	rdfs:label	"we also support other sparql features"	.

local:s3	a	rdf:Statement	;
	rdfs:label	"we can guarantee that the canonicalisation of two queries within a core fragment of sparql is equal if the two queries are equivalent we also support other sparql features but with a weaker soundness guarantee that the is equivalent to the input query"	.

local:s2	a	rdf:Statement	;
	rdfs:label	"despite this complexity in this paper we propose an algorithm"	.

local:s1.2	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change"	.

local:s1.1	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation sparql queries such that the answers for the canonicalised query will not change versus the original"	.

local:s1	a	rdf:Statement	;
	rdfs:label	"an algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	.

local:s0.4	a	rdf:Statement	;
	rdfs:label	"further query features makes the problem"	.

local:s0.3	a	rdf:Statement	;
	rdfs:label	"npcomplete where adding further query features"	.

local:s0.2	a	rdf:Statement	;
	rdfs:label	"deciding"	.

local:s0.1	a	rdf:Statement	;
	rdfs:label	"sparql detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features makes the problem undecidable"	.

local:s0	a	rdf:Statement	;
	rdfs:label	"expressive query languages such as sparql complicated by the difficulty of detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features makes the problem undecidable"	.


#### Classes ####

local:canonicalisation_method	a	rdf:Class	;
	rdfs:label	"canonicalisation method"	.

local:method	a	rdf:Class	;
	rdfs:label	"method"	.

local:canonicalisation	a	rdf:Class	;
	rdfs:label	"canonicalisation"	.

local:highlight	a	rdf:Class	;
	rdfs:label	"highlight"	.

local:difficult_cases	a	rdf:Class	;
	rdfs:label	"difficult cases"	.

local:difficult	a	rdf:Class	;
	rdfs:label	"difficult"	.

local:cases	a	rdf:Class	;
	rdfs:label	"cases"	.

local:synthetic_queries	a	rdf:Class	;
	rdfs:label	"synthetic queries"	.

local:synthetic	a	rdf:Class	;
	rdfs:label	"synthetic"	.

local:queries	a	rdf:Class	;
	rdfs:label	"queries"	.

local:stresstest	a	rdf:Class	;
	rdfs:label	"stresstest"	.

local:canonicalisation_method_highlighting_difficult_cases	a	rdf:Class	;
	rdfs:label	"canonicalisation method highlighting difficult cases"	.

local:canonicalisation_method_highlighting	a	rdf:Class	;
	rdfs:label	"canonicalisation method highlighting"	.

local:highlighting	a	rdf:Class	;
	rdfs:label	"highlighting"	.

local:design	a	rdf:Class	;
	rdfs:label	"design"	.

local:stresstest_the_canonicalisation_method_highlighting_difficult_cases	a	rdf:Class	;
	rdfs:label	"stresstest the canonicalisation method highlighting difficult cases"	.

local:we	a	rdf:Class	;
	rdfs:label	"we"	.

local:present	a	rdf:Class	;
	rdfs:label	"present"	.

local:results_of_experiments_over_synthetic_queries_designed_to_stresstest_the_canonicalisation_method_highlighting_difficult_cases	a	rdf:Class	;
	rdfs:label	"results of experiments over synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases"	.

local:results	a	rdf:Class	;
	rdfs:label	"results"	.

local:experiments	a	rdf:Class	;
	rdfs:label	"experiments"	.

local:results_of_experiments	a	rdf:Class	;
	rdfs:label	"results of experiments"	.

local:experiments_over_synthetic_queries	a	rdf:Class	;
	rdfs:label	"experiments over synthetic queries"	.

local:synthetic_queries_designed	a	rdf:Class	;
	rdfs:label	"synthetic queries designed"	.

local:designed	a	rdf:Class	;
	rdfs:label	"designed"	.

local:also	a	rdf:Class	;
	rdfs:label	"also"	.

local:algorithm	a	rdf:Class	;
	rdfs:label	"algorithm"	.

local:perform	a	rdf:Class	;
	rdfs:label	"perform"	.

local:syntactic_canonicalisation_of_sparql_queries	a	rdf:Class	;
	rdfs:label	"syntactic canonicalisation of sparql queries"	.

local:sparql_queries	a	rdf:Class	;
	rdfs:label	"sparql queries"	.

local:syntactic_canonicalisation	a	rdf:Class	;
	rdfs:label	"syntactic canonicalisation"	.

local:syntactic	a	rdf:Class	;
	rdfs:label	"syntactic"	.

local:sparql	a	rdf:Class	;
	rdfs:label	"sparql"	.

local:detect	a	rdf:Class	;
	rdfs:label	"detect"	.

local:equivalent_queries_than_when_compared_with_purely_syntactic_methods	a	rdf:Class	;
	rdfs:label	"equivalent queries than when compared with purely syntactic methods"	.

local:equivalent_queries	a	rdf:Class	;
	rdfs:label	"equivalent queries"	.

local:purely_syntactic_methods	a	rdf:Class	;
	rdfs:label	"purely syntactic methods"	.

local:syntactic_methods	a	rdf:Class	;
	rdfs:label	"syntactic methods"	.

local:methods	a	rdf:Class	;
	rdfs:label	"methods"	.

local:purely_syntactic	a	rdf:Class	;
	rdfs:label	"purely syntactic"	.

local:purely	a	rdf:Class	;
	rdfs:label	"purely"	.

local:equivalent	a	rdf:Class	;
	rdfs:label	"equivalent"	.

local:when_compared	a	rdf:Class	;
	rdfs:label	"when compared"	.

local:compared	a	rdf:Class	;
	rdfs:label	"compared"	.

local:when_compared_with_syntactic_methods	a	rdf:Class	;
	rdfs:label	"when compared with syntactic methods"	.

local:show	a	rdf:Class	;
	rdfs:label	"show"	.

local:algorithm_detects_more_equivalent_queries_than_when_compared_with_purely_syntactic_methods	a	rdf:Class	;
	rdfs:label	"algorithm detects more equivalent queries than when compared with purely syntactic methods"	.

local:algorithm_detects	a	rdf:Class	;
	rdfs:label	"algorithm detects"	.

local:more_equivalent_queries	a	rdf:Class	;
	rdfs:label	"more equivalent queries"	.

local:more_equivalent	a	rdf:Class	;
	rdfs:label	"more equivalent"	.

local:detects	a	rdf:Class	;
	rdfs:label	"detects"	.

local:more	a	rdf:Class	;
	rdfs:label	"more"	.

local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	a	rdf:Class	;
	rdfs:label	"despite the fact that canonicalisation must be harder than the equivalence problem"	.

local:fact	a	rdf:Class	;
	rdfs:label	"fact"	.

local:equivalence_problem	a	rdf:Class	;
	rdfs:label	"equivalence problem"	.

local:problem	a	rdf:Class	;
	rdfs:label	"problem"	.

local:equivalence	a	rdf:Class	;
	rdfs:label	"equivalence"	.

local:must_harder	a	rdf:Class	;
	rdfs:label	"must harder"	.

local:harder	a	rdf:Class	;
	rdfs:label	"harder"	.

local:must_harder_than_equivalence_problem	a	rdf:Class	;
	rdfs:label	"must harder than equivalence problem"	.

local:answers_for_the_canonicalised_query	a	rdf:Class	;
	rdfs:label	"answers for the canonicalised query"	.

local:answers	a	rdf:Class	;
	rdfs:label	"answers"	.

local:canonicalised_query	a	rdf:Class	;
	rdfs:label	"canonicalised query"	.

local:query	a	rdf:Class	;
	rdfs:label	"query"	.

local:canonicalised	a	rdf:Class	;
	rdfs:label	"canonicalised"	.

local:answers_for_canonicalised_query	a	rdf:Class	;
	rdfs:label	"answers for canonicalised query"	.

local:not_change	a	rdf:Class	;
	rdfs:label	"not change"	.

local:will	a	rdf:Class	;
	rdfs:label	"will"	.

local:algorithm_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_queries	a	rdf:Class	;
	rdfs:label	"algorithm such that the answers for the canonicalised query will not change versus the original to be practical for realworld queries"	.

local:realworld_queries	a	rdf:Class	;
	rdfs:label	"realworld queries"	.

local:realworld	a	rdf:Class	;
	rdfs:label	"realworld"	.

local:change	a	rdf:Class	;
	rdfs:label	"change"	.

local:will_not_change	a	rdf:Class	;
	rdfs:label	"will not change"	.

local:will_not_change_versus_original	a	rdf:Class	;
	rdfs:label	"will not change versus original"	.

local:original	a	rdf:Class	;
	rdfs:label	"original"	.

local:practical_for_realworld_queries	a	rdf:Class	;
	rdfs:label	"practical for realworld queries"	.

local:practical	a	rdf:Class	;
	rdfs:label	"practical"	.

local:take	a	rdf:Class	;
	rdfs:label	"take"	.

local:sparql_endpoint_logs	a	rdf:Class	;
	rdfs:label	"sparql endpoint logs"	.

local:sparql_endpoint	a	rdf:Class	;
	rdfs:label	"sparql endpoint"	.

local:endpoint	a	rdf:Class	;
	rdfs:label	"endpoint"	.

local:endpoint_logs	a	rdf:Class	;
	rdfs:label	"endpoint logs"	.

local:logs	a	rdf:Class	;
	rdfs:label	"logs"	.

local:algorithm_that_performs_syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query	a	rdf:Class	;
	rdfs:label	"algorithm that performs syntactic canonicalisation of sparql queries such that the answers for the canonicalised query"	.

local:answers_for_the_canonicalised_query_will_not_change_versus_the_original	a	rdf:Class	;
	rdfs:label	"answers for the canonicalised query will not change versus the original"	.

local:syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original	a	rdf:Class	;
	rdfs:label	"syntactic canonicalisation of sparql queries such that the answers for the canonicalised query will not change versus the original"	.

local:guarantee	a	rdf:Class	;
	rdfs:label	"guarantee"	.

local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if	a	rdf:Class	;
	rdfs:label	"canonicalisation of two queries within a core fragment of sparql is equal if"	.

local:core_fragment	a	rdf:Class	;
	rdfs:label	"core fragment"	.

local:core	a	rdf:Class	;
	rdfs:label	"core"	.

local:fragment	a	rdf:Class	;
	rdfs:label	"fragment"	.

local:two_queries	a	rdf:Class	;
	rdfs:label	"two queries"	.

local:canonicalisation_of_two_queries	a	rdf:Class	;
	rdfs:label	"canonicalisation of two queries"	.

local:two_queries_within_core_fragment	a	rdf:Class	;
	rdfs:label	"two queries within core fragment"	.

local:core_fragment_of_sparql	a	rdf:Class	;
	rdfs:label	"core fragment of sparql"	.

local:can	a	rdf:Class	;
	rdfs:label	"can"	.

local:support	a	rdf:Class	;
	rdfs:label	"support"	.

local:sparql_features	a	rdf:Class	;
	rdfs:label	"sparql features"	.

local:features	a	rdf:Class	;
	rdfs:label	"features"	.

local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if_the_two_queries_are_equivalent_we_also_support_other_sparql_features_but_with_a_weaker_soundness_guarantee_that_the_is_equivalent_to_the_input_query	a	rdf:Class	;
	rdfs:label	"canonicalisation of two queries within a core fragment of sparql is equal if the two queries are equivalent we also support other sparql features but with a weaker soundness guarantee that the is equivalent to the input query"	.

local:other_sparql_features	a	rdf:Class	;
	rdfs:label	"other sparql features"	.

local:input_query	a	rdf:Class	;
	rdfs:label	"input query"	.

local:weaker_soundness_guarantee	a	rdf:Class	;
	rdfs:label	"weaker soundness guarantee"	.

local:weaker_soundness	a	rdf:Class	;
	rdfs:label	"weaker soundness"	.

local:soundness	a	rdf:Class	;
	rdfs:label	"soundness"	.

local:other_sparql	a	rdf:Class	;
	rdfs:label	"other sparql"	.

local:other	a	rdf:Class	;
	rdfs:label	"other"	.

local:input	a	rdf:Class	;
	rdfs:label	"input"	.

local:soundness_guarantee	a	rdf:Class	;
	rdfs:label	"soundness guarantee"	.

local:weaker	a	rdf:Class	;
	rdfs:label	"weaker"	.

local:also_support	a	rdf:Class	;
	rdfs:label	"also support"	.

local:equivalent_to_input_query	a	rdf:Class	;
	rdfs:label	"equivalent to input query"	.

local:propose	a	rdf:Class	;
	rdfs:label	"propose"	.

local:despite_this_complexity_in_this_paper	a	rdf:Class	;
	rdfs:label	"despite this complexity in this paper"	.

local:paper	a	rdf:Class	;
	rdfs:label	"paper"	.

local:complexity	a	rdf:Class	;
	rdfs:label	"complexity"	.

local:complexity_in_paper	a	rdf:Class	;
	rdfs:label	"complexity in paper"	.

local:query_features	a	rdf:Class	;
	rdfs:label	"query features"	.

local:make	a	rdf:Class	;
	rdfs:label	"make"	.

local:npcomplete	a	rdf:Class	;
	rdfs:label	"npcomplete"	.

local:add	a	rdf:Class	;
	rdfs:label	"add"	.

local:decide	a	rdf:Class	;
	rdfs:label	"decide"	.

local:equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	a	rdf:Class	;
	rdfs:label	"equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features makes the problem undecidable"	.

local:further_query_features	a	rdf:Class	;
	rdfs:label	"further query features"	.

local:conjunctive_queries	a	rdf:Class	;
	rdfs:label	"conjunctive queries"	.

local:further_query	a	rdf:Class	;
	rdfs:label	"further query"	.

local:further	a	rdf:Class	;
	rdfs:label	"further"	.

local:conjunctive	a	rdf:Class	;
	rdfs:label	"conjunctive"	.

local:where_adding	a	rdf:Class	;
	rdfs:label	"where adding"	.

local:adding	a	rdf:Class	;
	rdfs:label	"adding"	.

local:two_conjunctive_queries	a	rdf:Class	;
	rdfs:label	"two conjunctive queries"	.

local:equivalent_queries_deciding	a	rdf:Class	;
	rdfs:label	"equivalent queries deciding"	.

local:difficulty_of_detecting_equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	a	rdf:Class	;
	rdfs:label	"difficulty of detecting equivalent queries deciding if two conjunctive queries are equivalent is npcomplete where adding further query features makes the problem undecidable"	.

local:difficulty	a	rdf:Class	;
	rdfs:label	"difficulty"	.

local:complicate	a	rdf:Class	;
	rdfs:label	"complicate"	.

local:expressive_query_languages_such_as_sparql	a	rdf:Class	;
	rdfs:label	"expressive query languages such_as sparql"	.

local:expressive_query_languages	a	rdf:Class	;
	rdfs:label	"expressive query languages"	.

local:languages	a	rdf:Class	;
	rdfs:label	"languages"	.

local:query_languages	a	rdf:Class	;
	rdfs:label	"query languages"	.

local:expressive_query	a	rdf:Class	;
	rdfs:label	"expressive query"	.

local:expressive	a	rdf:Class	;
	rdfs:label	"expressive"	.

#### Mapped Relations ####

local:query_languages	owl:sameAs	cso:query_languages	.
local:equivalence_problem	owl:sameAs	cso:equivalence_problem	.
local:sparql	owl:sameAs	cso:sparql	.
cso:sparql	rdfs:label	"sparql"	.
cso:syntactics	rdfs:label	"syntactic"	.
local:syntactic	owl:sameAs	cso:syntactics	.
cso:sparql_queries	rdfs:label	"sparql queries"	.
local:conjunctive_queries	owl:sameAs	cso:conjunctive_queries	.
cso:query_languages	rdfs:label	"query languages"	.
local:sparql_queries	owl:sameAs	cso:sparql_queries	.
cso:conjunctive_queries	rdfs:label	"conjunctive queries"	.
cso:equivalence_problem	rdfs:label	"equivalence problem"	.

#### Relations ####

local:difficult_cases	rdfs:subClassOf	local:cases	.
local:experiments_over_synthetic_queries	rdfs:member	local:experiments	.
local:algorithm_that_performs_syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query	rdfs:member	local:algorithm	.
local:s6.1	rdf:predicate	local:query	.
local:algorithm_detects_more_equivalent_queries_than_when_compared_with_purely_syntactic_methods	rdfs:member	local:more_equivalent_queries	.
local:query_languages	rdfs:subClassOf	local:languages	.
local:s11	rdf:subject	local:we	.
local:results_of_experiments_over_synthetic_queries_designed_to_stresstest_the_canonicalisation_method_highlighting_difficult_cases	rdfs:member	local:results	.
local:endpoint_logs	rdfs:subClassOf	local:logs	.
local:equivalence_problem	rdfs:member	local:equivalence	.
local:endpoint_logs	rdfs:member	local:endpoint	.
local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	rdfs:member	local:fact	.
local:other_sparql	rdfs:member	local:other	.
local:s0.1	rdf:object	local:equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	.
local:equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:equivalent_queries	.
local:sparql_features	rdfs:subClassOf	local:features	.
local:equivalent_queries_deciding	rdfs:member	local:s0.2	.
local:s4	rdf:subject	local:we	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if_the_two_queries_are_equivalent_we_also_support_other_sparql_features_but_with_a_weaker_soundness_guarantee_that_the_is_equivalent_to_the_input_query	rdfs:member	local:core_fragment	.
local:not_change	rdfs:subClassOf	local:change	.
local:s1.2	local:AM-MOD	local:will	.
local:two_conjunctive_queries	rdfs:subClassOf	local:conjunctive_queries	.
local:s0.3	rdf:subject	local:npcomplete	.
local:expressive_query	rdfs:member	local:expressive	.
local:s11	local:AM-DIS	local:also	.
local:syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original	rdfs:member	local:answers	.
local:s3.1	local:AM-DIS	local:also	.
local:s0	rdf:object	local:expressive_query_languages_such_as_sparql	.
local:s9	rdf:object	local:algorithm_detects_more_equivalent_queries_than_when_compared_with_purely_syntactic_methods	.
local:s6.2	local:AM-MOD	local:will	.
local:s3	rdf:subject	local:we	.
local:complexity_in_paper	rdfs:member	local:complexity	.
local:s3.1	rdf:object	local:sparql_features	.
local:equivalent_queries_deciding	rdfs:member	local:equivalent_queries	.
local:s11.1	rdf:subject	local:synthetic_queries	.
local:algorithm_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_queries	rdfs:member	local:canonicalised_query	.
local:results_of_experiments	rdfs:member	local:experiments	.
local:sparql_queries	rdfs:member	local:sparql	.
local:other_sparql	rdfs:subClassOf	local:sparql	.
local:answers_for_the_canonicalised_query	rdfs:member	local:canonicalised_query	.
local:syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original	rdfs:member	local:sparql_queries	.
local:more_equivalent_queries	rdfs:subClassOf	local:queries	.
local:s2	rdf:subject	local:we	.
local:s8.1	local:AM-MOD	local:will	.
local:canonicalisation_of_two_queries	rdfs:member	local:two_queries	.
local:syntactic_canonicalisation_of_sparql_queries	rdfs:member	local:syntactic_canonicalisation	.
local:s7	rdf:subject	local:realworld_queries	.
local:s9	local:AM-ADV	local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	.
local:canonicalisation_method	rdfs:member	local:canonicalisation	.
local:difficulty_of_detecting_equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:equivalent_queries	.
local:answers_for_canonicalised_query	rdfs:member	local:answers	.
local:s8	rdf:subject	local:we	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if_the_two_queries_are_equivalent_we_also_support_other_sparql_features_but_with_a_weaker_soundness_guarantee_that_the_is_equivalent_to_the_input_query	rdfs:member	local:canonicalisation	.
local:synthetic_queries	rdfs:subClassOf	local:queries	.
local:more_equivalent	rdfs:member	local:more	.
local:complexity_in_paper	rdfs:member	local:paper	.
local:further_query_features	rdfs:subClassOf	local:features	.
local:s9.1	rdf:subject	local:algorithm	.
local:soundness_guarantee	rdfs:subClassOf	local:guarantee	.
local:s0.4	rdf:predicate	local:make	.
local:purely_syntactic	rdfs:member	local:purely	.
local:will_not_change_versus_original	rdfs:member	local:original	.
local:further_query	rdfs:subClassOf	local:query	.
local:realworld_queries	rdfs:subClassOf	local:queries	.
local:s6.2	rdf:predicate	local:not_change	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if_the_two_queries_are_equivalent_we_also_support_other_sparql_features_but_with_a_weaker_soundness_guarantee_that_the_is_equivalent_to_the_input_query	rdfs:member	local:sparql	.
local:s8	local:AM-ADV	local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	.
local:s0.1	rdf:predicate	local:detect	.
local:s0	rdf:predicate	local:complicate	.
local:more_equivalent	rdfs:subClassOf	local:equivalent	.
local:s8	rdf:object	local:algorithm_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_queries	.
local:s3	local:AM-MOD	local:can	.
local:expressive_query_languages	rdfs:member	local:expressive_query	.
local:s4	rdf:predicate	local:guarantee	.
local:s11	rdf:predicate	local:present	.
local:s11.1	rdf:predicate	local:design	.
local:s6.2	rdf:subject	local:algorithm_that_performs_syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query	.
local:two_queries_within_core_fragment	rdfs:member	local:core_fragment	.
local:s3	rdf:object	local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if_the_two_queries_are_equivalent_we_also_support_other_sparql_features_but_with_a_weaker_soundness_guarantee_that_the_is_equivalent_to_the_input_query	.
local:s11.3	rdf:predicate	local:highlight	.
local:must_harder_than_equivalence_problem	rdfs:member	local:must_harder	.
local:weaker_soundness_guarantee	rdfs:subClassOf	local:guarantee	.
local:s8.1	rdf:subject	local:answers_for_the_canonicalised_query	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if	rdfs:member	local:canonicalisation	.
local:equivalence_problem	rdfs:subClassOf	local:problem	.
local:s10	rdf:predicate	local:perform	.
local:algorithm_detects	rdfs:member	local:algorithm	.
local:syntactic_canonicalisation_of_sparql_queries	rdfs:member	local:sparql_queries	.
local:answers_for_the_canonicalised_query	rdfs:member	local:answers	.
local:sparql_endpoint_logs	rdfs:member	local:sparql_endpoint	.
local:input_query	rdfs:member	local:input	.
local:s11	rdf:object	local:results_of_experiments_over_synthetic_queries_designed_to_stresstest_the_canonicalisation_method_highlighting_difficult_cases	.
local:s8.1	rdf:predicate	local:not_change	.
local:canonicalisation_method_highlighting	rdfs:member	local:highlighting	.
local:realworld_queries	rdfs:member	local:realworld	.
local:s10	rdf:subject	local:algorithm	.
local:s1.2	rdf:subject	local:algorithm_that_performs_syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query	.
local:soundness_guarantee	rdfs:member	local:soundness	.
local:sparql_queries	rdfs:subClassOf	local:queries	.
local:equivalent_to_input_query	rdfs:member	local:input_query	.
local:equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:npcomplete	.
local:s9	rdf:predicate	local:show	.
local:more_equivalent_queries	rdfs:member	local:more_equivalent	.
local:input_query	rdfs:subClassOf	local:query	.
local:s3	rdf:predicate	local:guarantee	.
local:s9	rdf:subject	local:we	.
local:algorithm_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_queries	rdfs:member	local:algorithm	.
local:canonicalisation_method_highlighting	rdfs:member	local:canonicalisation_method	.
local:weaker_soundness_guarantee	rdfs:member	local:weaker_soundness	.
local:s1.2	rdf:predicate	local:not_change	.
local:s6	rdf:subject	local:algorithm	.
local:purely_syntactic_methods	rdfs:subClassOf	local:methods	.
local:query_languages	rdfs:member	local:query	.
local:sparql_endpoint	rdfs:subClassOf	local:endpoint	.
local:canonicalised_query	rdfs:subClassOf	local:query	.
local:s6	rdf:object	local:syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original	.
local:algorithm_that_performs_syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query	rdfs:member	local:answers	.
local:s7	rdf:predicate	local:take	.
local:core_fragment_of_sparql	rdfs:member	local:sparql	.
local:must_harder_than_equivalence_problem	rdfs:member	local:equivalence_problem	.
local:s1.1	rdf:predicate	local:query	.
local:practical_for_realworld_queries	rdfs:member	local:realworld_queries	.
local:s0.1	rdf:subject	local:sparql	.
local:results_of_experiments_over_synthetic_queries_designed_to_stresstest_the_canonicalisation_method_highlighting_difficult_cases	rdfs:member	local:difficult_cases	.
local:stresstest_the_canonicalisation_method_highlighting_difficult_cases	rdfs:member	local:difficult_cases	.
local:synthetic_queries_designed	rdfs:member	local:synthetic_queries	.
local:syntactic_canonicalisation	rdfs:member	local:syntactic	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if	rdfs:member	local:sparql	.
local:s1	rdf:predicate	local:perform	.
local:s0.4	rdf:object	local:problem	.
local:s11.2	rdf:object	local:canonicalisation_method_highlighting_difficult_cases	.
local:s6	rdf:predicate	local:perform	.
local:difficulty_of_detecting_equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:npcomplete	.
local:syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original	rdfs:member	local:canonicalised_query	.
local:results_of_experiments_over_synthetic_queries_designed_to_stresstest_the_canonicalisation_method_highlighting_difficult_cases	rdfs:member	local:synthetic_queries	.
local:synthetic_queries	rdfs:member	local:synthetic	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if	rdfs:member	local:core_fragment	.
local:s8	rdf:predicate	local:show	.
local:s2	rdf:object	local:algorithm	.
local:despite_this_complexity_in_this_paper	rdfs:member	local:paper	.
local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	rdfs:member	local:canonicalisation	.
local:syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original	rdfs:member	local:syntactic_canonicalisation	.
local:despite_this_complexity_in_this_paper	rdfs:member	local:complexity	.
local:s0.3	rdf:predicate	local:add	.
local:conjunctive_queries	rdfs:member	local:conjunctive	.
local:algorithm_that_performs_syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query	rdfs:member	local:sparql_queries	.
local:s9.1	rdf:object	local:equivalent_queries_than_when_compared_with_purely_syntactic_methods	.
local:s2	rdf:predicate	local:propose	.
local:algorithm_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_queries	rdfs:member	local:realworld_queries	.
local:sparql_endpoint	rdfs:member	local:sparql	.
local:answers_for_the_canonicalised_query_will_not_change_versus_the_original	rdfs:member	local:answers	.
local:will_not_change	rdfs:subClassOf	local:not_change	.
local:s11.3	rdf:object	local:difficult_cases	.
local:expressive_query_languages_such_as_sparql	rdfs:member	local:expressive_query_languages	.
local:s11.1	rdf:object	local:stresstest_the_canonicalisation_method_highlighting_difficult_cases	.
local:syntactic_methods	rdfs:subClassOf	local:methods	.
local:equivalent_to_input_query	rdfs:member	local:equivalent	.
local:results_of_experiments	rdfs:member	local:results	.
local:answers_for_canonicalised_query	rdfs:member	local:canonicalised_query	.
local:query_features	rdfs:subClassOf	local:features	.
local:equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:problem	.
local:s7	rdf:object	local:sparql_endpoint_logs	.
local:canonicalisation_method_highlighting_difficult_cases	rdfs:member	local:canonicalisation_method	.
local:expressive_query_languages_such_as_sparql	rdfs:member	local:sparql	.
local:s3.1	rdf:predicate	local:support	.
local:equivalent_queries	rdfs:member	local:equivalent	.
local:when_compared_with_syntactic_methods	rdfs:member	local:when_compared	.
local:s4	local:AM-MOD	local:can	.
local:weaker_soundness	rdfs:subClassOf	local:soundness	.
local:other_sparql_features	rdfs:subClassOf	local:sparql_features	.
local:sparql_endpoint_logs	rdfs:subClassOf	local:endpoint_logs	.
local:canonicalisation_of_two_queries	rdfs:member	local:canonicalisation	.
local:difficulty_of_detecting_equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:further_query_features	.
local:must_harder	rdfs:subClassOf	local:harder	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if_the_two_queries_are_equivalent_we_also_support_other_sparql_features_but_with_a_weaker_soundness_guarantee_that_the_is_equivalent_to_the_input_query	rdfs:member	local:weaker_soundness_guarantee	.
local:further_query_features	rdfs:member	local:further_query	.
local:difficult_cases	rdfs:member	local:difficult	.
local:s11.3	rdf:subject	local:canonicalisation_method	.
local:synthetic_queries_designed	rdfs:member	local:designed	.
local:algorithm_that_performs_syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query	rdfs:member	local:canonicalised_query	.
local:canonicalisation_method	rdfs:subClassOf	local:method	.
local:answers_for_the_canonicalised_query_will_not_change_versus_the_original	rdfs:member	local:canonicalised_query	.
local:expressive_query_languages	rdfs:subClassOf	local:query_languages	.
local:s11.2	rdf:subject	local:synthetic_queries	.
local:equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:further_query_features	.
local:algorithm_detects	rdfs:subClassOf	local:detects	.
local:algorithm_detects_more_equivalent_queries_than_when_compared_with_purely_syntactic_methods	rdfs:member	local:purely_syntactic_methods	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if	rdfs:member	local:queries	.
local:s2	local:AM-ADV	local:despite_this_complexity_in_this_paper	.
local:conjunctive_queries	rdfs:subClassOf	local:queries	.
local:core_fragment	rdfs:member	local:core	.
local:two_queries_within_core_fragment	rdfs:member	local:two_queries	.
local:difficulty_of_detecting_equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:problem	.
local:s1	rdf:subject	local:algorithm	.
local:s6.1	rdf:object	local:answers_for_the_canonicalised_query_will_not_change_versus_the_original	.
local:experiments_over_synthetic_queries	rdfs:member	local:synthetic_queries	.
local:practical_for_realworld_queries	rdfs:member	local:practical	.
local:other_sparql_features	rdfs:member	local:other_sparql	.
local:s11.2	rdf:predicate	local:stresstest	.
local:difficulty_of_detecting_equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:difficulty	.
local:when_compared	rdfs:subClassOf	local:compared	.
local:where_adding	rdfs:subClassOf	local:adding	.
local:canonicalised_query	rdfs:member	local:canonicalised	.
local:expressive_query_languages	rdfs:subClassOf	local:languages	.
local:equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:conjunctive_queries	.
local:despite_the_fact_that_canonicalisation_must_be_harder_than_the_equivalence_problem	rdfs:member	local:equivalence_problem	.
local:core_fragment	rdfs:subClassOf	local:fragment	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if_the_two_queries_are_equivalent_we_also_support_other_sparql_features_but_with_a_weaker_soundness_guarantee_that_the_is_equivalent_to_the_input_query	rdfs:member	local:other_sparql_features	.
local:syntactic_canonicalisation	rdfs:subClassOf	local:canonicalisation	.
local:expressive_query	rdfs:subClassOf	local:query	.
local:purely_syntactic	rdfs:subClassOf	local:syntactic	.
local:s0.3	rdf:object	local:query_features	.
local:when_compared_with_syntactic_methods	rdfs:member	local:syntactic_methods	.
local:equivalent_queries	rdfs:subClassOf	local:queries	.
local:weaker_soundness_guarantee	rdfs:subClassOf	local:soundness_guarantee	.
local:s10	rdf:object	local:syntactic_canonicalisation_of_sparql_queries	.
local:two_queries	rdfs:subClassOf	local:queries	.
local:syntactic_methods	rdfs:member	local:syntactic	.
local:s4	rdf:object	local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if	.
local:algorithm_that_performs_syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query	rdfs:member	local:syntactic_canonicalisation	.
local:stresstest_the_canonicalisation_method_highlighting_difficult_cases	rdfs:member	local:canonicalisation_method	.
local:algorithm_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original_to_be_practical_for_realworld_queries	rdfs:member	local:answers	.
local:s1.1	rdf:subject	local:sparql	.
local:results_of_experiments_over_synthetic_queries_designed_to_stresstest_the_canonicalisation_method_highlighting_difficult_cases	rdfs:member	local:experiments	.
local:will_not_change_versus_original	rdfs:member	local:will_not_change	.
local:s0	rdf:subject	local:difficulty_of_detecting_equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	.
local:s3.1	rdf:subject	local:we	.
local:results_of_experiments_over_synthetic_queries_designed_to_stresstest_the_canonicalisation_method_highlighting_difficult_cases	rdfs:member	local:canonicalisation_method	.
local:sparql_endpoint_logs	rdfs:subClassOf	local:logs	.
local:further_query	rdfs:member	local:further	.
local:equivalent_queries_than_when_compared_with_purely_syntactic_methods	rdfs:member	local:purely_syntactic_methods	.
local:sparql_features	rdfs:member	local:sparql	.
local:s9.1	rdf:predicate	local:detect	.
local:s0.2	rdf:predicate	local:decide	.
local:equivalent_queries_than_when_compared_with_purely_syntactic_methods	rdfs:member	local:equivalent_queries	.
local:also_support	rdfs:subClassOf	local:support	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if_the_two_queries_are_equivalent_we_also_support_other_sparql_features_but_with_a_weaker_soundness_guarantee_that_the_is_equivalent_to_the_input_query	rdfs:member	local:input_query	.
local:weaker_soundness	rdfs:member	local:weaker	.
local:difficulty_of_detecting_equivalent_queries_deciding_if_two_conjunctive_queries_are_equivalent_is_npcomplete_where_adding_further_query_features_makes_the_problem_undecidable	rdfs:member	local:conjunctive_queries	.
local:query_features	rdfs:member	local:query	.
local:canonicalisation_method_highlighting_difficult_cases	rdfs:member	local:difficult_cases	.
local:canonicalisation_of_two_queries_within_a_core_fragment_of_sparql_is_equal_if_the_two_queries_are_equivalent_we_also_support_other_sparql_features_but_with_a_weaker_soundness_guarantee_that_the_is_equivalent_to_the_input_query	rdfs:member	local:queries	.
local:core_fragment_of_sparql	rdfs:member	local:core_fragment	.
local:s1	rdf:object	local:syntactic_canonicalisation_of_sparql_queries_such_that_the_answers_for_the_canonicalised_query_will_not_change_versus_the_original	.
local:s1.1	rdf:object	local:answers_for_the_canonicalised_query_will_not_change_versus_the_original	.
local:algorithm_detects_more_equivalent_queries_than_when_compared_with_purely_syntactic_methods	rdfs:member	local:algorithm_detects	.
local:s0.4	rdf:subject	local:query_features	.
local:s6.1	rdf:subject	local:sparql	.
local:other_sparql_features	rdfs:subClassOf	local:features	.
local:further_query_features	rdfs:subClassOf	local:query_features	.
local:purely_syntactic_methods	rdfs:member	local:purely_syntactic	.
