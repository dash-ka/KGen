Caching in the context of expressive query languages such as SPARQL is complicated by the difficulty of detecting equivalent queries deciding if two conjunctive queries are equivalent is NPcomplete where adding further query features makes the problem undecidable
an algorithm that performs syntactic canonicalisation of SPARQL queries such that the answers for the canonicalised query will not change versus the original
Despite this complexity in this paper we propose an algorithm
We can guarantee that the canonicalisation of two queries within a core fragment of SPARQL is equal if the two queries are equivalent We also support other SPARQL features but with a weaker soundness guarantee that the is equivalent to the input query
We can guarantee that the canonicalisation of two queries within a core fragment of SPARQL is equal if
the canonicalised query
an algorithm that performs syntactic canonicalisation of SPARQL queries such that the answers for the canonicalised query will not change versus the original
realworld queries taken from SPARQL endpoint logs
Despite the fact that canonicalisation must be harder than the equivalence problem we show an algorithm such that the answers for the canonicalised query will not change versus the original to be practical for realworld queries
Despite the fact that canonicalisation must be harder than the equivalence problem we show that an algorithm detects more equivalent queries than when compared with purely syntactic methods
an algorithm that performs syntactic canonicalisation of SPARQL queries
We also present the results of experiments over synthetic queries designed to stresstest the canonicalisation method highlighting difficult cases