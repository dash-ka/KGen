OPTIONAL is a key feature in SPARQL for dealing with missing information
this operator complexity which can make efficient evaluation of queries with OPTIONAL challenging
While this operator is used extensively this operator is also known for this operator complexity
setting where the data is stored in a SQL relational database
We tackle this problem in the OntologyBased Data Access  OBDA  setting
setting where the data is exposed as a virtual RDF graph by means of an R2RML mapping
We start with a succinct translation of a SPARQL fragment into SQL
a succinct translation of a SPARQL fragment fully respects threevalued logic and relies on the extensive use of the LEFT JOIN operator function
a succinct translation of a SPARQL fragment fully respects bag semantics and relies on the extensive use of the LEFT JOIN COALESCE function
a succinct translation of a SPARQL fragment fully respects bag semantics and relies on the extensive use of the LEFT JOIN operator function
a succinct translation of a SPARQL fragment fully respects threevalued logic and relies on the extensive use of the LEFT JOIN COALESCE function
We then propose optimisation techniques for improving the structure of generated SQL queries
We then propose optimisation techniques for reducing the size
We optimisations capture interactions between JOIN the LEFT JOIN integrity constraints such as uniqueness
We optimisations capture interactions between JOIN the LEFT JOIN COALESCE
We optimisations capture interactions between JOIN the LEFT JOIN integrity constraints such as attribute nullability
We optimisations capture interactions between JOIN the LEFT JOIN integrity constraints such as foreign key constraints
Finally We empirically verify effectiveness of We techniques on the BSBM OBDA benchmark