following the design rules of linked data the number of available sparql endpoints is quickly growing however because of the lack of adaptivity query executions may frequently be unsuccessful
available sparql endpoints that support remote query processing
fixed plans identified following the traditional optimizethenexecute paradigm
first fixed plans may timeout as a consequence of endpoint availability
second because blocking operators are usually implemented endpoint query engines are not able to incrementally produce results
second because blocking operators are usually implemented endpoint query engines may become blocked if data sources stop sending data
sparql endpoints that adapts query execution schedulers to data availability
sparql endpoints that adapts query execution schedulers to runtime conditions
we present an adaptive query engine for sparql endpoints
we present anapsid
anapsid provides physical sparql operators
opportunistically the operators produce results as quickly as data arrives from the sources
physical sparql operators that detect when data traffic is bursty
physical sparql operators that detect when a source becomes blocked
additionally anapsid operators implement main memory replacement policies to move previously computed matches to secondary memory avoiding duplicates
we compared anapsid performance with respect to rdf stores and endpoints and observed that anapsid speeds up execution time in some cases in more than one order of magnitude