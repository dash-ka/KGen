knowledge graphs such as wikidata are created by a range of sources leaving contributors prone to two types of errors
knowledge graphs such as wikidata are created by a diversity of contributors leaving contributors prone to two types of errors
the first type of error  is addressed by property graphs through the representation of validity making triples occur as firstorder objects in subject position of metadata triples
the first type of error  is addressed by property graphs through the representation of provenance making triples occur as firstorder objects in subject position of metadata triples
falsity of facts is addressed by property graphs through the representation of validity making triples occur as firstorder objects in subject position of metadata triples
falsity of facts is addressed by property graphs through the representation of provenance making triples occur as firstorder objects in subject position of metadata triples
violation of domain constraints has not been addressed with regard to property graphs so far
the second type of error  has not been addressed with regard to property graphs so far
in rdf representations this error can be addressed by shape languages such as shex
shacl which allow for checking whether graphs are valid with respect to a set of domain constraints
in rdf representations this error can be addressed by shape languages such as shacl
shex which allow for checking whether graphs are valid with respect to a set of domain constraints
borrowing ideas from the semantics definitions of shacl we design a shape language for property graphs progs such as keyvalue annotations to both nodes and edges
borrowing ideas from the semantics definitions of shacl we design a shape language for property graphs progs such as edges with identities
semantics definitions of shacl specific constructs
progs which allows for formulating shape constraints on property graphs
borrowing ideas from the syntax definitions of shacl we design a shape language for property graphs progs such as keyvalue annotations to both nodes and edges
property graphs
borrowing ideas from the syntax
borrowing ideas from the syntax definitions of shacl we design a shape language for property graphs progs such as edges with identities
progs which allows for formulating shape constraints on
we define a formal semantics of progs investigate the resulting complexity of validating property graphs against sets of progs shapes implement a prototypical validator
a prototypical validator that utilizes answer
answer set programming
we define a formal semantics of progs investigate the resulting complexity of validating property graphs against sets of progs shapes compare with corresponding results for shacl