a lowcost serverside interface when high numbers of clients need to evaluate sparql queries
recently triple pattern fragments were introduced as a lowcost serverside interface
scalability is achieved by moving part of the query execution to the client at the cost of elevated query times
since the triple pattern fragments interface purposely does not support complex constructs such as sparql filters queries need to be executed mostly on the client resulting in long execution times
queries that use sparql filters
we therefore investigated the impact of adding a literal substring matching feature to the triple pattern fragments interface with the goal of improving query performance while maintaining low server cost
in this paper we discuss the clientserver setup
in this paper we compare the performance of sparql queries on multiple implementations including caseinsensitive fmindex
in this paper we compare the performance of sparql queries on multiple implementations including elastic search
we evaluations indicate that these improvements allow for faster query execution without significantly increasing the load on the server
offering the substring feature on triple pattern fragment servers allows users to obtain faster responses for filterbased sparql queries
furthermore substring matching can be used to support other filters such as complete regular expressions
furthermore substring matching can be used to support other filters such as range queries