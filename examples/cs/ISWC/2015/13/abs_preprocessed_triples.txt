s10.1	"the formal semantics for the defeasible mappings strongly related to the idea of answer sets for logic programs"
s10.1	"the formal semantics for the defeasible mappings strongly related to the idea of answer sets for logic programs"	rdf:subject	"formal semantics for the defeasible mapping"
s10.1	"formal semantics for the defeasible mapping"	rdfs:member	"defeasible mapping"
s10.1	"formal semantics for the defeasible mapping"	rdfs:member	"formal semantics"
s10.1	"formal semantics"	rdfs:subClassOf	"semantics"
s10.1	"defeasible mapping"	rdfs:subClassOf	"mapping"
s10.1	"formal semantics"	rdfs:member	"formal"
s10.1	"defeasible mapping"	rdfs:member	"defeasible"
s10.1	"formal semantics for defeasible mapping"	rdfs:member	"formal semantics"
s10.1	"formal semantics for defeasible mapping"	rdfs:member	"defeasible mapping"
s10.1	"the formal semantics for the defeasible mappings strongly related to the idea of answer sets for logic programs"	rdf:predicate	"relate"
s10.1	"the formal semantics for the defeasible mappings strongly related to the idea of answer sets for logic programs"	rdf:object	"idea of answer set for logic program"
s10.1	"idea of answer set for logic program"	rdfs:member	"logic program"
s10.1	"idea of answer set for logic program"	rdfs:member	"answer"
s10.1	"idea of answer set for logic program"	rdfs:member	"idea"
s10.1	"logic program"	rdfs:member	"logic"
s10.1	"logic program"	rdfs:subClassOf	"program"
s10.1	"answer set"	rdfs:subClassOf	"set"
s10.1	"idea of answer set"	rdfs:member	"idea"
s10.1	"idea of answer set"	rdfs:member	"answer set"
s10.1	"answer set for logic program"	rdfs:member	"answer set"
s10.1	"answer set for logic program"	rdfs:member	"logic program"
s10.1	"the formal semantics for the defeasible mappings strongly related to the idea of answer sets for logic programs"	local:AM-MNR	"strongly"
s10	"we show that the formal semantics for the defeasible mappings actually is strongly related to the idea of answer sets for logic programs"
s10	"we show that the formal semantics for the defeasible mappings actually is strongly related to the idea of answer sets for logic programs"	rdf:subject	"we"
s10	"we show that the formal semantics for the defeasible mappings actually is strongly related to the idea of answer sets for logic programs"	rdf:predicate	"show"
s10	"we show that the formal semantics for the defeasible mappings actually is strongly related to the idea of answer sets for logic programs"	rdf:object	"formal semantics for the defeasible mapping actually be strongly relate to the idea of answer set for logic program"
s10	"formal semantics for the defeasible mapping actually be strongly relate to the idea of answer set for logic program"	rdfs:member	"defeasible mapping"
s10	"formal semantics for the defeasible mapping actually be strongly relate to the idea of answer set for logic program"	rdfs:member	"logic program"
s10	"formal semantics for the defeasible mapping actually be strongly relate to the idea of answer set for logic program"	rdfs:member	"answer"
s10	"formal semantics for the defeasible mapping actually be strongly relate to the idea of answer set for logic program"	rdfs:member	"formal semantics"
s10	"formal semantics for the defeasible mapping actually be strongly relate to the idea of answer set for logic program"	rdfs:member	"idea"
s10	"defeasible mapping"	rdfs:member	"defeasible"
s10	"logic program"	rdfs:subClassOf	"program"
s10	"formal semantics"	rdfs:member	"formal"
s10	"formal semantics"	rdfs:subClassOf	"semantics"
s10	"logic program"	rdfs:member	"logic"
s10	"defeasible mapping"	rdfs:subClassOf	"mapping"
s10	"answer set"	rdfs:subClassOf	"set"
s10	"strongly relate"	rdfs:subClassOf	"relate"
s10	"actually strongly relate"	rdfs:subClassOf	"strongly relate"
s10	"formal semantics for defeasible mapping"	rdfs:member	"formal semantics"
s10	"formal semantics for defeasible mapping"	rdfs:member	"defeasible mapping"
s10	"actually strongly relate to idea"	rdfs:member	"actually strongly relate"
s10	"actually strongly relate to idea"	rdfs:member	"idea"
s10	"idea of answer set"	rdfs:member	"idea"
s10	"idea of answer set"	rdfs:member	"answer set"
s10	"answer set for logic program"	rdfs:member	"answer set"
s10	"answer set for logic program"	rdfs:member	"logic program"
s9.1	"the defeasible axioms apply to unknowns"
s9.1	"the defeasible axioms apply to unknowns"	rdf:subject	"defeasible axiom"
s9.1	"defeasible axiom"	rdfs:subClassOf	"axiom"
s9.1	"defeasible axiom"	rdfs:member	"defeasible"
s9.1	"the defeasible axioms apply to unknowns"	rdf:predicate	"apply"
s9.1	"the defeasible axioms apply to unknowns"	rdf:object	"unknown"
s9	"we show that reasoning under such a setting is decidable even when the defeasible axioms apply to unknowns"
s9	"we show that reasoning under such a setting is decidable even when the defeasible axioms apply to unknowns"	rdf:subject	"we"
s9	"we show that reasoning under such a setting is decidable even when the defeasible axioms apply to unknowns"	rdf:predicate	"show"
s9	"we show that reasoning under such a setting is decidable even when the defeasible axioms apply to unknowns"	rdf:object	"reason under such a set be decidable even when the defeasible axiom apply to unknown"
s9	"reason under such a set be decidable even when the defeasible axiom apply to unknown"	rdfs:member	"set"
s9	"reason under such a set be decidable even when the defeasible axiom apply to unknown"	rdfs:member	"reason"
s9	"reason under such a set be decidable even when the defeasible axiom apply to unknown"	rdfs:member	"defeasible axiom apply"
s9	"axiom apply"	rdfs:subClassOf	"apply"
s9	"defeasible axiom apply"	rdfs:member	"defeasible axiom"
s9	"defeasible axiom"	rdfs:subClassOf	"axiom"
s9	"defeasible axiom apply"	rdfs:subClassOf	"apply"
s9	"axiom apply"	rdfs:member	"axiom"
s9	"defeasible axiom"	rdfs:member	"defeasible"
s9	"when apply"	rdfs:subClassOf	"apply"
s9	"even when"	rdfs:subClassOf	"when"
s9	"reason under set"	rdfs:member	"reason"
s9	"reason under set"	rdfs:member	"set"
s9	"when apply to unknown"	rdfs:member	"when apply"
s9	"when apply to unknown"	rdfs:member	"unknown"
s8	"we provide the formal semantics for the defeasible mappings"
s8	"we provide the formal semantics for the defeasible mappings"	rdf:subject	"we"
s8	"we provide the formal semantics for the defeasible mappings"	rdf:predicate	"provide"
s8	"we provide the formal semantics for the defeasible mappings"	rdf:object	"formal semantics for the defeasible mapping"
s8	"formal semantics for the defeasible mapping"	rdfs:member	"defeasible mapping"
s8	"formal semantics for the defeasible mapping"	rdfs:member	"formal semantics"
s8	"formal semantics"	rdfs:subClassOf	"semantics"
s8	"defeasible mapping"	rdfs:subClassOf	"mapping"
s8	"formal semantics"	rdfs:member	"formal"
s8	"defeasible mapping"	rdfs:member	"defeasible"
s8	"formal semantics for defeasible mapping"	rdfs:member	"formal semantics"
s8	"formal semantics for defeasible mapping"	rdfs:member	"defeasible mapping"
s7	"questions can then asked in terms of the concepts in the overarching ontology"
s7	"questions can then asked in terms of the concepts in the overarching ontology"	rdf:subject	"question"
s7	"questions can then asked in terms of the concepts in the overarching ontology"	rdf:predicate	"ask"
s7	"questions can then asked in terms of the concepts in the overarching ontology"	rdf:object	"concept term"
s7	"concept term"	rdfs:subClassOf	"term"
s7	"concept term"	rdfs:member	"concept"
s7	"questions can then asked in terms of the concepts in the overarching ontology"	local:AM-LOC	"overarch ontology"
s7	"overarch ontology"	rdfs:member	"overarch"
s7	"overarch ontology"	rdfs:subClassOf	"ontology"
s7	"questions can then asked in terms of the concepts in the overarching ontology"	local:AM-MOD	"can"
s7	"questions can then asked in terms of the concepts in the overarching ontology"	local:AM-TMP	"then"
s6	"we consider the case"
s6	"we consider the case"	rdf:subject	"we"
s6	"we consider the case"	rdf:predicate	"consider"
s6	"we consider the case"	rdf:object	"case"
s4.1	"this avoiding logical inconsistencies"
s4.1	"this avoiding logical inconsistencies"	rdf:subject	"this"
s4.1	"this avoiding logical inconsistencies"	rdf:predicate	"avoid"
s4.1	"this avoiding logical inconsistencies"	rdf:object	"logical inconsistency"
s4.1	"logical inconsistency"	rdfs:member	"logical"
s4.1	"logical inconsistency"	rdfs:subClassOf	"inconsistency"
s4	"this provides the advantage of avoiding logical inconsistencies"
s4	"this provides the advantage of avoiding logical inconsistencies"	rdf:subject	"this"
s4	"this provides the advantage of avoiding logical inconsistencies"	rdf:predicate	"provide"
s4	"this provides the advantage of avoiding logical inconsistencies"	rdf:object	"advantage avoid logical inconsistency"
s4	"advantage avoid logical inconsistency"	rdfs:member	"avoid logical inconsistency"
s4	"advantage avoid logical inconsistency"	rdfs:member	"advantage"
s4	"avoid logical"	rdfs:subClassOf	"logical"
s4	"logical inconsistency"	rdfs:subClassOf	"inconsistency"
s4	"logical inconsistency"	rdfs:member	"logical"
s4	"avoid logical"	rdfs:member	"avoid"
s4	"avoid logical inconsistency"	rdfs:subClassOf	"inconsistency"
s4	"avoid logical inconsistency"	rdfs:member	"avoid logical"
s3	"logical inconsistencies that may caused due to the traditional type of mappings"
s3	"logical inconsistencies that may caused due to the traditional type of mappings"	rdf:subject	"logical inconsistency"
s3	"logical inconsistency"	rdfs:member	"logical"
s3	"logical inconsistency"	rdfs:subClassOf	"inconsistency"
s3	"logical inconsistencies that may caused due to the traditional type of mappings"	rdf:predicate	"cause"
s3	"logical inconsistencies that may caused due to the traditional type of mappings"	local:AM-CAU	"due to the traditional type of mapping"
s3	"due to the traditional type of mapping"	rdfs:member	"traditional type"
s3	"due to the traditional type of mapping"	rdfs:member	"mapping"
s3	"traditional type"	rdfs:member	"traditional"
s3	"traditional type"	rdfs:subClassOf	"type"
s3	"traditional type of mapping"	rdfs:member	"traditional type"
s3	"traditional type of mapping"	rdfs:member	"mapping"
s3	"logical inconsistencies that may caused due to the traditional type of mappings"	local:AM-MOD	"may"
s2.1	"handling exceptions automatically"
s2.1	"handling exceptions automatically"	rdf:subject	"exception automatically"
s2.1	"automatically exception"	rdfs:subClassOf	"exception"
s2.1	"handling exceptions automatically"	rdf:predicate	"handle"
s2	"this provides the advantage of handling exceptions automatically"
s2	"this provides the advantage of handling exceptions automatically"	rdf:subject	"this"
s2	"this provides the advantage of handling exceptions automatically"	rdf:predicate	"provide"
s2	"this provides the advantage of handling exceptions automatically"	rdf:object	"advantage of handle exception automatically"
s2	"advantage of handle exception automatically"	rdfs:member	"handle exception"
s2	"advantage of handle exception automatically"	rdfs:member	"advantage"
s2	"handle exception"	rdfs:subClassOf	"exception"
s2	"handle exception"	rdfs:member	"handle"
s2	"automatically advantage"	rdfs:subClassOf	"advantage"
s1.1	"we a novel approach denote mappings between elbased ontologies"
s1.1	"we a novel approach denote mappings between elbased ontologies"	rdf:subject	"novel approach"
s1.1	"novel approach"	rdfs:subClassOf	"approach"
s1.1	"novel approach"	rdfs:member	"novel"
s1.1	"we a novel approach denote mappings between elbased ontologies"	rdf:predicate	"denote"
s1.1	"we a novel approach denote mappings between elbased ontologies"	rdf:object	"mapping between elbased ontology"
s1.1	"elbased ontology"	rdfs:subClassOf	"ontology"
s1.1	"mapping between elbased ontology"	rdfs:member	"mapping"
s1.1	"mapping between elbased ontology"	rdfs:member	"elbased ontology"
s1	"we present a novel approach to denote mappings between elbased ontologies"
s1	"we present a novel approach to denote mappings between elbased ontologies"	rdf:subject	"we"
s1	"we present a novel approach to denote mappings between elbased ontologies"	rdf:predicate	"present"
s1	"we present a novel approach to denote mappings between elbased ontologies"	rdf:object	"novel approach to denote mapping between elbased ontology"
s1	"novel approach to denote mapping between elbased ontology"	rdfs:member	"ontology"
s1	"novel approach to denote mapping between elbased ontology"	rdfs:member	"novel approach"
s1	"novel approach"	rdfs:subClassOf	"approach"
s1	"novel approach"	rdfs:member	"novel"
s1	"elbased ontology"	rdfs:subClassOf	"ontology"
s1	"mapping between elbased ontology"	rdfs:member	"mapping"
s1	"mapping between elbased ontology"	rdfs:member	"elbased ontology"
s0	"such a mapping only applies to individuals if this does not because an inconsistency"
s0	"such a mapping only applies to individuals if this does not because an inconsistency"	rdf:subject	"map"
s0	"such a mapping only applies to individuals if this does not because an inconsistency"	rdf:predicate	"apply"
s0	"such a mapping only applies to individuals if this does not because an inconsistency"	rdf:object	"individual"
s0	"such a mapping only applies to individuals if this does not because an inconsistency"	local:AM-ADV	"only"
s0	"such a mapping only applies to individuals if this does not because an inconsistency"	local:AM-ADV	"inconsistency"
