s16	"we also present a proofofconcept evaluation of this last approach"
s16	"we also present a proofofconcept evaluation of this last approach"	rdf:subject	"we"
s16	"we also present a proofofconcept evaluation of this last approach"	rdf:predicate	"present"
s16	"we also present a proofofconcept evaluation of this last approach"	rdf:object	"proofofconcept evaluation of this last approach"
s16	"proofofconcept evaluation of this last approach"	rdfs:member	"proofofconcept evaluation"
s16	"proofofconcept evaluation of this last approach"	rdfs:member	"last approach"
s16	"last approach"	rdfs:subClassOf	"approach"
s16	"proofofconcept evaluation"	rdfs:member	"proofofconcept"
s16	"proofofconcept evaluation"	rdfs:subClassOf	"evaluation"
s16	"last approach"	rdfs:member	"last"
s16	"proofofconcept evaluation of last approach"	rdfs:member	"proofofconcept evaluation"
s16	"proofofconcept evaluation of last approach"	rdfs:member	"last approach"
s16	"we also present a proofofconcept evaluation of this last approach"	local:AM-DIS	"also"
s15.2	"dealing with recursive fragments of shacl without the need for an external solver"
s15.2	"dealing with recursive fragments of shacl without the need for an external solver"	rdf:subject	"recursive fragments of shacl without the need for an external solver"
s15.2	"recursive fragments of shacl without the need for an external solver"	rdfs:member	"external solver"
s15.2	"recursive fragments of shacl without the need for an external solver"	rdfs:member	"need"
s15.2	"recursive fragments of shacl without the need for an external solver"	rdfs:member	"shacl"
s15.2	"recursive fragments of shacl without the need for an external solver"	rdfs:member	"recursive fragments"
s15.2	"external solver"	rdfs:subClassOf	"solver"
s15.2	"recursive fragments"	rdfs:subClassOf	"fragments"
s15.2	"external solver"	rdfs:member	"external"
s15.2	"recursive fragments"	rdfs:member	"recursive"
s15.2	"recursive fragments of shacl"	rdfs:member	"recursive fragments"
s15.2	"recursive fragments of shacl"	rdfs:member	"shacl"
s15.2	"recursive fragments of shacl without need"	rdfs:member	"recursive fragments of shacl"
s15.2	"recursive fragments of shacl without need"	rdfs:member	"need"
s15.2	"need for external solver"	rdfs:member	"need"
s15.2	"need for external solver"	rdfs:member	"external solver"
s15.2	"dealing with recursive fragments of shacl without the need for an external solver"	rdf:predicate	"deal"
s15.1	"the process can optimized when dealing with recursive fragments of shacl without the need for an external solver"
s15.1	"the process can optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdf:subject	"process"
s15.1	"the process can optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdf:predicate	"optimize"
s15.1	"the process can optimized when dealing with recursive fragments of shacl without the need for an external solver"	local:AM-MOD	"can"
s15.1	"the process can optimized when dealing with recursive fragments of shacl without the need for an external solver"	local:AM-TMP	"dealing with recursive fragments of shacl without the need for an external solver"
s15	"finally we show that the process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"
s15	"finally we show that the process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdf:subject	"we"
s15	"finally we show that the process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdf:predicate	"show"
s15	"finally we show that the process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdf:object	"process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"
s15	"process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdfs:member	"external solver"
s15	"process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdfs:member	"need"
s15	"process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdfs:member	"process"
s15	"process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdfs:member	"shacl"
s15	"process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdfs:member	"recursive fragments"
s15	"external solver"	rdfs:subClassOf	"solver"
s15	"recursive fragments"	rdfs:subClassOf	"fragments"
s15	"external solver"	rdfs:member	"external"
s15	"recursive fragments"	rdfs:member	"recursive"
s15	"when dealing"	rdfs:subClassOf	"dealing"
s15	"can optimized"	rdfs:subClassOf	"optimized"
s15	"when dealing with recursive fragments"	rdfs:member	"when dealing"
s15	"when dealing with recursive fragments"	rdfs:member	"recursive fragments"
s15	"recursive fragments of shacl"	rdfs:member	"recursive fragments"
s15	"recursive fragments of shacl"	rdfs:member	"shacl"
s15	"when dealing with recursive fragments without need"	rdfs:member	"when dealing with recursive fragments"
s15	"when dealing with recursive fragments without need"	rdfs:member	"need"
s15	"need for external solver"	rdfs:member	"need"
s15	"need for external solver"	rdfs:member	"external solver"
s15	"finally we show that the process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	local:AM-TMP	"Finally"
s14.2	"dealing with tractable fragments of shacl without the need for an external solver"
s14.2	"dealing with tractable fragments of shacl without the need for an external solver"	rdf:subject	"tractable fragments of shacl without the need for an external solver"
s14.2	"tractable fragments of shacl without the need for an external solver"	rdfs:member	"tractable fragments"
s14.2	"tractable fragments of shacl without the need for an external solver"	rdfs:member	"need"
s14.2	"tractable fragments of shacl without the need for an external solver"	rdfs:member	"shacl"
s14.2	"tractable fragments of shacl without the need for an external solver"	rdfs:member	"external solver"
s14.2	"tractable fragments"	rdfs:subClassOf	"fragments"
s14.2	"external solver"	rdfs:subClassOf	"solver"
s14.2	"external solver"	rdfs:member	"external"
s14.2	"tractable fragments"	rdfs:member	"tractable"
s14.2	"tractable fragments of shacl"	rdfs:member	"tractable fragments"
s14.2	"tractable fragments of shacl"	rdfs:member	"shacl"
s14.2	"tractable fragments of shacl without need"	rdfs:member	"tractable fragments of shacl"
s14.2	"tractable fragments of shacl without need"	rdfs:member	"need"
s14.2	"need for external solver"	rdfs:member	"need"
s14.2	"need for external solver"	rdfs:member	"external solver"
s14.2	"dealing with tractable fragments of shacl without the need for an external solver"	rdf:predicate	"deal"
s14.1	"the process can optimized when dealing with tractable fragments of shacl without the need for an external solver"
s14.1	"the process can optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdf:subject	"process"
s14.1	"the process can optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdf:predicate	"optimize"
s14.1	"the process can optimized when dealing with tractable fragments of shacl without the need for an external solver"	local:AM-MOD	"can"
s14.1	"the process can optimized when dealing with tractable fragments of shacl without the need for an external solver"	local:AM-TMP	"dealing with tractable fragments of shacl without the need for an external solver"
s14	"finally we show that the process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"
s14	"finally we show that the process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdf:subject	"we"
s14	"finally we show that the process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdf:predicate	"show"
s14	"finally we show that the process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdf:object	"process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"
s14	"process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdfs:member	"external solver"
s14	"process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdfs:member	"need"
s14	"process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdfs:member	"process"
s14	"process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdfs:member	"shacl"
s14	"process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdfs:member	"tractable fragments"
s14	"tractable fragments"	rdfs:subClassOf	"fragments"
s14	"external solver"	rdfs:subClassOf	"solver"
s14	"external solver"	rdfs:member	"external"
s14	"tractable fragments"	rdfs:member	"tractable"
s14	"when dealing"	rdfs:subClassOf	"dealing"
s14	"can optimized"	rdfs:subClassOf	"optimized"
s14	"when dealing with tractable fragments"	rdfs:member	"when dealing"
s14	"when dealing with tractable fragments"	rdfs:member	"tractable fragments"
s14	"tractable fragments of shacl"	rdfs:member	"tractable fragments"
s14	"tractable fragments of shacl"	rdfs:member	"shacl"
s14	"when dealing with tractable fragments without need"	rdfs:member	"when dealing with tractable fragments"
s14	"when dealing with tractable fragments without need"	rdfs:member	"need"
s14	"need for external solver"	rdfs:member	"need"
s14	"need for external solver"	rdfs:member	"external solver"
s14	"finally we show that the process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	local:AM-TMP	"Finally"
s13	"propositional formulas that passed to a sat solver"
s13	"propositional formulas that passed to a sat solver"	rdf:subject	"propositional formulas"
s13	"propositional formulas"	rdfs:member	"propositional"
s13	"propositional formulas"	rdfs:subClassOf	"formulas"
s13	"propositional formulas that passed to a sat solver"	rdf:predicate	"pass"
s13	"propositional formulas that passed to a sat solver"	rdf:object	"SAT solver"
s13	"sat solver"	rdfs:subClassOf	"solver"
s13	"sat solver"	rdfs:member	"sat"
s12.1	"we propose a strategy"
s12.1	"we propose a strategy"	rdf:subject	"we"
s12.1	"we propose a strategy"	rdf:predicate	"propose"
s12.1	"we propose a strategy"	rdf:object	"strategy"
s12	"the problem shown to be nphard we propose a strategy"
s12	"the problem shown to be nphard we propose a strategy"	rdf:subject	"problem"
s12	"the problem shown to be nphard we propose a strategy"	rdf:predicate	"show"
s11.2	"a strategy that build a set of propositional formulas"
s11.2	"a strategy that build a set of propositional formulas"	rdf:subject	"strategy"
s11.2	"a strategy that build a set of propositional formulas"	rdf:predicate	"build"
s11.2	"a strategy that build a set of propositional formulas"	rdf:object	"set of propositional formulas"
s11.2	"set of propositional formulas"	rdfs:member	"set"
s11.2	"set of propositional formulas"	rdfs:member	"propositional formulas"
s11.2	"propositional formulas"	rdfs:member	"propositional"
s11.2	"propositional formulas"	rdfs:subClassOf	"formulas"
s11.2	"set of propositional formulas"	rdfs:member	"set"
s11.2	"set of propositional formulas"	rdfs:member	"propositional formulas"
s11.1	"using the answers to build a set of propositional formulas"
s11.1	"using the answers to build a set of propositional formulas"	rdf:subject	"answers"
s11.1	"using the answers to build a set of propositional formulas"	rdf:predicate	"use"
s11.1	"using the answers to build a set of propositional formulas"	rdf:object	"build a set of propositional formulas"
s11.1	"build a set of propositional formulas"	rdfs:member	"set"
s11.1	"build a set of propositional formulas"	rdfs:member	"propositional formulas"
s11.1	"propositional formulas"	rdfs:member	"propositional"
s11.1	"propositional formulas"	rdfs:subClassOf	"formulas"
s11.1	"set of propositional formulas"	rdfs:member	"set"
s11.1	"set of propositional formulas"	rdfs:member	"propositional formulas"
s11	"a strategy that consists in using the answers to build a set of propositional formulas"
s11	"a strategy that consists in using the answers to build a set of propositional formulas"	rdf:subject	"strategy"
s11	"a strategy that consists in using the answers to build a set of propositional formulas"	rdf:predicate	"consist"
s11	"a strategy that consists in using the answers to build a set of propositional formulas"	rdf:object	"using the answers to build a set of propositional formulas"
s10.1	"evaluating a small number of sparql queries over the endpoint"
s10.1	"evaluating a small number of sparql queries over the endpoint"	rdf:subject	"small number of sparql queries over the endpoint"
s10.1	"small number of sparql queries over the endpoint"	rdfs:member	"endpoint"
s10.1	"small number of sparql queries over the endpoint"	rdfs:member	"small number"
s10.1	"small number of sparql queries over the endpoint"	rdfs:member	"sparql queries"
s10.1	"sparql queries"	rdfs:member	"sparql"
s10.1	"small number"	rdfs:member	"small"
s10.1	"small number"	rdfs:subClassOf	"number"
s10.1	"sparql queries"	rdfs:subClassOf	"queries"
s10.1	"small number of sparql queries"	rdfs:member	"small number"
s10.1	"small number of sparql queries"	rdfs:member	"sparql queries"
s10.1	"small number of sparql queries over endpoint"	rdfs:member	"small number of sparql queries"
s10.1	"small number of sparql queries over endpoint"	rdfs:member	"endpoint"
s10.1	"evaluating a small number of sparql queries over the endpoint"	rdf:predicate	"evaluate"
s10	"a strategy that consists in evaluating a small number of sparql queries over the endpoint"
s10	"a strategy that consists in evaluating a small number of sparql queries over the endpoint"	rdf:subject	"strategy"
s10	"a strategy that consists in evaluating a small number of sparql queries over the endpoint"	rdf:predicate	"consist"
s10	"a strategy that consists in evaluating a small number of sparql queries over the endpoint"	rdf:object	"evaluating a small number of sparql queries over the endpoint"
s9.1	"validating a graph through a single query"
s9.1	"validating a graph through a single query"	rdf:subject	"graph"
s9.1	"validating a graph through a single query"	rdf:predicate	"validate"
s9.1	"validating a graph through a single query"	rdf:object	"single query"
s9.1	"single query"	rdfs:member	"single"
s9.1	"single query"	rdfs:subClassOf	"query"
s9	"we first investigate the possibility of validating a graph through a single query for nonrecursive constraints"
s9	"we first investigate the possibility of validating a graph through a single query for nonrecursive constraints"	rdf:subject	"we"
s9	"we first investigate the possibility of validating a graph through a single query for nonrecursive constraints"	rdf:predicate	"investigate"
s9	"we first investigate the possibility of validating a graph through a single query for nonrecursive constraints"	rdf:object	"possibility of validating a graph through a single query for nonrecursive constraints"
s9	"possibility of validating a graph through a single query for nonrecursive constraints"	rdfs:member	"graph"
s9	"possibility of validating a graph through a single query for nonrecursive constraints"	rdfs:member	"possibility"
s9	"possibility of validating a graph through a single query for nonrecursive constraints"	rdfs:member	"single query"
s9	"possibility of validating a graph through a single query for nonrecursive constraints"	rdfs:member	"nonrecursive constraints"
s9	"single query"	rdfs:member	"single"
s9	"single query"	rdfs:subClassOf	"query"
s9	"nonrecursive constraints"	rdfs:subClassOf	"constraints"
s9	"nonrecursive constraints"	rdfs:member	"nonrecursive"
s9	"validating through single query"	rdfs:member	"validating"
s9	"validating through single query"	rdfs:member	"single query"
s9	"single query for nonrecursive constraints"	rdfs:member	"single query"
s9	"single query for nonrecursive constraints"	rdfs:member	"nonrecursive constraints"
s9	"we first investigate the possibility of validating a graph through a single query for nonrecursive constraints"	local:AM-TMP	"first"
s8	"a shacl schema which can executed over a sparql endpoint"
s8	"a shacl schema which can executed over a sparql endpoint"	rdf:subject	"shacl schema"
s8	"shacl schema"	rdfs:subClassOf	"schema"
s8	"shacl schema"	rdfs:member	"shacl"
s8	"a shacl schema which can executed over a sparql endpoint"	rdf:predicate	"execute"
s8	"a shacl schema which can executed over a sparql endpoint"	rdf:object	"sparql endpoint"
s8	"sparql endpoint"	rdfs:subClassOf	"endpoint"
s8	"sparql endpoint"	rdfs:member	"sparql"
s8	"a shacl schema which can executed over a sparql endpoint"	local:AM-MOD	"can"
s7.1	"algorithms validating a graph against a shacl schema"
s7.1	"algorithms validating a graph against a shacl schema"	rdf:subject	"algorithms"
s7.1	"algorithms validating a graph against a shacl schema"	rdf:predicate	"validate"
s7.1	"algorithms validating a graph against a shacl schema"	rdf:object	"graph shacl schema"
s7.1	"graph shacl"	rdfs:member	"graph"
s7.1	"shacl schema"	rdfs:member	"shacl"
s7.1	"shacl schema"	rdfs:subClassOf	"schema"
s7.1	"graph shacl schema"	rdfs:member	"graph shacl"
s7.1	"graph shacl"	rdfs:subClassOf	"shacl"
s7.1	"graph shacl schema"	rdfs:subClassOf	"schema"
s7.1	"graph shacl schema"	rdfs:subClassOf	"shacl schema"
s7	"in this paper we provide algorithms for validating a graph against a shacl schema"
s7	"in this paper we provide algorithms for validating a graph against a shacl schema"	rdf:subject	"we"
s7	"in this paper we provide algorithms for validating a graph against a shacl schema"	rdf:predicate	"provide"
s7	"in this paper we provide algorithms for validating a graph against a shacl schema"	rdf:object	"algorithms for validating a graph against a shacl schema"
s7	"algorithms for validating a graph against a shacl schema"	rdfs:member	"shacl schema"
s7	"algorithms for validating a graph against a shacl schema"	rdfs:member	"graph"
s7	"algorithms for validating a graph against a shacl schema"	rdfs:member	"algorithms"
s7	"shacl schema"	rdfs:subClassOf	"schema"
s7	"shacl schema"	rdfs:member	"shacl"
s7	"validating against shacl schema"	rdfs:member	"validating"
s7	"validating against shacl schema"	rdfs:member	"shacl schema"
s7	"in this paper we provide algorithms for validating a graph against a shacl schema"	local:AM-LOC	"paper"
s6	"the way recursive constraints should"
s6	"the way recursive constraints should"	rdf:subject	"recursive constraints"
s6	"recursive constraints"	rdfs:subClassOf	"constraints"
s6	"recursive constraints"	rdfs:member	"recursive"
s6	"the way recursive constraints should"	rdf:predicate	"handle"
s6	"the way recursive constraints should"	local:AM-MNR	"way"
s6	"the way recursive constraints should"	local:AM-MOD	"should"
s5	"a first challenge comes from the fact that rdf graphs are often therefore only accessible via queries"
s5	"a first challenge comes from the fact that rdf graphs are often therefore only accessible via queries"	rdf:subject	"first challenge"
s5	"first challenge"	rdfs:subClassOf	"challenge"
s5	"first challenge"	rdfs:member	"first"
s5	"a first challenge comes from the fact that rdf graphs are often therefore only accessible via queries"	rdf:predicate	"come"
s5	"a first challenge comes from the fact that rdf graphs are often therefore only accessible via queries"	rdf:object	"fact that RDF graphs are often therefore only accessible via queries"
s5	"fact that rdf graphs are often therefore only accessible via queries"	rdfs:member	"rdf graphs"
s5	"fact that rdf graphs are often therefore only accessible via queries"	rdfs:member	"queries"
s5	"fact that rdf graphs are often therefore only accessible via queries"	rdfs:member	"fact"
s5	"rdf graphs"	rdfs:member	"rdf"
s5	"rdf graphs"	rdfs:subClassOf	"graphs"
s5	"only accessible"	rdfs:subClassOf	"accessible"
s5	"therefore only accessible"	rdfs:subClassOf	"only accessible"
s5	"often therefore only accessible"	rdfs:subClassOf	"therefore only accessible"
s5	"often therefore only accessible via queries"	rdfs:member	"often therefore only accessible"
s5	"often therefore only accessible via queries"	rdfs:member	"queries"
s4.1	"rdf graphs often exposed as sparql endpoints"
s4.1	"rdf graphs often exposed as sparql endpoints"	rdf:subject	"RDF graphs"
s4.1	"rdf graphs"	rdfs:member	"rdf"
s4.1	"rdf graphs"	rdfs:subClassOf	"graphs"
s4.1	"rdf graphs often exposed as sparql endpoints"	rdf:predicate	"expose"
s4.1	"rdf graphs often exposed as sparql endpoints"	rdf:object	"sparql endpoints"
s4.1	"sparql endpoints"	rdfs:subClassOf	"endpoints"
s4.1	"sparql endpoints"	rdfs:member	"sparql"
s4.1	"rdf graphs often exposed as sparql endpoints"	local:AM-TMP	"often"
s4	"a first challenge comes from the fact that rdf graphs are often exposed as sparql endpoints"
s4	"a first challenge comes from the fact that rdf graphs are often exposed as sparql endpoints"	rdf:subject	"first challenge"
s4	"first challenge"	rdfs:subClassOf	"challenge"
s4	"first challenge"	rdfs:member	"first"
s4	"a first challenge comes from the fact that rdf graphs are often exposed as sparql endpoints"	rdf:predicate	"come"
s4	"a first challenge comes from the fact that rdf graphs are often exposed as sparql endpoints"	rdf:object	"fact that RDF graphs are often exposed as sparql endpoints"
s4	"fact that rdf graphs are often exposed as sparql endpoints"	rdfs:member	"rdf graphs"
s4	"fact that rdf graphs are often exposed as sparql endpoints"	rdfs:member	"fact"
s4	"fact that rdf graphs are often exposed as sparql endpoints"	rdfs:member	"sparql endpoints"
s4	"sparql endpoints"	rdfs:member	"sparql"
s4	"sparql endpoints"	rdfs:subClassOf	"endpoints"
s4	"rdf graphs"	rdfs:member	"rdf"
s4	"rdf graphs"	rdfs:subClassOf	"graphs"
s4	"often exposed"	rdfs:subClassOf	"exposed"
s4	"often exposed as sparql endpoints"	rdfs:member	"often exposed"
s4	"often exposed as sparql endpoints"	rdfs:member	"sparql endpoints"
s3	"the language gaining traction"
s3	"the language gaining traction"	rdf:subject	"language"
s3	"the language gaining traction"	rdf:predicate	"gain"
s3	"the language gaining traction"	rdf:object	"traction"
s2	"rdf graphs that recently become a w3c recommendation"
s2	"rdf graphs that recently become a w3c recommendation"	rdf:subject	"RDF graphs"
s2	"rdf graphs"	rdfs:member	"rdf"
s2	"rdf graphs"	rdfs:subClassOf	"graphs"
s2	"rdf graphs that recently become a w3c recommendation"	rdf:predicate	"become"
s2	"rdf graphs that recently become a w3c recommendation"	rdf:object	"W3C recommendation"
s2	"w3c recommendation"	rdfs:member	"w3c"
s2	"w3c recommendation"	rdfs:subClassOf	"recommendation"
s2	"rdf graphs that recently become a w3c recommendation"	local:AM-TMP	"recently"
s1	"validating rdf graphs"
s1	"validating rdf graphs"	rdf:subject	"RDF graphs"
s1	"rdf graphs"	rdfs:member	"rdf"
s1	"rdf graphs"	rdfs:subClassOf	"graphs"
s1	"validating rdf graphs"	rdf:predicate	"validate"
s0	"describing rdf graphs"
s0	"describing rdf graphs"	rdf:subject	"RDF graphs"
s0	"rdf graphs"	rdfs:member	"rdf"
s0	"rdf graphs"	rdfs:subClassOf	"graphs"
s0	"describing rdf graphs"	rdf:predicate	"describe"
