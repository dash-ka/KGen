s16	"we also present a proofofconcept evaluation of this last approach"
s16	"we also present a proofofconcept evaluation of this last approach"	rdf:subject	"we"
s16	"we also present a proofofconcept evaluation of this last approach"	rdf:predicate	"present"
s16	"we also present a proofofconcept evaluation of this last approach"	rdf:object	"proofofconcept evaluation of this last approach"
s16	"proofofconcept evaluation of this last approach"	rdfs:member	"last approach"
s16	"proofofconcept evaluation of this last approach"	rdfs:member	"proofofconcept evaluation"
s16	"last approach"	rdfs:member	"last"
s16	"proofofconcept evaluation"	rdfs:member	"proofofconcept"
s16	"proofofconcept evaluation"	rdfs:subClassOf	"evaluation"
s16	"last approach"	rdfs:subClassOf	"approach"
s16	"proofofconcept evaluation of last approach"	rdfs:member	"proofofconcept evaluation"
s16	"proofofconcept evaluation of last approach"	rdfs:member	"last approach"
s16	"we also present a proofofconcept evaluation of this last approach"	local:AM-DIS	"also"
s15.2	"dealing with tractable fragments of shacl without the need for an external solver"
s15.2	"dealing with tractable fragments of shacl without the need for an external solver"	rdf:subject	"tractable fragment of shacl without the need for an external solver"
s15.2	"tractable fragment of shacl without the need for an external solver"	rdfs:member	"shacl"
s15.2	"tractable fragment of shacl without the need for an external solver"	rdfs:member	"tractable fragment"
s15.2	"tractable fragment of shacl without the need for an external solver"	rdfs:member	"need"
s15.2	"tractable fragment of shacl without the need for an external solver"	rdfs:member	"external solver"
s15.2	"tractable fragment"	rdfs:member	"tractable"
s15.2	"external solver"	rdfs:member	"external"
s15.2	"tractable fragment"	rdfs:subClassOf	"fragment"
s15.2	"external solver"	rdfs:subClassOf	"solver"
s15.2	"tractable fragment of shacl"	rdfs:member	"tractable fragment"
s15.2	"tractable fragment of shacl"	rdfs:member	"shacl"
s15.2	"tractable fragment of shacl without need"	rdfs:member	"tractable fragment of shacl"
s15.2	"tractable fragment of shacl without need"	rdfs:member	"need"
s15.2	"need for external solver"	rdfs:member	"need"
s15.2	"need for external solver"	rdfs:member	"external solver"
s15.2	"dealing with tractable fragments of shacl without the need for an external solver"	rdf:predicate	"deal"
s15.1	"the process can optimized when dealing with tractable fragments of shacl without the need for an external solver"
s15.1	"the process can optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdf:subject	"process"
s15.1	"the process can optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdf:predicate	"optimize"
s15.1	"the process can optimized when dealing with tractable fragments of shacl without the need for an external solver"	local:AM-MOD	"can"
s15.1	"the process can optimized when dealing with tractable fragments of shacl without the need for an external solver"	local:AM-TMP	"deal with tractable fragment of shacl without the need for an external solver"
s15.1	"deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"external solver"
s15.1	"deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"tractable fragment"
s15.1	"deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"need"
s15.1	"deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"shacl"
s15.1	"deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"deal"
s15.1	"tractable fragment"	rdfs:member	"tractable"
s15.1	"external solver"	rdfs:member	"external"
s15.1	"tractable fragment"	rdfs:subClassOf	"fragment"
s15.1	"external solver"	rdfs:subClassOf	"solver"
s15.1	"deal with tractable fragment"	rdfs:member	"deal"
s15.1	"deal with tractable fragment"	rdfs:member	"tractable fragment"
s15.1	"tractable fragment of shacl"	rdfs:member	"tractable fragment"
s15.1	"tractable fragment of shacl"	rdfs:member	"shacl"
s15.1	"deal with tractable fragment without need"	rdfs:member	"deal with tractable fragment"
s15.1	"deal with tractable fragment without need"	rdfs:member	"need"
s15.1	"need for external solver"	rdfs:member	"need"
s15.1	"need for external solver"	rdfs:member	"external solver"
s15	"finally we show that the process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"
s15	"finally we show that the process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdf:subject	"we"
s15	"finally we show that the process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdf:predicate	"show"
s15	"finally we show that the process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	rdf:object	"process can be optimize when deal with tractable fragment of shacl without the need for an external solver"
s15	"process can be optimize when deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"external solver"
s15	"process can be optimize when deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"tractable fragment"
s15	"process can be optimize when deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"process"
s15	"process can be optimize when deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"need"
s15	"process can be optimize when deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"shacl"
s15	"process can be optimize when deal with tractable fragment of shacl without the need for an external solver"	rdfs:member	"deal"
s15	"tractable fragment"	rdfs:member	"tractable"
s15	"external solver"	rdfs:member	"external"
s15	"tractable fragment"	rdfs:subClassOf	"fragment"
s15	"external solver"	rdfs:subClassOf	"solver"
s15	"be optimize"	rdfs:subClassOf	"optimize"
s15	"can be optimize"	rdfs:subClassOf	"be optimize"
s15	"deal with tractable fragment"	rdfs:member	"deal"
s15	"deal with tractable fragment"	rdfs:member	"tractable fragment"
s15	"tractable fragment of shacl"	rdfs:member	"tractable fragment"
s15	"tractable fragment of shacl"	rdfs:member	"shacl"
s15	"deal with tractable fragment without need"	rdfs:member	"deal with tractable fragment"
s15	"deal with tractable fragment without need"	rdfs:member	"need"
s15	"need for external solver"	rdfs:member	"need"
s15	"need for external solver"	rdfs:member	"external solver"
s15	"finally we show that the process can be optimized when dealing with tractable fragments of shacl without the need for an external solver"	local:AM-TMP	"finally"
s14.2	"dealing with recursive fragments of shacl without the need for an external solver"
s14.2	"dealing with recursive fragments of shacl without the need for an external solver"	rdf:subject	"recursive fragment of shacl without the need for an external solver"
s14.2	"recursive fragment of shacl without the need for an external solver"	rdfs:member	"shacl"
s14.2	"recursive fragment of shacl without the need for an external solver"	rdfs:member	"recursive fragment"
s14.2	"recursive fragment of shacl without the need for an external solver"	rdfs:member	"need"
s14.2	"recursive fragment of shacl without the need for an external solver"	rdfs:member	"external solver"
s14.2	"recursive fragment"	rdfs:subClassOf	"fragment"
s14.2	"external solver"	rdfs:member	"external"
s14.2	"external solver"	rdfs:subClassOf	"solver"
s14.2	"recursive fragment"	rdfs:member	"recursive"
s14.2	"recursive fragment of shacl"	rdfs:member	"recursive fragment"
s14.2	"recursive fragment of shacl"	rdfs:member	"shacl"
s14.2	"recursive fragment of shacl without need"	rdfs:member	"recursive fragment of shacl"
s14.2	"recursive fragment of shacl without need"	rdfs:member	"need"
s14.2	"need for external solver"	rdfs:member	"need"
s14.2	"need for external solver"	rdfs:member	"external solver"
s14.2	"dealing with recursive fragments of shacl without the need for an external solver"	rdf:predicate	"deal"
s14.1	"the process can optimized when dealing with recursive fragments of shacl without the need for an external solver"
s14.1	"the process can optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdf:subject	"process"
s14.1	"the process can optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdf:predicate	"optimize"
s14.1	"the process can optimized when dealing with recursive fragments of shacl without the need for an external solver"	local:AM-MOD	"can"
s14.1	"the process can optimized when dealing with recursive fragments of shacl without the need for an external solver"	local:AM-TMP	"deal with recursive fragment of shacl without the need for an external solver"
s14.1	"deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"external solver"
s14.1	"deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"need"
s14.1	"deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"shacl"
s14.1	"deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"deal"
s14.1	"deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"recursive fragment"
s14.1	"recursive fragment"	rdfs:subClassOf	"fragment"
s14.1	"external solver"	rdfs:member	"external"
s14.1	"recursive fragment"	rdfs:member	"recursive"
s14.1	"external solver"	rdfs:subClassOf	"solver"
s14.1	"deal with recursive fragment"	rdfs:member	"deal"
s14.1	"deal with recursive fragment"	rdfs:member	"recursive fragment"
s14.1	"recursive fragment of shacl"	rdfs:member	"recursive fragment"
s14.1	"recursive fragment of shacl"	rdfs:member	"shacl"
s14.1	"deal with recursive fragment without need"	rdfs:member	"deal with recursive fragment"
s14.1	"deal with recursive fragment without need"	rdfs:member	"need"
s14.1	"need for external solver"	rdfs:member	"need"
s14.1	"need for external solver"	rdfs:member	"external solver"
s14	"finally we show that the process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"
s14	"finally we show that the process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdf:subject	"we"
s14	"finally we show that the process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdf:predicate	"show"
s14	"finally we show that the process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	rdf:object	"process can be optimize when deal with recursive fragment of shacl without the need for an external solver"
s14	"process can be optimize when deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"external solver"
s14	"process can be optimize when deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"process"
s14	"process can be optimize when deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"need"
s14	"process can be optimize when deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"shacl"
s14	"process can be optimize when deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"deal"
s14	"process can be optimize when deal with recursive fragment of shacl without the need for an external solver"	rdfs:member	"recursive fragment"
s14	"recursive fragment"	rdfs:subClassOf	"fragment"
s14	"external solver"	rdfs:member	"external"
s14	"recursive fragment"	rdfs:member	"recursive"
s14	"external solver"	rdfs:subClassOf	"solver"
s14	"be optimize"	rdfs:subClassOf	"optimize"
s14	"can be optimize"	rdfs:subClassOf	"be optimize"
s14	"deal with recursive fragment"	rdfs:member	"deal"
s14	"deal with recursive fragment"	rdfs:member	"recursive fragment"
s14	"recursive fragment of shacl"	rdfs:member	"recursive fragment"
s14	"recursive fragment of shacl"	rdfs:member	"shacl"
s14	"deal with recursive fragment without need"	rdfs:member	"deal with recursive fragment"
s14	"deal with recursive fragment without need"	rdfs:member	"need"
s14	"need for external solver"	rdfs:member	"need"
s14	"need for external solver"	rdfs:member	"external solver"
s14	"finally we show that the process can be optimized when dealing with recursive fragments of shacl without the need for an external solver"	local:AM-TMP	"finally"
s13.1	"we propose a strategy"
s13.1	"we propose a strategy"	rdf:subject	"we"
s13.1	"we propose a strategy"	rdf:predicate	"propose"
s13.1	"we propose a strategy"	rdf:object	"strategy"
s13	"the problem shown to be nphard we propose a strategy"
s13	"the problem shown to be nphard we propose a strategy"	rdf:subject	"problem"
s13	"the problem shown to be nphard we propose a strategy"	rdf:predicate	"show"
s12.2	"a strategy that build a set of propositional formulas"
s12.2	"a strategy that build a set of propositional formulas"	rdf:subject	"strategy"
s12.2	"a strategy that build a set of propositional formulas"	rdf:predicate	"build"
s12.2	"a strategy that build a set of propositional formulas"	rdf:object	"set of propositional formula"
s12.2	"set of propositional formula"	rdfs:member	"set"
s12.2	"set of propositional formula"	rdfs:member	"propositional formula"
s12.2	"propositional formula"	rdfs:subClassOf	"formula"
s12.2	"propositional formula"	rdfs:member	"propositional"
s12.2	"set of propositional formula"	rdfs:member	"set"
s12.2	"set of propositional formula"	rdfs:member	"propositional formula"
s12.1	"using the answers to build a set of propositional formulas"
s12.1	"using the answers to build a set of propositional formulas"	rdf:subject	"answer"
s12.1	"using the answers to build a set of propositional formulas"	rdf:predicate	"use"
s12.1	"using the answers to build a set of propositional formulas"	rdf:object	"build a set of propositional formula"
s12.1	"build a set of propositional formula"	rdfs:member	"set"
s12.1	"build a set of propositional formula"	rdfs:member	"propositional formula"
s12.1	"propositional formula"	rdfs:subClassOf	"formula"
s12.1	"propositional formula"	rdfs:member	"propositional"
s12.1	"set of propositional formula"	rdfs:member	"set"
s12.1	"set of propositional formula"	rdfs:member	"propositional formula"
s12	"a strategy that consists in using the answers to build a set of propositional formulas"
s12	"a strategy that consists in using the answers to build a set of propositional formulas"	rdf:subject	"strategy"
s12	"a strategy that consists in using the answers to build a set of propositional formulas"	rdf:predicate	"consist"
s12	"a strategy that consists in using the answers to build a set of propositional formulas"	rdf:object	"use the answer to build a set of propositional formula"
s12	"use the answer to build a set of propositional formula"	rdfs:member	"propositional formula"
s12	"use the answer to build a set of propositional formula"	rdfs:member	"set"
s12	"use the answer to build a set of propositional formula"	rdfs:member	"answer"
s12	"propositional formula"	rdfs:subClassOf	"formula"
s12	"propositional formula"	rdfs:member	"propositional"
s12	"set of propositional formula"	rdfs:member	"set"
s12	"set of propositional formula"	rdfs:member	"propositional formula"
s11	"propositional formulas that passed to a sat solver"
s11	"propositional formulas that passed to a sat solver"	rdf:subject	"propositional formula"
s11	"propositional formula"	rdfs:subClassOf	"formula"
s11	"propositional formula"	rdfs:member	"propositional"
s11	"propositional formulas that passed to a sat solver"	rdf:predicate	"pass"
s11	"propositional formulas that passed to a sat solver"	rdf:object	"sit solver"
s11	"sit solver"	rdfs:member	"sit"
s11	"sit solver"	rdfs:subClassOf	"solver"
s10.1	"evaluating a small number of sparql queries over the endpoint"
s10.1	"evaluating a small number of sparql queries over the endpoint"	rdf:subject	"small number of sparql query over the endpoint"
s10.1	"small number of sparql query over the endpoint"	rdfs:member	"sparql query"
s10.1	"small number of sparql query over the endpoint"	rdfs:member	"endpoint"
s10.1	"small number of sparql query over the endpoint"	rdfs:member	"small number"
s10.1	"small number"	rdfs:member	"small"
s10.1	"sparql query"	rdfs:member	"sparql"
s10.1	"small number"	rdfs:subClassOf	"number"
s10.1	"sparql query"	rdfs:subClassOf	"query"
s10.1	"small number of sparql query"	rdfs:member	"small number"
s10.1	"small number of sparql query"	rdfs:member	"sparql query"
s10.1	"small number of sparql query over endpoint"	rdfs:member	"small number of sparql query"
s10.1	"small number of sparql query over endpoint"	rdfs:member	"endpoint"
s10.1	"evaluating a small number of sparql queries over the endpoint"	rdf:predicate	"evaluate"
s10	"a strategy that consists in evaluating a small number of sparql queries over the endpoint"
s10	"a strategy that consists in evaluating a small number of sparql queries over the endpoint"	rdf:subject	"strategy"
s10	"a strategy that consists in evaluating a small number of sparql queries over the endpoint"	rdf:predicate	"consist"
s10	"a strategy that consists in evaluating a small number of sparql queries over the endpoint"	rdf:object	"evaluate a small number of sparql query over the endpoint"
s10	"evaluate a small number of sparql query over the endpoint"	rdfs:member	"sparql query"
s10	"evaluate a small number of sparql query over the endpoint"	rdfs:member	"endpoint"
s10	"evaluate a small number of sparql query over the endpoint"	rdfs:member	"small number"
s10	"small number"	rdfs:member	"small"
s10	"sparql query"	rdfs:member	"sparql"
s10	"small number"	rdfs:subClassOf	"number"
s10	"sparql query"	rdfs:subClassOf	"query"
s10	"small number of sparql query"	rdfs:member	"small number"
s10	"small number of sparql query"	rdfs:member	"sparql query"
s10	"small number of sparql query over endpoint"	rdfs:member	"small number of sparql query"
s10	"small number of sparql query over endpoint"	rdfs:member	"endpoint"
s9.1	"validating a graph through a single query"
s9.1	"validating a graph through a single query"	rdf:subject	"graph"
s9.1	"validating a graph through a single query"	rdf:predicate	"validate"
s9.1	"validating a graph through a single query"	rdf:object	"single query"
s9.1	"single query"	rdfs:subClassOf	"query"
s9.1	"single query"	rdfs:member	"single"
s9	"we first investigate the possibility of validating a graph through a single query for nonrecursive constraints"
s9	"we first investigate the possibility of validating a graph through a single query for nonrecursive constraints"	rdf:subject	"we"
s9	"we first investigate the possibility of validating a graph through a single query for nonrecursive constraints"	rdf:predicate	"investigate"
s9	"we first investigate the possibility of validating a graph through a single query for nonrecursive constraints"	rdf:object	"possibility of validate a graph through a single query for nonrecursive constraint"
s9	"possibility of validate a graph through a single query for nonrecursive constraint"	rdfs:member	"single query"
s9	"possibility of validate a graph through a single query for nonrecursive constraint"	rdfs:member	"possibility"
s9	"possibility of validate a graph through a single query for nonrecursive constraint"	rdfs:member	"nonrecursive constraint"
s9	"possibility of validate a graph through a single query for nonrecursive constraint"	rdfs:member	"validate"
s9	"possibility of validate a graph through a single query for nonrecursive constraint"	rdfs:member	"graph"
s9	"nonrecursive constraint"	rdfs:subClassOf	"constraint"
s9	"single query"	rdfs:subClassOf	"query"
s9	"nonrecursive constraint"	rdfs:member	"nonrecursive"
s9	"single query"	rdfs:member	"single"
s9	"possibility of validate"	rdfs:member	"possibility"
s9	"possibility of validate"	rdfs:member	"validate"
s9	"graph through single query"	rdfs:member	"graph"
s9	"graph through single query"	rdfs:member	"single query"
s9	"single query for nonrecursive constraint"	rdfs:member	"single query"
s9	"single query for nonrecursive constraint"	rdfs:member	"nonrecursive constraint"
s9	"we first investigate the possibility of validating a graph through a single query for nonrecursive constraints"	local:AM-TMP	"first"
s8.1	"algorithms validating a graph against a shacl schema"
s8.1	"algorithms validating a graph against a shacl schema"	rdf:subject	"algorithm"
s8.1	"algorithms validating a graph against a shacl schema"	rdf:predicate	"validate"
s8.1	"algorithms validating a graph against a shacl schema"	rdf:object	"graph shacl schema"
s8.1	"graph shacl"	rdfs:member	"graph"
s8.1	"graph shacl"	rdfs:subClassOf	"shacl"
s8.1	"graph shacl schema"	rdfs:subClassOf	"schema"
s8.1	"shacl schema"	rdfs:subClassOf	"schema"
s8.1	"shacl schema"	rdfs:member	"shacl"
s8.1	"graph shacl schema"	rdfs:member	"graph shacl"
s8.1	"graph shacl schema"	rdfs:subClassOf	"shacl schema"
s8	"in this paper we provide algorithms for validating a graph against a shacl schema"
s8	"in this paper we provide algorithms for validating a graph against a shacl schema"	rdf:subject	"we"
s8	"in this paper we provide algorithms for validating a graph against a shacl schema"	rdf:predicate	"provide"
s8	"in this paper we provide algorithms for validating a graph against a shacl schema"	rdf:object	"algorithm for validate a graph against a shacl schema"
s8	"algorithm for validate a graph against a shacl schema"	rdfs:member	"shacl schema"
s8	"algorithm for validate a graph against a shacl schema"	rdfs:member	"graph"
s8	"algorithm for validate a graph against a shacl schema"	rdfs:member	"validate"
s8	"algorithm for validate a graph against a shacl schema"	rdfs:member	"algorithm"
s8	"shacl schema"	rdfs:member	"shacl"
s8	"shacl schema"	rdfs:subClassOf	"schema"
s8	"validate against shacl schema"	rdfs:member	"validate"
s8	"validate against shacl schema"	rdfs:member	"shacl schema"
s8	"in this paper we provide algorithms for validating a graph against a shacl schema"	local:AM-LOC	"paper"
s7	"a shacl schema which can executed over a sparql endpoint"
s7	"a shacl schema which can executed over a sparql endpoint"	rdf:subject	"shacl schema"
s7	"shacl schema"	rdfs:member	"shacl"
s7	"shacl schema"	rdfs:subClassOf	"schema"
s7	"a shacl schema which can executed over a sparql endpoint"	rdf:predicate	"execute"
s7	"a shacl schema which can executed over a sparql endpoint"	rdf:object	"sparql endpoint"
s7	"sparql endpoint"	rdfs:member	"sparql"
s7	"sparql endpoint"	rdfs:subClassOf	"endpoint"
s7	"a shacl schema which can executed over a sparql endpoint"	local:AM-MOD	"can"
s6	"the way recursive constraints should"
s6	"the way recursive constraints should"	rdf:subject	"recursive constraint"
s6	"recursive constraint"	rdfs:member	"recursive"
s6	"recursive constraint"	rdfs:subClassOf	"constraint"
s6	"the way recursive constraints should"	rdf:predicate	"handle"
s6	"the way recursive constraints should"	local:AM-MNR	"way"
s6	"the way recursive constraints should"	local:AM-MOD	"should"
s5.1	"rdf graphs often exposed as sparql endpoints"
s5.1	"rdf graphs often exposed as sparql endpoints"	rdf:subject	"rdf graph"
s5.1	"rdf graph"	rdfs:subClassOf	"graph"
s5.1	"rdf graph"	rdfs:member	"rdf"
s5.1	"rdf graphs often exposed as sparql endpoints"	rdf:predicate	"expose"
s5.1	"rdf graphs often exposed as sparql endpoints"	rdf:object	"sparql endpoint"
s5.1	"sparql endpoint"	rdfs:member	"sparql"
s5.1	"sparql endpoint"	rdfs:subClassOf	"endpoint"
s5.1	"rdf graphs often exposed as sparql endpoints"	local:AM-TMP	"often"
s5	"a first challenge comes from the fact that rdf graphs are often exposed as sparql endpoints"
s5	"a first challenge comes from the fact that rdf graphs are often exposed as sparql endpoints"	rdf:subject	"first challenge"
s5	"first challenge"	rdfs:member	"first"
s5	"first challenge"	rdfs:subClassOf	"challenge"
s5	"a first challenge comes from the fact that rdf graphs are often exposed as sparql endpoints"	rdf:predicate	"come"
s5	"a first challenge comes from the fact that rdf graphs are often exposed as sparql endpoints"	local:AM-MNR	"fact that rdf graph be often expose a sparql endpoint"
s5	"fact that rdf graph be often expose a sparql endpoint"	rdfs:member	"sparql endpoint"
s5	"fact that rdf graph be often expose a sparql endpoint"	rdfs:member	"graph"
s5	"fact that rdf graph be often expose a sparql endpoint"	rdfs:member	"fact"
s5	"sparql endpoint"	rdfs:member	"sparql"
s5	"sparql endpoint"	rdfs:subClassOf	"endpoint"
s5	"often expose"	rdfs:subClassOf	"expose"
s5	"be often expose"	rdfs:subClassOf	"often expose"
s5	"rdf graph"	rdfs:subClassOf	"graph"
s4	"a first challenge comes from the fact that rdf graphs are often therefore only accessible via queries"
s4	"a first challenge comes from the fact that rdf graphs are often therefore only accessible via queries"	rdf:subject	"first challenge"
s4	"first challenge"	rdfs:member	"first"
s4	"first challenge"	rdfs:subClassOf	"challenge"
s4	"a first challenge comes from the fact that rdf graphs are often therefore only accessible via queries"	rdf:predicate	"come"
s4	"a first challenge comes from the fact that rdf graphs are often therefore only accessible via queries"	rdf:object	"fact that rdf graph be often therefore only accessible via query"
s4	"fact that rdf graph be often therefore only accessible via query"	rdfs:member	"query"
s4	"fact that rdf graph be often therefore only accessible via query"	rdfs:member	"graph"
s4	"fact that rdf graph be often therefore only accessible via query"	rdfs:member	"fact"
s4	"only accessible"	rdfs:subClassOf	"accessible"
s4	"therefore only accessible"	rdfs:subClassOf	"only accessible"
s4	"often therefore only accessible"	rdfs:subClassOf	"therefore only accessible"
s4	"rdf graph"	rdfs:subClassOf	"graph"
s4	"often therefore only accessible via query"	rdfs:member	"often therefore only accessible"
s4	"often therefore only accessible via query"	rdfs:member	"query"
s3	"the language gaining traction"
s3	"the language gaining traction"	rdf:subject	"language"
s3	"the language gaining traction"	rdf:predicate	"gain"
s3	"the language gaining traction"	rdf:object	"traction"
s2	"rdf graphs that recently become a w3c recommendation"
s2	"rdf graphs that recently become a w3c recommendation"	rdf:subject	"rdf graph"
s2	"rdf graph"	rdfs:subClassOf	"graph"
s2	"rdf graph"	rdfs:member	"rdf"
s2	"rdf graphs that recently become a w3c recommendation"	rdf:predicate	"become"
s2	"rdf graphs that recently become a w3c recommendation"	rdf:object	"w3c recommendation"
s2	"w3c recommendation"	rdfs:member	"w3c"
s2	"w3c recommendation"	rdfs:subClassOf	"recommendation"
s2	"rdf graphs that recently become a w3c recommendation"	local:AM-TMP	"recently"
s1	"describing rdf graphs"
s1	"describing rdf graphs"	rdf:subject	"rdf graph"
s1	"rdf graph"	rdfs:subClassOf	"graph"
s1	"rdf graph"	rdfs:member	"rdf"
s1	"describing rdf graphs"	rdf:predicate	"describe"
s0	"validating rdf graphs"
s0	"validating rdf graphs"	rdf:subject	"rdf graph"
s0	"rdf graph"	rdfs:subClassOf	"graph"
s0	"rdf graph"	rdfs:member	"rdf"
s0	"validating rdf graphs"	rdf:predicate	"validate"
