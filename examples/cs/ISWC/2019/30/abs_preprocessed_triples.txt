s13.1	"we"
s13.1	"we"	rdf:subject	"we"
s13.1	"we"	rdf:predicate	"approach"
s13	"we provide theoretical results of the various components of we approach"
s13	"we provide theoretical results of the various components of we approach"	rdf:subject	"we"
s13	"we provide theoretical results of the various components of we approach"	rdf:predicate	"provide"
s13	"we provide theoretical results of the various components of we approach"	rdf:object	"theoretical result of the various component of we approach"
s13	"theoretical result of the various component of we approach"	rdfs:member	"various component"
s13	"theoretical result of the various component of we approach"	rdfs:member	"theoretical result"
s13	"various component"	rdfs:member	"various"
s13	"theoretical result"	rdfs:member	"theoretical"
s13	"various component"	rdfs:subClassOf	"component"
s13	"theoretical result"	rdfs:subClassOf	"result"
s13	"theoretical result of various component"	rdfs:member	"theoretical result"
s13	"theoretical result of various component"	rdfs:member	"various component"
s13	"various component of we"	rdfs:member	"various component"
s13	"various component of we"	rdfs:member	"we"
s12.1	"we"
s12.1	"we"	rdf:subject	"we"
s12.1	"we"	rdf:predicate	"approach"
s12	"we provide experimental results of the various components of we approach"
s12	"we provide experimental results of the various components of we approach"	rdf:subject	"we"
s12	"we provide experimental results of the various components of we approach"	rdf:predicate	"provide"
s12	"we provide experimental results of the various components of we approach"	rdf:object	"experimental result of the various component of we approach"
s12	"experimental result of the various component of we approach"	rdfs:member	"various component"
s12	"experimental result of the various component of we approach"	rdfs:member	"experimental result"
s12	"various component"	rdfs:member	"various"
s12	"experimental result"	rdfs:subClassOf	"result"
s12	"various component"	rdfs:subClassOf	"component"
s12	"experimental result"	rdfs:member	"experimental"
s12	"experimental result of various component"	rdfs:member	"experimental result"
s12	"experimental result of various component"	rdfs:member	"various component"
s12	"various component of we"	rdfs:member	"various component"
s12	"various component of we"	rdfs:member	"we"
s11	"the new facts that can"
s11	"the new facts that can"	rdf:subject	"new fact"
s11	"new fact"	rdfs:member	"new"
s11	"new fact"	rdfs:subClassOf	"fact"
s11	"the new facts that can"	rdf:predicate	"infer"
s11	"the new facts that can"	local:AM-MOD	"can"
s10.5	"capture the new facts"
s10.5	"capture the new facts"	rdf:subject	"new fact"
s10.5	"new fact"	rdfs:member	"new"
s10.5	"new fact"	rdfs:subClassOf	"fact"
s10.5	"capture the new facts"	rdf:predicate	"capture"
s10.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"
s10.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"	rdf:subject	"constraint"
s10.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"	rdf:predicate	"update"
s10.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"	rdf:object	"original schema ie the set of shacl constraint"
s10.4	"original schema ie the set of shacl constraint"	rdfs:member	"shacl constraint"
s10.4	"original schema ie the set of shacl constraint"	rdfs:member	"set"
s10.4	"original schema ie the set of shacl constraint"	rdfs:member	"original schema"
s10.4	"shacl constraint"	rdfs:member	"shacl"
s10.4	"shacl constraint"	rdfs:subClassOf	"constraint"
s10.4	"original schema"	rdfs:member	"original"
s10.4	"original schema"	rdfs:subClassOf	"schema"
s10.4	"ie set"	rdfs:subClassOf	"set"
s10.4	"ie set of shacl constraint"	rdfs:member	"ie set"
s10.4	"ie set of shacl constraint"	rdfs:member	"shacl constraint"
s10.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"	local:AM-MOD	"could"
s10.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"	local:AM-PNC	"order to capture the new fact"
s10.4	"order to capture the new fact"	rdfs:member	"order"
s10.4	"order to capture the new fact"	rdfs:member	"new fact"
s10.4	"new fact"	rdfs:member	"new"
s10.4	"new fact"	rdfs:subClassOf	"fact"
s10.3	"which constraints could violated by the application of the inference rules on some graph instance of the original schema"
s10.3	"which constraints could violated by the application of the inference rules on some graph instance of the original schema"	rdf:subject	"application of the inference rule on some graph instance of the original schema"
s10.3	"application of the inference rule on some graph instance of the original schema"	rdfs:member	"original schema"
s10.3	"application of the inference rule on some graph instance of the original schema"	rdfs:member	"graph instance"
s10.3	"application of the inference rule on some graph instance of the original schema"	rdfs:member	"application"
s10.3	"application of the inference rule on some graph instance of the original schema"	rdfs:member	"inference rule"
s10.3	"inference rule"	rdfs:subClassOf	"rule"
s10.3	"original schema"	rdfs:subClassOf	"schema"
s10.3	"graph instance"	rdfs:member	"graph"
s10.3	"graph instance"	rdfs:subClassOf	"instance"
s10.3	"inference rule"	rdfs:member	"inference"
s10.3	"original schema"	rdfs:member	"original"
s10.3	"application of inference rule"	rdfs:member	"application"
s10.3	"application of inference rule"	rdfs:member	"inference rule"
s10.3	"inference rule on graph instance"	rdfs:member	"inference rule"
s10.3	"inference rule on graph instance"	rdfs:member	"graph instance"
s10.3	"graph instance of original schema"	rdfs:member	"graph instance"
s10.3	"graph instance of original schema"	rdfs:member	"original schema"
s10.3	"which constraints could violated by the application of the inference rules on some graph instance of the original schema"	rdf:predicate	"violate"
s10.3	"which constraints could violated by the application of the inference rules on some graph instance of the original schema"	rdf:object	"constraint"
s10.3	"which constraints could violated by the application of the inference rules on some graph instance of the original schema"	local:AM-MOD	"could"
s10.2	"detect which constraints could be violated"
s10.2	"detect which constraints could be violated"	rdf:subject	"constraint could be violate"
s10.2	"be violate"	rdfs:subClassOf	"violate"
s10.2	"could be violate"	rdfs:subClassOf	"be violate"
s10.2	"detect which constraints could be violated"	rdf:predicate	"detect"
s10.1	"we present a method to detect which constraints could be violated"
s10.1	"we present a method to detect which constraints could be violated"	rdf:subject	"we"
s10.1	"we present a method to detect which constraints could be violated"	rdf:predicate	"present"
s10.1	"we present a method to detect which constraints could be violated"	rdf:object	"method to detect which constraint could be violate"
s10.1	"method to detect which constraint could be violate"	rdfs:member	"constraint"
s10.1	"method to detect which constraint could be violate"	rdfs:member	"method"
s10.1	"be violate"	rdfs:subClassOf	"violate"
s10.1	"could be violate"	rdfs:subClassOf	"be violate"
s10	"given a set of shacl constraints we present a method to detect which constraints could be violated by the application of the inference rules on some graph instance of the original schema and update the original schema ie the set of shacl constraints"
s10	"given a set of shacl constraints we present a method to detect which constraints could be violated by the application of the inference rules on some graph instance of the original schema and update the original schema ie the set of shacl constraints"	rdf:subject	"set of shacl constraint we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"
s10	"set of shacl constraint we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"graph instance"
s10	"set of shacl constraint we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"constraint"
s10	"set of shacl constraint we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"method"
s10	"set of shacl constraint we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"application"
s10	"set of shacl constraint we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"inference rule"
s10	"set of shacl constraint we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"original schema"
s10	"set of shacl constraint we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"shacl constraint"
s10	"set of shacl constraint we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"set"
s10	"inference rule"	rdfs:subClassOf	"rule"
s10	"original schema"	rdfs:subClassOf	"schema"
s10	"graph instance"	rdfs:member	"graph"
s10	"shacl constraint"	rdfs:subClassOf	"constraint"
s10	"graph instance"	rdfs:subClassOf	"instance"
s10	"shacl constraint"	rdfs:member	"shacl"
s10	"inference rule"	rdfs:member	"inference"
s10	"original schema"	rdfs:member	"original"
s10	"set update"	rdfs:subClassOf	"update"
s10	"ie set"	rdfs:subClassOf	"set"
s10	"original original schema"	rdfs:subClassOf	"original schema"
s10	"be violate"	rdfs:subClassOf	"violate"
s10	"could be violate"	rdfs:subClassOf	"be violate"
s10	"set of shacl constraint"	rdfs:member	"set"
s10	"set of shacl constraint"	rdfs:member	"shacl constraint"
s10	"could be violate by application"	rdfs:member	"could be violate"
s10	"could be violate by application"	rdfs:member	"application"
s10	"application of inference rule"	rdfs:member	"application"
s10	"application of inference rule"	rdfs:member	"inference rule"
s10	"application of inference rule on graph instance"	rdfs:member	"application of inference rule"
s10	"application of inference rule on graph instance"	rdfs:member	"graph instance"
s10	"graph instance of original original schema"	rdfs:member	"graph instance"
s10	"graph instance of original original schema"	rdfs:member	"original original schema"
s10	"ie set of shacl constraint"	rdfs:member	"ie set"
s10	"ie set of shacl constraint"	rdfs:member	"shacl constraint"
s10	"given a set of shacl constraints we present a method to detect which constraints could be violated by the application of the inference rules on some graph instance of the original schema and update the original schema ie the set of shacl constraints"	rdf:predicate	"give"
s9.5	"capture the new facts"
s9.5	"capture the new facts"	rdf:subject	"new fact"
s9.5	"new fact"	rdfs:member	"new"
s9.5	"new fact"	rdfs:subClassOf	"fact"
s9.5	"capture the new facts"	rdf:predicate	"capture"
s9.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"
s9.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"	rdf:subject	"constraint"
s9.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"	rdf:predicate	"update"
s9.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"	rdf:object	"original schema ie the set of shacl constraint"
s9.4	"original schema ie the set of shacl constraint"	rdfs:member	"shacl constraint"
s9.4	"original schema ie the set of shacl constraint"	rdfs:member	"set"
s9.4	"original schema ie the set of shacl constraint"	rdfs:member	"original schema"
s9.4	"shacl constraint"	rdfs:member	"shacl"
s9.4	"shacl constraint"	rdfs:subClassOf	"constraint"
s9.4	"original schema"	rdfs:member	"original"
s9.4	"original schema"	rdfs:subClassOf	"schema"
s9.4	"ie set"	rdfs:subClassOf	"set"
s9.4	"ie set of shacl constraint"	rdfs:member	"ie set"
s9.4	"ie set of shacl constraint"	rdfs:member	"shacl constraint"
s9.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"	local:AM-MOD	"could"
s9.4	"constraints could update the original schema ie the set of shacl constraints in order to capture the new facts"	local:AM-PNC	"order to capture the new fact"
s9.4	"order to capture the new fact"	rdfs:member	"order"
s9.4	"order to capture the new fact"	rdfs:member	"new fact"
s9.4	"new fact"	rdfs:member	"new"
s9.4	"new fact"	rdfs:subClassOf	"fact"
s9.3	"which constraints could violated by the application of the inference rules on some graph instance of the original schema"
s9.3	"which constraints could violated by the application of the inference rules on some graph instance of the original schema"	rdf:subject	"application of the inference rule on some graph instance of the original schema"
s9.3	"application of the inference rule on some graph instance of the original schema"	rdfs:member	"original schema"
s9.3	"application of the inference rule on some graph instance of the original schema"	rdfs:member	"graph instance"
s9.3	"application of the inference rule on some graph instance of the original schema"	rdfs:member	"application"
s9.3	"application of the inference rule on some graph instance of the original schema"	rdfs:member	"inference rule"
s9.3	"inference rule"	rdfs:subClassOf	"rule"
s9.3	"original schema"	rdfs:subClassOf	"schema"
s9.3	"graph instance"	rdfs:member	"graph"
s9.3	"graph instance"	rdfs:subClassOf	"instance"
s9.3	"inference rule"	rdfs:member	"inference"
s9.3	"original schema"	rdfs:member	"original"
s9.3	"application of inference rule"	rdfs:member	"application"
s9.3	"application of inference rule"	rdfs:member	"inference rule"
s9.3	"inference rule on graph instance"	rdfs:member	"inference rule"
s9.3	"inference rule on graph instance"	rdfs:member	"graph instance"
s9.3	"graph instance of original schema"	rdfs:member	"graph instance"
s9.3	"graph instance of original schema"	rdfs:member	"original schema"
s9.3	"which constraints could violated by the application of the inference rules on some graph instance of the original schema"	rdf:predicate	"violate"
s9.3	"which constraints could violated by the application of the inference rules on some graph instance of the original schema"	rdf:object	"constraint"
s9.3	"which constraints could violated by the application of the inference rules on some graph instance of the original schema"	local:AM-MOD	"could"
s9.2	"detect which constraints could be violated"
s9.2	"detect which constraints could be violated"	rdf:subject	"constraint could be violate"
s9.2	"be violate"	rdfs:subClassOf	"violate"
s9.2	"could be violate"	rdfs:subClassOf	"be violate"
s9.2	"detect which constraints could be violated"	rdf:predicate	"detect"
s9.1	"a set of datalog rules we present a method to detect which constraints could be violated"
s9.1	"a set of datalog rules we present a method to detect which constraints could be violated"	rdf:subject	"we"
s9.1	"a set of datalog rules we present a method to detect which constraints could be violated"	rdf:predicate	"present"
s9.1	"a set of datalog rules we present a method to detect which constraints could be violated"	rdf:object	"method to detect which constraint could be violate set of datalog rule"
s9.1	"method to detect which constraint could be violate set of datalog rule"	rdfs:member	"violate set"
s9.1	"method to detect which constraint could be violate set of datalog rule"	rdfs:member	"datalog rule"
s9.1	"method to detect which constraint could be violate set of datalog rule"	rdfs:member	"constraint"
s9.1	"method to detect which constraint could be violate set of datalog rule"	rdfs:member	"method"
s9.1	"violate set"	rdfs:member	"violate"
s9.1	"violate set"	rdfs:subClassOf	"set"
s9.1	"datalog rule"	rdfs:member	"datalog"
s9.1	"datalog rule"	rdfs:subClassOf	"rule"
s9.1	"be violate"	rdfs:subClassOf	"violate"
s9.1	"could be violate"	rdfs:subClassOf	"be violate"
s9.1	"set of datalog rule"	rdfs:member	"set"
s9.1	"set of datalog rule"	rdfs:member	"datalog rule"
s9	"given a set of datalog rules we present a method to detect which constraints could be violated by the application of the inference rules on some graph instance of the original schema and update the original schema ie the set of shacl constraints"
s9	"given a set of datalog rules we present a method to detect which constraints could be violated by the application of the inference rules on some graph instance of the original schema and update the original schema ie the set of shacl constraints"	rdf:subject	"set of datalog rule we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"
s9	"set of datalog rule we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"constraint"
s9	"set of datalog rule we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"method"
s9	"set of datalog rule we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"shacl constraint"
s9	"set of datalog rule we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"application"
s9	"set of datalog rule we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"inference rule"
s9	"set of datalog rule we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"original schema"
s9	"set of datalog rule we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"graph instance"
s9	"set of datalog rule we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"datalog rule"
s9	"set of datalog rule we present a method to detect which constraint could be violate by the application of the inference rule on some graph instance of the original schema and update the original schema ie the set of shacl constraint"	rdfs:member	"set"
s9	"inference rule"	rdfs:subClassOf	"rule"
s9	"original schema"	rdfs:subClassOf	"schema"
s9	"datalog rule"	rdfs:subClassOf	"rule"
s9	"datalog rule"	rdfs:member	"datalog"
s9	"graph instance"	rdfs:member	"graph"
s9	"shacl constraint"	rdfs:subClassOf	"constraint"
s9	"graph instance"	rdfs:subClassOf	"instance"
s9	"shacl constraint"	rdfs:member	"shacl"
s9	"inference rule"	rdfs:member	"inference"
s9	"original schema"	rdfs:member	"original"
s9	"set update"	rdfs:subClassOf	"update"
s9	"ie set"	rdfs:subClassOf	"set"
s9	"original original schema"	rdfs:subClassOf	"original schema"
s9	"be violate"	rdfs:subClassOf	"violate"
s9	"could be violate"	rdfs:subClassOf	"be violate"
s9	"set of datalog rule"	rdfs:member	"set"
s9	"set of datalog rule"	rdfs:member	"datalog rule"
s9	"could be violate by application"	rdfs:member	"could be violate"
s9	"could be violate by application"	rdfs:member	"application"
s9	"application of inference rule"	rdfs:member	"application"
s9	"application of inference rule"	rdfs:member	"inference rule"
s9	"application of inference rule on graph instance"	rdfs:member	"application of inference rule"
s9	"application of inference rule on graph instance"	rdfs:member	"graph instance"
s9	"graph instance of original original schema"	rdfs:member	"graph instance"
s9	"graph instance of original original schema"	rdfs:member	"original original schema"
s9	"ie set of shacl constraint"	rdfs:member	"ie set"
s9	"ie set of shacl constraint"	rdfs:member	"shacl constraint"
s9	"given a set of datalog rules we present a method to detect which constraints could be violated by the application of the inference rules on some graph instance of the original schema and update the original schema ie the set of shacl constraints"	rdf:predicate	"give"
s8	"new facts that not match the original schema"
s8	"new facts that not match the original schema"	rdf:subject	"new fact"
s8	"new fact"	rdfs:member	"new"
s8	"new fact"	rdfs:subClassOf	"fact"
s8	"new facts that not match the original schema"	rdf:predicate	"not match"
s8	"new facts that not match the original schema"	rdf:object	"original schema"
s8	"original schema"	rdfs:member	"original"
s8	"original schema"	rdfs:subClassOf	"schema"
s7	"on the other hand inference rules can lead to the discovery of new facts"
s7	"on the other hand inference rules can lead to the discovery of new facts"	rdf:subject	"inference rule"
s7	"inference rule"	rdfs:member	"inference"
s7	"inference rule"	rdfs:subClassOf	"rule"
s7	"on the other hand inference rules can lead to the discovery of new facts"	rdf:predicate	"lead"
s7	"on the other hand inference rules can lead to the discovery of new facts"	rdf:object	"discovery of new fact"
s7	"discovery of new fact"	rdfs:member	"discovery"
s7	"discovery of new fact"	rdfs:member	"new fact"
s7	"new fact"	rdfs:member	"new"
s7	"new fact"	rdfs:subClassOf	"fact"
s7	"discovery of new fact"	rdfs:member	"discovery"
s7	"discovery of new fact"	rdfs:member	"new fact"
s7	"on the other hand inference rules can lead to the discovery of new facts"	local:AM-DIS	"hand"
s7	"on the other hand inference rules can lead to the discovery of new facts"	local:AM-MOD	"can"
s6.1	"define a schema for graph datasets"
s6.1	"define a schema for graph datasets"	rdf:subject	"schema"
s6.1	"define a schema for graph datasets"	rdf:predicate	"define"
s6.1	"define a schema for graph datasets"	local:AM-PNC	"graph datasets"
s6.1	"graph datasets"	rdfs:subClassOf	"datasets"
s6.1	"graph datasets"	rdfs:member	"graph"
s6	"the one hand shacl constraints can used to define a schema for graph datasets"
s6	"the one hand shacl constraints can used to define a schema for graph datasets"	rdf:subject	"one hand shacl constraint"
s6	"hand shacl"	rdfs:member	"hand"
s6	"shacl constraint"	rdfs:subClassOf	"constraint"
s6	"hand shacl"	rdfs:subClassOf	"shacl"
s6	"shacl constraint"	rdfs:member	"shacl"
s6	"hand shacl constraint"	rdfs:member	"hand shacl"
s6	"hand shacl constraint"	rdfs:subClassOf	"constraint"
s6	"hand shacl constraint"	rdfs:subClassOf	"shacl constraint"
s6	"one hand shacl constraint"	rdfs:subClassOf	"hand shacl constraint"
s6	"the one hand shacl constraints can used to define a schema for graph datasets"	rdf:predicate	"use"
s6	"the one hand shacl constraints can used to define a schema for graph datasets"	rdf:object	"define a schema for graph datasets"
s6	"the one hand shacl constraints can used to define a schema for graph datasets"	local:AM-MOD	"can"
s5	"in this paper we study the interaction of a subset of shacl with inference rules"
s5	"in this paper we study the interaction of a subset of shacl with inference rules"	rdf:subject	"we"
s5	"in this paper we study the interaction of a subset of shacl with inference rules"	rdf:predicate	"study"
s5	"in this paper we study the interaction of a subset of shacl with inference rules"	rdf:object	"interaction of a subset of shacl with inference rule"
s5	"interaction of a subset of shacl with inference rule"	rdfs:member	"shacl"
s5	"interaction of a subset of shacl with inference rule"	rdfs:member	"interaction"
s5	"interaction of a subset of shacl with inference rule"	rdfs:member	"subset"
s5	"interaction of a subset of shacl with inference rule"	rdfs:member	"inference rule"
s5	"inference rule"	rdfs:member	"inference"
s5	"inference rule"	rdfs:subClassOf	"rule"
s5	"interaction of subset"	rdfs:member	"interaction"
s5	"interaction of subset"	rdfs:member	"subset"
s5	"subset of shacl"	rdfs:member	"subset"
s5	"subset of shacl"	rdfs:member	"shacl"
s5	"interaction of subset with inference rule"	rdfs:member	"interaction of subset"
s5	"interaction of subset with inference rule"	rdfs:member	"inference rule"
s5	"in this paper we study the interaction of a subset of shacl with inference rules"	local:AM-LOC	"paper"
s4	"inference rules expressed in datalog"
s4	"inference rules expressed in datalog"	rdf:subject	"inference rule"
s4	"inference rule"	rdfs:member	"inference"
s4	"inference rule"	rdfs:subClassOf	"rule"
s4	"inference rules expressed in datalog"	rdf:predicate	"express"
s4	"inference rules expressed in datalog"	local:AM-LOC	"datalog"
s1	"constraints that can validated against rdf graphs"
s1	"constraints that can validated against rdf graphs"	rdf:subject	"constraint"
s1	"constraints that can validated against rdf graphs"	rdf:predicate	"validate"
s1	"constraints that can validated against rdf graphs"	local:AM-MNR	"rdf graph"
s1	"rdf graph"	rdfs:member	"rdf"
s1	"rdf graph"	rdfs:subClassOf	"graph"
s1	"constraints that can validated against rdf graphs"	local:AM-MOD	"can"
s0.1	"rdf define constraints"
s0.1	"rdf define constraints"	rdf:subject	"rdf"
s0.1	"rdf define constraints"	rdf:predicate	"define"
s0.1	"rdf define constraints"	rdf:object	"constraint"
s0	"rdf recently introduced as a w3c recommendation"
s0	"rdf recently introduced as a w3c recommendation"	rdf:subject	"rdf"
s0	"rdf recently introduced as a w3c recommendation"	rdf:predicate	"introduce"
s0	"rdf recently introduced as a w3c recommendation"	local:AM-MNR	"w3c recommendation"
s0	"w3c recommendation"	rdfs:member	"w3c"
s0	"w3c recommendation"	rdfs:subClassOf	"recommendation"
s0	"rdf recently introduced as a w3c recommendation"	local:AM-TMP	"recently"
