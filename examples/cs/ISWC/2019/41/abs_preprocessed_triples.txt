s15.1	"a firstprice payment rule proving tight bounds on the price of anarchy"
s15.1	"a firstprice payment rule proving tight bounds on the price of anarchy"	rdf:subject	"firstprice payment rule"
s15.1	"firstprice payment"	rdfs:subClassOf	"payment"
s15.1	"firstprice payment"	rdfs:member	"firstprice"
s15.1	"payment rule"	rdfs:member	"payment"
s15.1	"firstprice payment rule"	rdfs:subClassOf	"rule"
s15.1	"firstprice payment rule"	rdfs:member	"firstprice payment"
s15.1	"payment rule"	rdfs:subClassOf	"rule"
s15.1	"firstprice payment rule"	rdfs:subClassOf	"payment rule"
s15.1	"a firstprice payment rule proving tight bounds on the price of anarchy"	rdf:predicate	"prove"
s15.1	"a firstprice payment rule proving tight bounds on the price of anarchy"	rdf:object	"tight bound on the price of anarchy"
s15.1	"tight bound on the price of anarchy"	rdfs:member	"price"
s15.1	"tight bound on the price of anarchy"	rdfs:member	"anarchy"
s15.1	"tight bound on the price of anarchy"	rdfs:member	"tight bound"
s15.1	"tight bound"	rdfs:subClassOf	"bound"
s15.1	"tight bound"	rdfs:member	"tight"
s15.1	"tight bound on price"	rdfs:member	"tight bound"
s15.1	"tight bound on price"	rdfs:member	"price"
s15.1	"price of anarchy"	rdfs:member	"price"
s15.1	"price of anarchy"	rdfs:member	"anarchy"
s15	"a decentralised version of the greedy allocation algorithm then studied with a firstprice payment rule proving tight bounds on the price of anarchy"
s15	"a decentralised version of the greedy allocation algorithm then studied with a firstprice payment rule proving tight bounds on the price of anarchy"	rdf:subject	"decentralise version of the greedy allocation algorithm"
s15	"decentralise version of the greedy allocation algorithm"	rdfs:member	"greedy allocation algorithm"
s15	"decentralise version of the greedy allocation algorithm"	rdfs:member	"decentralise version"
s15	"allocation algorithm"	rdfs:subClassOf	"algorithm"
s15	"greedy allocation"	rdfs:subClassOf	"allocation"
s15	"greedy allocation"	rdfs:member	"greedy"
s15	"decentralise version"	rdfs:subClassOf	"version"
s15	"decentralise version"	rdfs:member	"decentralise"
s15	"allocation algorithm"	rdfs:member	"allocation"
s15	"greedy allocation algorithm"	rdfs:member	"greedy allocation"
s15	"greedy allocation algorithm"	rdfs:subClassOf	"algorithm"
s15	"greedy allocation algorithm"	rdfs:subClassOf	"allocation algorithm"
s15	"version of greedy allocation algorithm"	rdfs:member	"version"
s15	"version of greedy allocation algorithm"	rdfs:member	"greedy allocation algorithm"
s15	"a decentralised version of the greedy allocation algorithm then studied with a firstprice payment rule proving tight bounds on the price of anarchy"	rdf:predicate	"study"
s15	"a decentralised version of the greedy allocation algorithm then studied with a firstprice payment rule proving tight bounds on the price of anarchy"	local:AM-ADV	"firstprice payment rule prove tight bound on the price of anarchy"
s15	"firstprice payment rule prove tight bound on the price of anarchy"	rdfs:member	"price"
s15	"firstprice payment rule prove tight bound on the price of anarchy"	rdfs:member	"firstprice payment rule"
s15	"firstprice payment rule prove tight bound on the price of anarchy"	rdfs:member	"anarchy"
s15	"firstprice payment rule prove tight bound on the price of anarchy"	rdfs:member	"tight bound"
s15	"firstprice payment"	rdfs:subClassOf	"payment"
s15	"firstprice payment"	rdfs:member	"firstprice"
s15	"payment rule"	rdfs:member	"payment"
s15	"firstprice payment rule"	rdfs:subClassOf	"rule"
s15	"firstprice payment rule"	rdfs:member	"firstprice payment"
s15	"payment rule"	rdfs:subClassOf	"rule"
s15	"tight bound"	rdfs:member	"tight"
s15	"tight bound"	rdfs:subClassOf	"bound"
s15	"firstprice payment rule"	rdfs:subClassOf	"payment rule"
s15	"tight bound on price"	rdfs:member	"tight bound"
s15	"tight bound on price"	rdfs:member	"price"
s15	"price of anarchy"	rdfs:member	"price"
s15	"price of anarchy"	rdfs:member	"anarchy"
s15	"a decentralised version of the greedy allocation algorithm then studied with a firstprice payment rule proving tight bounds on the price of anarchy"	local:AM-TMP	"then"
s14.1	"a firstprice payment rule proving tight bounds on the price of stability"
s14.1	"a firstprice payment rule proving tight bounds on the price of stability"	rdf:subject	"firstprice payment rule"
s14.1	"firstprice payment"	rdfs:subClassOf	"payment"
s14.1	"firstprice payment"	rdfs:member	"firstprice"
s14.1	"payment rule"	rdfs:member	"payment"
s14.1	"firstprice payment rule"	rdfs:subClassOf	"rule"
s14.1	"firstprice payment rule"	rdfs:member	"firstprice payment"
s14.1	"payment rule"	rdfs:subClassOf	"rule"
s14.1	"firstprice payment rule"	rdfs:subClassOf	"payment rule"
s14.1	"a firstprice payment rule proving tight bounds on the price of stability"	rdf:predicate	"prove"
s14.1	"a firstprice payment rule proving tight bounds on the price of stability"	rdf:object	"tight bound on the price of stability"
s14.1	"tight bound on the price of stability"	rdfs:member	"price"
s14.1	"tight bound on the price of stability"	rdfs:member	"stability"
s14.1	"tight bound on the price of stability"	rdfs:member	"tight bound"
s14.1	"tight bound"	rdfs:subClassOf	"bound"
s14.1	"tight bound"	rdfs:member	"tight"
s14.1	"tight bound on price"	rdfs:member	"tight bound"
s14.1	"tight bound on price"	rdfs:member	"price"
s14.1	"price of stability"	rdfs:member	"price"
s14.1	"price of stability"	rdfs:member	"stability"
s14	"a decentralised version of the greedy allocation algorithm then studied with a firstprice payment rule proving tight bounds on the price of stability"
s14	"a decentralised version of the greedy allocation algorithm then studied with a firstprice payment rule proving tight bounds on the price of stability"	rdf:subject	"decentralise version of the greedy allocation algorithm"
s14	"decentralise version of the greedy allocation algorithm"	rdfs:member	"greedy allocation algorithm"
s14	"decentralise version of the greedy allocation algorithm"	rdfs:member	"decentralise version"
s14	"allocation algorithm"	rdfs:subClassOf	"algorithm"
s14	"greedy allocation"	rdfs:subClassOf	"allocation"
s14	"greedy allocation"	rdfs:member	"greedy"
s14	"decentralise version"	rdfs:subClassOf	"version"
s14	"decentralise version"	rdfs:member	"decentralise"
s14	"allocation algorithm"	rdfs:member	"allocation"
s14	"greedy allocation algorithm"	rdfs:member	"greedy allocation"
s14	"greedy allocation algorithm"	rdfs:subClassOf	"algorithm"
s14	"greedy allocation algorithm"	rdfs:subClassOf	"allocation algorithm"
s14	"version of greedy allocation algorithm"	rdfs:member	"version"
s14	"version of greedy allocation algorithm"	rdfs:member	"greedy allocation algorithm"
s14	"a decentralised version of the greedy allocation algorithm then studied with a firstprice payment rule proving tight bounds on the price of stability"	rdf:predicate	"study"
s14	"a decentralised version of the greedy allocation algorithm then studied with a firstprice payment rule proving tight bounds on the price of stability"	local:AM-MNR	"firstprice payment rule prove tight bound on the price of stability"
s14	"firstprice payment rule prove tight bound on the price of stability"	rdfs:member	"price"
s14	"firstprice payment rule prove tight bound on the price of stability"	rdfs:member	"firstprice payment rule"
s14	"firstprice payment rule prove tight bound on the price of stability"	rdfs:member	"stability"
s14	"firstprice payment rule prove tight bound on the price of stability"	rdfs:member	"tight bound"
s14	"firstprice payment"	rdfs:subClassOf	"payment"
s14	"firstprice payment"	rdfs:member	"firstprice"
s14	"payment rule"	rdfs:member	"payment"
s14	"firstprice payment rule"	rdfs:subClassOf	"rule"
s14	"firstprice payment rule"	rdfs:member	"firstprice payment"
s14	"payment rule"	rdfs:subClassOf	"rule"
s14	"tight bound"	rdfs:member	"tight"
s14	"tight bound"	rdfs:subClassOf	"bound"
s14	"firstprice payment rule"	rdfs:subClassOf	"payment rule"
s14	"tight bound on price"	rdfs:member	"tight bound"
s14	"tight bound on price"	rdfs:member	"price"
s14	"price of stability"	rdfs:member	"price"
s14	"price of stability"	rdfs:member	"stability"
s14	"a decentralised version of the greedy allocation algorithm then studied with a firstprice payment rule proving tight bounds on the price of stability"	local:AM-TMP	"then"
s13.2	"truthful mechanisms"
s13.2	"truthful mechanisms"	rdf:subject	"truthful mechanism"
s13.2	"truthful mechanism"	rdfs:subClassOf	"mechanism"
s13.2	"truthful mechanism"	rdfs:member	"truthful"
s13.2	"truthful mechanisms"	rdf:predicate	"require"
s13.1	"implementations in dominant strategies should solved optimally if truthful mechanisms are required"
s13.1	"implementations in dominant strategies should solved optimally if truthful mechanisms are required"	rdf:subject	"implementation in dominant strategy"
s13.1	"implementation in dominant strategy"	rdfs:member	"dominant strategy"
s13.1	"implementation in dominant strategy"	rdfs:member	"implementation"
s13.1	"dominant strategy"	rdfs:member	"dominant"
s13.1	"dominant strategy"	rdfs:subClassOf	"strategy"
s13.1	"implementation in dominant strategy"	rdfs:member	"implementation"
s13.1	"implementation in dominant strategy"	rdfs:member	"dominant strategy"
s13.1	"implementations in dominant strategies should solved optimally if truthful mechanisms are required"	rdf:predicate	"solve"
s13.1	"implementations in dominant strategies should solved optimally if truthful mechanisms are required"	local:AM-ADV	"truthful mechanism be require"
s13.1	"truthful mechanism"	rdfs:subClassOf	"mechanism"
s13.1	"truthful mechanism"	rdfs:member	"truthful"
s13.1	"implementations in dominant strategies should solved optimally if truthful mechanisms are required"	local:AM-MNR	"optimally"
s13.1	"implementations in dominant strategies should solved optimally if truthful mechanisms are required"	local:AM-MOD	"should"
s13	"we show that implementations in dominant strategies should be solved optimally if truthful mechanisms are required"
s13	"we show that implementations in dominant strategies should be solved optimally if truthful mechanisms are required"	rdf:subject	"we"
s13	"we show that implementations in dominant strategies should be solved optimally if truthful mechanisms are required"	rdf:predicate	"show"
s13	"we show that implementations in dominant strategies should be solved optimally if truthful mechanisms are required"	rdf:object	"implementation in dominant strategy should be solve optimally if truthful mechanism be require"
s13	"implementation in dominant strategy should be solve optimally if truthful mechanism be require"	rdfs:member	"truthful mechanism"
s13	"implementation in dominant strategy should be solve optimally if truthful mechanism be require"	rdfs:member	"dominant strategy"
s13	"implementation in dominant strategy should be solve optimally if truthful mechanism be require"	rdfs:member	"implementation"
s13	"dominant strategy"	rdfs:subClassOf	"strategy"
s13	"truthful mechanism"	rdfs:subClassOf	"mechanism"
s13	"dominant strategy"	rdfs:member	"dominant"
s13	"truthful mechanism"	rdfs:member	"truthful"
s13	"optimally solve"	rdfs:subClassOf	"solve"
s13	"be optimally solve"	rdfs:subClassOf	"optimally solve"
s13	"should be optimally solve"	rdfs:subClassOf	"be optimally solve"
s13	"implementation in dominant strategy"	rdfs:member	"implementation"
s13	"implementation in dominant strategy"	rdfs:member	"dominant strategy"
s12	"we study implementations in dominant strategies"
s12	"we study implementations in dominant strategies"	rdf:subject	"we"
s12	"we study implementations in dominant strategies"	rdf:predicate	"study"
s12	"we study implementations in dominant strategies"	rdf:object	"implementation in dominant strategy"
s12	"implementation in dominant strategy"	rdfs:member	"dominant strategy"
s12	"implementation in dominant strategy"	rdfs:member	"implementation"
s12	"dominant strategy"	rdfs:member	"dominant"
s12	"dominant strategy"	rdfs:subClassOf	"strategy"
s12	"implementation in dominant strategy"	rdfs:member	"implementation"
s12	"implementation in dominant strategy"	rdfs:member	"dominant strategy"
s11	"a matching that maximises the agents social welfare"
s11	"a matching that maximises the agents social welfare"	rdf:subject	"match"
s11	"a matching that maximises the agents social welfare"	rdf:predicate	"maximise"
s11	"a matching that maximises the agents social welfare"	rdf:object	"agent social welfare"
s11	"agent social welfare"	rdfs:member	"social welfare"
s11	"agent social welfare"	rdfs:member	"agent"
s11	"social welfare"	rdfs:member	"social"
s11	"social welfare"	rdfs:subClassOf	"welfare"
s11	"agent social welfare"	rdfs:subClassOf	"social welfare"
s10	"find a matching"
s10	"find a matching"	rdf:subject	"match"
s10	"find a matching"	rdf:predicate	"find"
s9	"valuations associated with model candidate correspondences"
s9	"valuations associated with model candidate correspondences"	rdf:subject	"valuation"
s9	"valuations associated with model candidate correspondences"	rdf:predicate	"associate"
s9	"valuations associated with model candidate correspondences"	rdf:object	"model candidate correspondence"
s9	"candidate correspondence"	rdfs:member	"candidate"
s9	"model candidate correspondence"	rdfs:subClassOf	"correspondence"
s9	"model candidate"	rdfs:member	"model"
s9	"model candidate"	rdfs:subClassOf	"candidate"
s9	"model candidate correspondence"	rdfs:member	"model candidate"
s9	"candidate correspondence"	rdfs:subClassOf	"correspondence"
s9	"model candidate correspondence"	rdfs:subClassOf	"candidate correspondence"
s8.1	"an edgeweighted bipartite graph where each side of the graph represents each agents private entities"
s8.1	"an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:subject	"side of the graph"
s8.1	"side of the graph"	rdfs:member	"graph"
s8.1	"side of the graph"	rdfs:member	"side"
s8.1	"side of graph"	rdfs:member	"side"
s8.1	"side of graph"	rdfs:member	"graph"
s8.1	"an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:predicate	"represent"
s8.1	"an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:object	"agent private entity"
s8.1	"agent private"	rdfs:subClassOf	"private"
s8.1	"agent private entity"	rdfs:member	"agent private"
s8.1	"private entity"	rdfs:subClassOf	"entity"
s8.1	"private entity"	rdfs:member	"private"
s8.1	"agent private"	rdfs:member	"agent"
s8.1	"agent private entity"	rdfs:subClassOf	"entity"
s8.1	"agent private entity"	rdfs:subClassOf	"private entity"
s8.1	"an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	local:AM-LOC	"edgeweighted bipartite graph"
s8.1	"bipartite graph"	rdfs:member	"bipartite"
s8.1	"bipartite graph"	rdfs:subClassOf	"graph"
s8.1	"edgeweighted bipartite graph"	rdfs:subClassOf	"bipartite graph"
s8	"we examine model as a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represents each agents private entities"
s8	"we examine model as a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:subject	"we"
s8	"we examine model as a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:predicate	"examine"
s8	"we examine model as a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:object	"model a a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"
s8	"model a a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"graph represent"
s8	"model a a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"agent"
s8	"model a a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"bipartite graph"
s8	"model a a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"side"
s8	"model a a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"model"
s8	"model a a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"private entity"
s8	"model a a novel mechanism design problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"novel mechanism design problem"
s8	"design problem"	rdfs:member	"design"
s8	"novel mechanism design"	rdfs:member	"novel mechanism"
s8	"novel mechanism"	rdfs:subClassOf	"mechanism"
s8	"mechanism design problem"	rdfs:member	"mechanism design"
s8	"novel mechanism"	rdfs:member	"novel"
s8	"private entity"	rdfs:subClassOf	"entity"
s8	"novel mechanism design problem"	rdfs:subClassOf	"problem"
s8	"graph represent"	rdfs:member	"graph"
s8	"bipartite graph"	rdfs:subClassOf	"graph"
s8	"graph represent"	rdfs:subClassOf	"represent"
s8	"bipartite graph"	rdfs:member	"bipartite"
s8	"mechanism design"	rdfs:member	"mechanism"
s8	"mechanism design problem"	rdfs:subClassOf	"problem"
s8	"novel mechanism design problem"	rdfs:member	"novel mechanism design"
s8	"novel mechanism design"	rdfs:subClassOf	"design"
s8	"mechanism design"	rdfs:subClassOf	"design"
s8	"private entity"	rdfs:member	"private"
s8	"design problem"	rdfs:subClassOf	"problem"
s8	"where represent"	rdfs:subClassOf	"represent"
s8	"edgeweighted bipartite graph"	rdfs:subClassOf	"bipartite graph"
s8	"mechanism design problem"	rdfs:subClassOf	"design problem"
s8	"novel mechanism design problem"	rdfs:subClassOf	"mechanism design problem"
s8	"novel mechanism design problem on edgeweighted bipartite graph"	rdfs:member	"novel mechanism design problem"
s8	"novel mechanism design problem on edgeweighted bipartite graph"	rdfs:member	"edgeweighted bipartite graph"
s8	"side of graph"	rdfs:member	"side"
s8	"side of graph"	rdfs:member	"graph"
s7.1	"an edgeweighted bipartite graph where each agent maintains a private set of valuations"
s7.1	"an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:subject	"agent"
s7.1	"an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:predicate	"maintain"
s7.1	"an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:object	"private set of valuation"
s7.1	"private set of valuation"	rdfs:member	"valuation"
s7.1	"private set of valuation"	rdfs:member	"private set"
s7.1	"private set"	rdfs:subClassOf	"set"
s7.1	"private set"	rdfs:member	"private"
s7.1	"private set of valuation"	rdfs:member	"private set"
s7.1	"private set of valuation"	rdfs:member	"valuation"
s7.1	"an edgeweighted bipartite graph where each agent maintains a private set of valuations"	local:AM-LOC	"edgeweighted bipartite graph"
s7.1	"bipartite graph"	rdfs:member	"bipartite"
s7.1	"bipartite graph"	rdfs:subClassOf	"graph"
s7.1	"edgeweighted bipartite graph"	rdfs:subClassOf	"bipartite graph"
s7	"we examine model as a novel mechanism design problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"
s7	"we examine model as a novel mechanism design problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:subject	"we"
s7	"we examine model as a novel mechanism design problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:predicate	"examine"
s7	"we examine model as a novel mechanism design problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:object	"model"
s7	"we examine model as a novel mechanism design problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"	local:AM-LOC	"edgeweighted bipartite graph where each agent maintain a private set of valuation"
s7	"edgeweighted bipartite graph where each agent maintain a private set of valuation"	rdfs:member	"bipartite graph"
s7	"edgeweighted bipartite graph where each agent maintain a private set of valuation"	rdfs:member	"private set"
s7	"edgeweighted bipartite graph where each agent maintain a private set of valuation"	rdfs:member	"agent"
s7	"edgeweighted bipartite graph where each agent maintain a private set of valuation"	rdfs:member	"valuation"
s7	"bipartite graph"	rdfs:member	"bipartite"
s7	"bipartite graph"	rdfs:subClassOf	"graph"
s7	"private set"	rdfs:subClassOf	"set"
s7	"private set"	rdfs:member	"private"
s7	"where maintain"	rdfs:subClassOf	"maintain"
s7	"edgeweighted bipartite graph"	rdfs:subClassOf	"bipartite graph"
s7	"private set of valuation"	rdfs:member	"private set"
s7	"private set of valuation"	rdfs:member	"valuation"
s7	"we examine model as a novel mechanism design problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"	local:AM-MNR	"novel mechanism design problem"
s7	"design problem"	rdfs:member	"design"
s7	"novel mechanism design"	rdfs:member	"novel mechanism"
s7	"novel mechanism"	rdfs:subClassOf	"mechanism"
s7	"mechanism design problem"	rdfs:member	"mechanism design"
s7	"novel mechanism"	rdfs:member	"novel"
s7	"novel mechanism design problem"	rdfs:subClassOf	"problem"
s7	"mechanism design"	rdfs:member	"mechanism"
s7	"mechanism design problem"	rdfs:subClassOf	"problem"
s7	"novel mechanism design problem"	rdfs:member	"novel mechanism design"
s7	"novel mechanism design"	rdfs:subClassOf	"design"
s7	"mechanism design"	rdfs:subClassOf	"design"
s7	"design problem"	rdfs:subClassOf	"problem"
s7	"mechanism design problem"	rdfs:subClassOf	"design problem"
s7	"novel mechanism design problem"	rdfs:subClassOf	"mechanism design problem"
s6.1	"an edgeweighted bipartite graph where each side of the graph represents each agents private entities"
s6.1	"an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:subject	"side of the graph"
s6.1	"side of the graph"	rdfs:member	"graph"
s6.1	"side of the graph"	rdfs:member	"side"
s6.1	"side of graph"	rdfs:member	"side"
s6.1	"side of graph"	rdfs:member	"graph"
s6.1	"an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:predicate	"represent"
s6.1	"an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:object	"agent private entity"
s6.1	"agent private"	rdfs:subClassOf	"private"
s6.1	"agent private entity"	rdfs:member	"agent private"
s6.1	"private entity"	rdfs:subClassOf	"entity"
s6.1	"private entity"	rdfs:member	"private"
s6.1	"agent private"	rdfs:member	"agent"
s6.1	"agent private entity"	rdfs:subClassOf	"entity"
s6.1	"agent private entity"	rdfs:subClassOf	"private entity"
s6.1	"an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	local:AM-LOC	"edgeweighted bipartite graph"
s6.1	"bipartite graph"	rdfs:member	"bipartite"
s6.1	"bipartite graph"	rdfs:subClassOf	"graph"
s6.1	"edgeweighted bipartite graph"	rdfs:subClassOf	"bipartite graph"
s6	"we examine this problem and model this problem on an edgeweighted bipartite graph where each side of the graph represents each agents private entities"
s6	"we examine this problem and model this problem on an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:subject	"we"
s6	"we examine this problem and model this problem on an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:predicate	"examine"
s6	"we examine this problem and model this problem on an edgeweighted bipartite graph where each side of the graph represents each agents private entities"	rdf:object	"problem and model this problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"
s6	"problem and model this problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"graph represent"
s6	"problem and model this problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"agent"
s6	"problem and model this problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"bipartite graph"
s6	"problem and model this problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"side"
s6	"problem and model this problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"private entity"
s6	"problem and model this problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"problem"
s6	"problem and model this problem on an edgeweighted bipartite graph where each side of the graph represent each agent private entity"	rdfs:member	"model"
s6	"private entity"	rdfs:subClassOf	"entity"
s6	"graph represent"	rdfs:member	"graph"
s6	"bipartite graph"	rdfs:subClassOf	"graph"
s6	"graph represent"	rdfs:subClassOf	"represent"
s6	"bipartite graph"	rdfs:member	"bipartite"
s6	"private entity"	rdfs:member	"private"
s6	"where represent"	rdfs:subClassOf	"represent"
s6	"edgeweighted bipartite graph"	rdfs:subClassOf	"bipartite graph"
s6	"problem on edgeweighted bipartite graph"	rdfs:member	"problem"
s6	"problem on edgeweighted bipartite graph"	rdfs:member	"edgeweighted bipartite graph"
s6	"side of graph"	rdfs:member	"side"
s6	"side of graph"	rdfs:member	"graph"
s5.1	"an edgeweighted bipartite graph where each agent maintains a private set of valuations"
s5.1	"an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:subject	"agent"
s5.1	"an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:predicate	"maintain"
s5.1	"an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:object	"private set of valuation"
s5.1	"private set of valuation"	rdfs:member	"valuation"
s5.1	"private set of valuation"	rdfs:member	"private set"
s5.1	"private set"	rdfs:subClassOf	"set"
s5.1	"private set"	rdfs:member	"private"
s5.1	"private set of valuation"	rdfs:member	"private set"
s5.1	"private set of valuation"	rdfs:member	"valuation"
s5.1	"an edgeweighted bipartite graph where each agent maintains a private set of valuations"	local:AM-LOC	"edgeweighted bipartite graph"
s5.1	"bipartite graph"	rdfs:member	"bipartite"
s5.1	"bipartite graph"	rdfs:subClassOf	"graph"
s5.1	"edgeweighted bipartite graph"	rdfs:subClassOf	"bipartite graph"
s5	"we examine this problem and model this problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"
s5	"we examine this problem and model this problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:subject	"we"
s5	"we examine this problem and model this problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:predicate	"examine"
s5	"we examine this problem and model this problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"	rdf:object	"problem and model this problem"
s5	"problem and model this problem"	rdfs:member	"problem"
s5	"problem and model this problem"	rdfs:member	"model"
s5	"we examine this problem and model this problem on an edgeweighted bipartite graph where each agent maintains a private set of valuations"	local:AM-LOC	"edgeweighted bipartite graph where each agent maintain a private set of valuation"
s5	"edgeweighted bipartite graph where each agent maintain a private set of valuation"	rdfs:member	"bipartite graph"
s5	"edgeweighted bipartite graph where each agent maintain a private set of valuation"	rdfs:member	"private set"
s5	"edgeweighted bipartite graph where each agent maintain a private set of valuation"	rdfs:member	"agent"
s5	"edgeweighted bipartite graph where each agent maintain a private set of valuation"	rdfs:member	"valuation"
s5	"bipartite graph"	rdfs:member	"bipartite"
s5	"bipartite graph"	rdfs:subClassOf	"graph"
s5	"private set"	rdfs:subClassOf	"set"
s5	"private set"	rdfs:member	"private"
s5	"where maintain"	rdfs:subClassOf	"maintain"
s5	"edgeweighted bipartite graph"	rdfs:subClassOf	"bipartite graph"
s5	"private set of valuation"	rdfs:member	"private set"
s5	"private set of valuation"	rdfs:member	"valuation"
s4	"valuations associated with this problem"
s4	"valuations associated with this problem"	rdf:subject	"valuation"
s4	"valuations associated with this problem"	rdf:predicate	"associate"
s4	"valuations associated with this problem"	rdf:object	"problem"
s3	"the agents revealing information"
s3	"the agents revealing information"	rdf:subject	"agent"
s3	"the agents revealing information"	rdf:predicate	"reveal"
s3	"the agents revealing information"	rdf:object	"information"
s2.3	"exchanged correspondences"
s2.3	"exchanged correspondences"	rdf:subject	"correspondence"
s2.3	"exchanged correspondences"	rdf:predicate	"exchange"
s2.2	"an agent misrepresenting the weight or confidence of the exchanged correspondences"
s2.2	"an agent misrepresenting the weight or confidence of the exchanged correspondences"	rdf:subject	"agent"
s2.2	"an agent misrepresenting the weight or confidence of the exchanged correspondences"	rdf:predicate	"misrepresent"
s2.2	"an agent misrepresenting the weight or confidence of the exchanged correspondences"	rdf:object	"weight or confidence of the exchange correspondence"
s2.2	"weight or confidence of the exchange correspondence"	rdfs:member	"weight"
s2.2	"weight or confidence of the exchange correspondence"	rdfs:member	"confidence"
s2.2	"weight or confidence of the exchange correspondence"	rdfs:member	"exchange correspondence"
s2.2	"exchange correspondence"	rdfs:subClassOf	"correspondence"
s2.2	"exchange correspondence"	rdfs:member	"exchange"
s2.2	"weight of exchange correspondence"	rdfs:member	"weight"
s2.2	"weight of exchange correspondence"	rdfs:member	"exchange correspondence"
s2.1	"an agent manipulate the negotiation"
s2.1	"an agent manipulate the negotiation"	rdf:subject	"agent"
s2.1	"an agent manipulate the negotiation"	rdf:predicate	"manipulate"
s2.1	"an agent manipulate the negotiation"	rdf:object	"negotiation"
s2	"however an agent may tempted to manipulate the negotiation in favour of a preferred alignment by misrepresenting the weight or confidence of the exchanged correspondences"
s2	"however an agent may tempted to manipulate the negotiation in favour of a preferred alignment by misrepresenting the weight or confidence of the exchanged correspondences"	rdf:subject	"agent"
s2	"however an agent may tempted to manipulate the negotiation in favour of a preferred alignment by misrepresenting the weight or confidence of the exchanged correspondences"	rdf:predicate	"tempt"
s2	"however an agent may tempted to manipulate the negotiation in favour of a preferred alignment by misrepresenting the weight or confidence of the exchanged correspondences"	local:AM-DIS	"however"
s2	"however an agent may tempted to manipulate the negotiation in favour of a preferred alignment by misrepresenting the weight or confidence of the exchanged correspondences"	local:AM-MOD	"may"
s2	"however an agent may tempted to manipulate the negotiation in favour of a preferred alignment by misrepresenting the weight or confidence of the exchanged correspondences"	local:AM-PNC	"manipulate the negotiation in favour of a prefer alignment by misrepresent the weight or confidence of the exchange correspondence"
s2	"manipulate the negotiation in favour of a prefer alignment by misrepresent the weight or confidence of the exchange correspondence"	rdfs:member	"weight"
s2	"manipulate the negotiation in favour of a prefer alignment by misrepresent the weight or confidence of the exchange correspondence"	rdfs:member	"negotiation"
s2	"manipulate the negotiation in favour of a prefer alignment by misrepresent the weight or confidence of the exchange correspondence"	rdfs:member	"exchange correspondence"
s2	"manipulate the negotiation in favour of a prefer alignment by misrepresent the weight or confidence of the exchange correspondence"	rdfs:member	"misrepresent"
s2	"manipulate the negotiation in favour of a prefer alignment by misrepresent the weight or confidence of the exchange correspondence"	rdfs:member	"confidence"
s2	"manipulate the negotiation in favour of a prefer alignment by misrepresent the weight or confidence of the exchange correspondence"	rdfs:member	"favour"
s2	"manipulate the negotiation in favour of a prefer alignment by misrepresent the weight or confidence of the exchange correspondence"	rdfs:member	"prefer alignment"
s2	"exchange correspondence"	rdfs:subClassOf	"correspondence"
s2	"prefer alignment"	rdfs:member	"prefer"
s2	"exchange correspondence"	rdfs:member	"exchange"
s2	"prefer alignment"	rdfs:subClassOf	"alignment"
s2	"manipulate in favour"	rdfs:member	"manipulate"
s2	"manipulate in favour"	rdfs:member	"favour"
s2	"favour of prefer alignment"	rdfs:member	"favour"
s2	"favour of prefer alignment"	rdfs:member	"prefer alignment"
s2	"weight of exchange correspondence"	rdfs:member	"weight"
s2	"weight of exchange correspondence"	rdfs:member	"exchange correspondence"
s1.1	"in the distributed ontology alignment construction problem two agents agree upon a meaningful subset of correspondences"
s1.1	"in the distributed ontology alignment construction problem two agents agree upon a meaningful subset of correspondences"	rdf:subject	"two agent"
s1.1	"two agent"	rdfs:subClassOf	"agent"
s1.1	"in the distributed ontology alignment construction problem two agents agree upon a meaningful subset of correspondences"	rdf:predicate	"agree"
s1.1	"in the distributed ontology alignment construction problem two agents agree upon a meaningful subset of correspondences"	local:AM-LOC	"distribute ontology alignment construction problem"
s1.1	"distribute ontology alignment construction problem"	rdfs:member	"distribute ontology"
s1.1	"distribute ontology alignment construction problem"	rdfs:member	"alignment construction problem"
s1.1	"alignment construction"	rdfs:subClassOf	"construction"
s1.1	"alignment construction"	rdfs:member	"alignment"
s1.1	"construction problem"	rdfs:subClassOf	"problem"
s1.1	"construction problem"	rdfs:member	"construction"
s1.1	"distribute ontology"	rdfs:subClassOf	"ontology"
s1.1	"alignment construction problem"	rdfs:member	"alignment construction"
s1.1	"alignment construction problem"	rdfs:subClassOf	"problem"
s1.1	"distribute ontology"	rdfs:member	"distribute"
s1.1	"alignment construction problem"	rdfs:subClassOf	"construction problem"
s1.1	"ontology alignment construction problem"	rdfs:subClassOf	"alignment construction problem"
s1.1	"in the distributed ontology alignment construction problem two agents agree upon a meaningful subset of correspondences"	local:AM-TMP	"upon a meaningful subset of correspondence"
s1.1	"upon a meaningful subset of correspondence"	rdfs:member	"correspondence"
s1.1	"upon a meaningful subset of correspondence"	rdfs:member	"meaningful subset"
s1.1	"meaningful subset"	rdfs:member	"meaningful"
s1.1	"meaningful subset"	rdfs:subClassOf	"subset"
s1.1	"meaningful subset of correspondence"	rdfs:member	"meaningful subset"
s1.1	"meaningful subset of correspondence"	rdfs:member	"correspondence"
s1	"distributed ontology alignment construction problem"
s1	"distributed ontology alignment construction problem"	rdf:subject	"ontology alignment construction problem"
s1	"ontology alignment construction problem"	rdfs:member	"alignment construction problem"
s1	"ontology alignment construction problem"	rdfs:member	"ontology"
s1	"alignment construction"	rdfs:subClassOf	"construction"
s1	"alignment construction"	rdfs:member	"alignment"
s1	"construction problem"	rdfs:subClassOf	"problem"
s1	"construction problem"	rdfs:member	"construction"
s1	"alignment construction problem"	rdfs:member	"alignment construction"
s1	"alignment construction problem"	rdfs:subClassOf	"problem"
s1	"alignment construction problem"	rdfs:subClassOf	"construction problem"
s1	"ontology alignment construction problem"	rdfs:subClassOf	"alignment construction problem"
s1	"distributed ontology alignment construction problem"	rdf:predicate	"distribute"
