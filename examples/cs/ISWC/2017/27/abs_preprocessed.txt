Answering queries over a federation of SPARQL endpoints requires combining data from more than one data source
Optimizing queries in such scenarios is particularly challenging not only because of the large variety of possible query execution plans also because there is only limited access to statistics about instance data of remote sources
Optimizing queries in such scenarios is particularly challenging not only because of the large variety of possible query execution plans that correctly answer the query
Optimizing queries in such scenarios is particularly challenging not only because of the large variety of possible query execution plans also because there is only limited access to statistics about schema data of remote sources
To overcome these challenges most federated query engines rely on heuristics to reduce the space of possible query execution plans
To overcome these challenges most federated query engines rely on dynamic programming strategies to produce optimal plans
Nevertheless optimal plans may still exhibit a high number of high execution times because of inaccurate cost estimations
Nevertheless optimal plans may still exhibit a high number of high execution times because of heuristics
Nevertheless optimal plans may still exhibit a high number of intermediate results because of inaccurate cost estimations
Nevertheless optimal plans may still exhibit a high number of intermediate results because of heuristics
statistics that allow for a more accurate cost estimation for federated queries
an approach that uses statistics
In this paper we present Odyssey
statistics that therefore enables Odyssey to produce better query execution plans
In this paper we present an approach
query execution plans that are better in terms of data transfer time than stateoftheart optimizers
query execution plans that are better in terms of data execution time than stateoftheart optimizers
Our experimental results show that Odyssey produces query execution plans
Our experiments show execution time gains of at least 25 times on average
Our experiments using the FedBench benchmark